# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson
'.source.coffee':
  "'prefix':'var'":
    'prefix':'prefix'
    'body':"""
      'prefix':'$1'
      $2
    """
  "'body':'var'":
    'prefix':'body'
    'body':"""
      'body':${1:"$2"}
      $3
    """
  "'description':'var'":
    'prefix':'description'
    'body':"""
      'description': \\"\\"\\"
        $1
      \\"\\"\\"
      $2
    """
  "'descriptionMoreURL':'var'":
    'prefix':'descriptionMoreURL'
    'body':"""
      'descriptionMoreURL':'$1'
      $2
    """
'.text.html.basic':
#SET
  '<cms:set variable=message />':
    'prefix':'set'
    'body':':set $1=$2 />$3'
    'description':'<cms:set variable=message />'
#SHOW
  '<cms:show variable />':
    'prefix':'show'
    'body':':show $1 />$2'
    'description':'<cms:show variable />'
#ADD
  "<cms:add numvar '1' />":
    'prefix':'add'
    'body':':add $1 $2 />$3'
    'description':"""
      <cms:add numbar '1' />

      The add tag accepts two parameters and returns as its output the value obtained after adding together the two parameters.

      The parameters may be literal strings, variables or output of other tags.

        <cms:add my_count '1' />

      The snippet above adds 1 to what ever value is contained within my_count variable and outputs the resulting value.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/add.html'
#ADD_QUERYSTRING
  "<cms:add_querystring k_page_link 'param1=someval&param2=otherval' />":
    'prefix':'add_querystring'
    'body':"add_querystring $1 '$2=$3' />$4"
    'description':"""
      <cms:add_querystring k_page_link 'param1=someval&param2=otherval' />
      Parameters: link, querystring.

      link: The URL to append the querystring to.

      querystring: The querystring to be appended to the link. It there are multiple parameters in the querystring, separate them by '&'.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/add_querystring.html'
#ARCHIVES
  "<cms:archives masterpage=k_template_name order='1' start_on='startdate' stop_before='stopdate' show_future_entries='1' type='yearly|monthly|daily' startcount='0'>variables</cms:archives>":
    'prefix':'archives'
    'body':"""
      archives masterpage=$1 type='$2' $3>
        $4
      </cms:archives>$5
    """
    'description':"""
      <cms:archives masterpage=k_template_name order='1' start_on='startdate' stop_before='stopdate' show_future_entries='1' type='yearly|monthly|daily' startcount='0'>variables</cms:archives>

      Parameters: masterpage, order, limit, start_on, stop_before, show_future_entries, type, startcount.

      masterpage - The template to create the archives for. If skipped, the current executing page's template will be assumed.

      order - Can be set to either asc or desc for setting the sort order to ascending or descending.

      limit - Set this parameter to limit the number of archives listed.

      start_on - Can be set to list archives starting from this date.

      stop_before - Can be set not to list archives later than this date.

      show_future_entries - By default, the archives tag will ignore pages that have their publish date set to the future. This parameter can be set to '1' to change this behaviour.

      type - The type of the archives created - valid values are yearly, monthly or daily. If skipped, daily is assumed by default.

      startcount - As this tag enumerates the archives, it sets a variable named k_count to the number of the current iteration. k_count begins from '0' by default. It can be set to start from any other number by setting this parameter.

      Variables: k_archive_date, k_next_archive_date, k_archive_link, k_archive_count, k_count
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/archives.html'
#BREASCRUMBS
  "<cms:breadcrumbs seperator='&nbsp;>&nbsp;' include_template='1' />":
    'prefix':'breadcrumbs'
    'body':"breadcrumbs separator='$1' include_template='$2'/>"
    'description':"""
      <cms:breadcrumbs separator='$1' include_template='$2'/>

      The breadcrumbs tag outputs the hierarchy of folders leading upto the folder being shown (if folder_view) or the folder within which the current page resides (if page_view). This can be used too create a trail (breadcrumbs) leading upto the current page.

      Parameters: separator, include_template.

      separator - Set the separator to show between each item in the breadcrumbs. The default separator is '&nbsp;>&nbsp;'.

      include_template - By default, this tag only outputs the hierarchy of folders. To make it also list the template of the folders as the first item in the breadcrumbs, set this parameter to '1'. If this parameter is set, remember to check that the current view is either folder-view or page-view before invoking this tag, because for any other views the folder hierarchy is irrelevant and breadcrumbs tag rightly does not output any folder names, however the include_template parameter will cause the template's name to appear which might not be desirable.

        <cms:if k_is_page || k_is_folder >
          <cms:breadcrumbs separator='&nbsp;>>&nbsp;' include_template='1' />
        </cms:if>
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/breadcrumbs.html'
#CAPTURE
  "<cms:capture into='my_variable' scope='global'>":
    'prefix':'capture'
    'body':"""
      capture into='$1' scope='${2:global}'>
        $3
      </cms:capture>$4
    """
    'description':"""
      <cms:capture into='my_variable' scope='global'>
        ...everything executed here will get stored in variable 'my_variable' at the requested scope...
      </cms:capture>

      The capture tag can be used to store the output of its enclosed contents within any variable.
      The enclosed contents can be regular HTML code as well as the Couch tags.
      This tag is very helpful when you want to execute a portion of the code but wish to display the resulting output based on some other condition that is unknown at the point of execution of this code e.g. present in the page somewhere after the block of code in question.
      This situation can be tackled by storing the output of the block of code in a variable for the time being. When we reach the required condition and if it evaluates to be true, we can display the output by showing the variable. However, if the condition fails, we can simply ignore the variable.

      Parameters: into, scope.

      into - Name of the variable to store the output in.

      scope - Scope of the aforesaid variable. Can be either global or parent.
      If set to global, the variable will be available anywhere throughout the page. If set to parent, the variable will only be available only within the scope of the parent tag (if any) that is nesting the capture tag.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/capture.html'
#CLOAK EMAIL
  "<cms:cloak_email email='youremail@provider.com' />":
    'prefix':'cloak_email'
    'body':"cloak_email email='$1' title='$2' msg='${3:(Please enable JavaScript to view this email address)}' />"
    'description':"""
      <cms:cloak_email 'johndoe@gmail.com' />

      The cloak_email tag can be used to hide email addresses from spambots (email harvesters).
      This tag creates a JavaScript encrypted mailto link that remains inaccessible to spambots.

      The code above will produce the following HTML but only if accessed using JavaScript -

        <a href="mailto:johndoe@gmail.com">johndoe@gmail.com</a>

      When accessed with JavaScript disabled, a message prompting the visitor to enable JavaScript is shown instead.

      Parameters: email, title, msg.

      email - The email address to cloak.

        <cms:cloak_email email='johndoe@gmail.com' />

      title - The visible text of the mailto link. If skipped, the email parameter is used for the title too.

        <cms:cloak_email email='johndoe@gmail.com' title='Contact Me!' />

      msg - Message to display if this email is accessed with JavaScript disabled. If skipped, the default text shown is -

        '(Please enable JavaScript to view this email address)'

        <cms:cloak_email email='johndoe@gmail.com' title='Contact Me!' msg='No JavaScript ?!!' />
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/cloak_email.html'
#CLOAK URL
  "<cms:cloak_url link='k_template_link' />":
    'prefix':'cloak_url'
    'body':"""
      cloak_url link="$1" access_level='${2:4}' prompt_login='${3:1}' />
    """
    'description':  """
      <a href="<cms:cloak_url
        link="http://yoursite.com/couch/uploads/file/secure/test.jpg" force_download='1' access_level='4' prompt_login='1' />">Test Link</a>

      The cloak_url tag, as the name suggests, can be used to cloak links so that it does not become apparent from just looking at the links as to where they actually lead to.

      Parameters: link, expiry, access_level, prompt_login, redirect, force_download.

      link - The link (URL) to cloak.

      expiry - This parameter can be used to set a time (in seconds) after which the link produced wll no longer be valid.

      access_level - If an access level is set by this parameter, only authenticated users with the right level of privileges will be able to access the link.

      prompt_login - This parameter works in tandem with the access_level parameter above. With this parameter set to '1', if a link that has an access level set on it is accessed by someone who is not privileged enough, a login box is shown to hime thus promting him to login for accessing the link. By default, this parameter is '0' and unauthorized users are simply served a blank page.

      redirect - If this parameter is set to '1', the user is redirected to the link provided (by issuing a HTTP 302 redirect).

      force_download - By default, this tag evaluates the type of the file being linked to and sends back proper Content-Type to the browser. This causes the browser to display certain files (e.g. image files like gif, png etc.) directly while displaying a messagebox prompting the user to download certain types of files (e.g. executables, zip files etc.).
      If this parameter is set to '1', Couch will cause the browser to always display the download box regardless of the type of file being served.
    """
    'descriptionMoreURL' :'https://docs.couchcms.com/tags-reference/cloak_url.html'
#COMMENTS
  "<cms:comments masterpage='blog.php'></cms:comments>":
    'prefix':'comments'
    'body':"comments masterpage='$1' page_name='$2' limit='$3' paginate='${4:1}'  >$5</cms:comments>"
    'description':"""
      <cms:comments masterpage='blog.php'></cms:comments>

      Parameters: masterpage, page_id, page_name, limit, paginate, offset, order.

      Normally comments tag will fetch all the available approved comments. It can be constrained into fetching comments from only certain pages by setting the masterpage, page_id and page_name parameters.

      masterpage - Fetch comments of only the pages that have been cloned out of blog.php.

        <cms:comments masterpage='blog.php, testimonial.php'></cms:comments>

      Fetch comments of only the pages that have been cloned out of blog.php or testimonial.php.

        <cms:comments masterpage='NOT blog.php, testimonial.php'></cms:comments>

      Fetch comments of all the pages except those that have been cloned out of blog.php or testimonial.php.

      page_id - <cms:comments page_id='13'></cms:comments>

      Fetch comments of only the page with the id of '13'.

        <cms:comments page_id='13, 17'></cms:comments>

      Fetch comments of only the pages that have an id of '13' or '17'.

        <cms:comments page_id='NOT 13, 17'></cms:comments>

      Fetch comments of all the pages except the pages that have an id of '13' or '17'.

      page_name - <cms:comments page_name='my_first_entry'></cms:comments>

      Fetch comments of only the page named 'my_first_entry'.

        <cms:comments page_name='my_first_entry, my_another_entry'></cms:comments>

      Fetch comments of only the pages named 'my_first_entry' or 'my_another_entry'.

        <cms:comments page_name='NOT my_first_entry, my_another_entry'></cms:comments>

      Fetch comments of all the pages except the pages named 'my_first_entry' or 'my_another_entry'.

      limit - <cms:comments limit='5'></cms:comments>
      Fetch five approved comments. (Since 'order' is not specified, the default value of 'desc' will be used and the latest 5 comments will be fetched.

      paginate - <cms:comments limit='5' paginate='1'></cms:comments>
      Fetch ALL approved comments but show only 5 at one time. To move to the next 5 or the previous 5 comments, pagination code has to be used (see paginator).

      offset - <cms:comments limit='5' offset='2'></cms:comments>
      Fetch five approved comments after skipping the first two.

      order - Comments are always ordered by their dates. The order in which they are displayed can be made either ascending or descending by setting this parameter to 'asc' or 'desc' respectively. If omitted, 'desc' (latest first) is assumed.

        <cms:comments order='asc'></cms:comments>

      Fetch all approved comments and order them in ascending order (oldest first) of their dates.

      Variables: k_comment_id, k_comment, k_comment_author_id, k_comment_author, k_comment_author_email, k_comment_author_website, k_comment_date, k_comment_link, k_comment_page_id, k_comment_page_title, k_comment_page_name, k_comment_template_name.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/comments.html'
#CONCAT
  "<cms:concat 'Hello ' first_name ' ' last_name '! We welcome you!' />":
    'prefix':'concat'
    'body':"concat $1 $2 />"
    'description':"""
      The Concat tag is a utility tag that can be used to concatenate several values together into a single variable.

      For example, suppose we have two variables 'first_name' and 'last_name'.

        <cms:set first_name = 'John' />
        <cms:set last_name = 'Doe' />

      To set a variable, 'welcome_message' to 'Hello John Doe! We welcome you!', using both the variables, we can do either this -

        <cms:set welcome_message="Hello <cms:show first_name/> <cms:show last_name/>! We welcome you!" />

      or use concat as follows -

        <cms:set welcome_message="<cms:concat 'Hello ' first_name ' ' last_name '! We welcome you!' />" />

      Here we supply concat with all parts of the string as unnamed parameters separated by spaces (i.e. 'Hello ', first_name, ' ', last_name, and '! We welcome you!' with space between each as separator) and concat simply returns back the concatenated string.

      If many values are supplied to concat, the code sometimes becomes a little difficult to comprehend (as might be the case in the snippet above) because the only demarcation between the parameters is the space.

      In such cases, we can try naming the parameters (any arbitrary names can be used). Thus the above snippet could be written as -

        <cms:set welcome_message="<cms:concat p1='Hello ' p2=first_name p3=' ' p4=last_name p5='! We welcome you!' />" />

      Hopefully that should make the snippet more legible.

      One benefit of concat over the first method is that it avoids using '<cms:show />' with all variables used within the string.

      Another is that we can use '\n' and '\t' for inserting newline and tab characters in the string. For example -

        <cms:set msg = "<cms:concat 'item_name: ' pp_item_name
        '\n' 'item_number: ' pp_item_number
        '\n' 'quantity: ' pp_quantity />" />

      In the snippet above, 'msg' variable is being set in response to a successful PayPal transaction and will then be emailed.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/concat.html'
#CONTENT Type
  "<cms:content_type 'text/xml' />":
    'prefix':'content_type'
    'body':"content_type '${1:text/xml}' />"
    'description':"""
      <cms:content_type 'text/xml | text/plain | text/css | image/gif | application/pdf | application/zip' />

      The content_type tag can be used to make the web server send back the contents with the desired Content-Type in the HTTP header.
      By default every web page is send back as 'text/html'.

      As an example, the RSS feed requires it content type to be set as 'text/xml' for the browsers to properly recognize the feed. The following snippet does the job -

        <cms:content_type 'text/xml' />

      Parameters: value.

      value - The desired content type. Some example values are 'text/xml', 'text/plain', 'text/css', 'image/gif', 'application/pdf' and 'application/zip'.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/content_type.html'
#DATE
  "<cms:date k_page_date format='jS M, Y' />":
    'prefix':'date'
    'body':"date $1 format='${2:F j Y}' /> "
    'description':"""
      <cms:date k_page_date format='jS M, Y' />

      The date tag outputs a string according to the given format parameter using the given date parameter. If no date provided, the current time is used.

      Parameters: date, format, gmt, locale, charset.

      date - The date to be formated.
      This parameter is expected to be in 'Y-m-d H:i:s' format (e.g. 2010-05-30 21:35:54). All date related variables set by Couch tags, e.g. k_page_date etc., are in this format.

      format - The date tag supports two different types of format characters - locale-aware and non locale-aware.
      With locale-aware characters, you can specify that the date is to formatted according to, for example, french locale or italian locale by setting the locale parameter.
      The locale-aware characters all have a % sign prefixed to them.

      The locale-aware and the non locale-aware characters cannot be intermixed.

      Non Locale-aware format characters

        Format character 	 Description 	 Example returned values
        Day 	--- 	---
          d 	Day of the month, 2 digits with leading zeros 	01 to 31
          D 	A textual representation of a day, three letters 	Mon through Sun
          j 	Day of the month without leading zeros 	1 to 31
          l (lowercase 'L') 	A full textual representation of the day of the week 	Sunday through Saturday
          S 	English ordinal suffix for the day of the month, 2 characters 	st, nd, rd or th. Works well with j
          w 	Numeric representation of the day of the week 	0 (for Sunday) through 6 (for Saturday)
          z 	The day of the year (starting from 0) 	0 through 365
        Week 	--- 	---
          W 	ISO-8601 week number of year, weeks starting on Monday 	Example: 42 (the 42nd week in the year)
        Month 	--- 	---
          F 	A full textual representation of a month, such as January or March 	January through December
          m 	Numeric representation of a month, with leading zeros 	01 through 12
          M 	A short textual representation of a month, three letters 	Jan through Dec
          n 	Numeric representation of a month, without leading zeros 	1 through 12
          t 	Number of days in the given month 	28 through 31
        Year 	--- 	---
          L 	Whether it's a leap year 	1 if it is a leap year, 0 otherwise.
          Y 	A full numeric representation of a year, 4 digits 	Examples: 1999 or 2003
          y 	A two digit representation of a year 	Examples: 99 or 03
        Time 	--- 	---
          a 	Lowercase Ante meridiem and Post meridiem 	am or pm
          A 	Uppercase Ante meridiem and Post meridiem 	AM or PM
          B 	Swatch Internet time 	000 through 999
          g 	12-hour format of an hour without leading zeros 	1 through 12
          G 	24-hour format of an hour without leading zeros 	0 through 23
          h 	12-hour format of an hour with leading zeros 	01 through 12
          H 	24-hour format of an hour with leading zeros 	00 through 23
          i 	Minutes with leading zeros 	00 to 59
          s 	Seconds, with leading zeros 	00 through 59
        Timezone 	--- 	---
          I (capital 'i') 	Whether or not the date is in daylight saving time 	1 if Daylight Saving Time, 0 otherwise.
          O 	Difference to Greenwich time (GMT) in hours 	Example: +0200
          T 	Timezone abbreviation 	Examples: EST, MDT…
          Z 	Timezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive. 	-43200 through 50400
        Full Date/Time 	--- 	---
          r 	» RFC 2822 formatted date 	Example: Thu, 21 Dec 2000 16:01:07 +0200
          U 	Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)


      Locale-aware format characters


        Format Character 	Description 	Example returned values
        Day 	--- 	---
          %a 	An abbreviated textual representation of the day 	Sun through Sat
          %A 	A full textual representation of the day 	Sunday through Saturday
          %d 	Two-digit day of the month (with leading zeros) 	01 to 31
          %e 	Day of the month, with a space preceding single digits. Not implemented as described on Windows. See below for more information. 	1 to 31
          %j 	Day of the year, 3 digits with leading zeros 	001 to 366
          %u 	ISO-8601 numeric representation of the day of the week 	1 (for Monday) though 7 (for Sunday)
          %w 	Numeric representation of the day of the week 	0 (for Sunday) through 6 (for Saturday)
        Week 	--- 	---
          %U 	Week number of the given year, starting with the first Sunday as the first week 	13 (for the 13th full week of the year)
          %V 	ISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays, with Monday being the start of the week 	01 through 53 (where 53 accounts for an overlapping week)
          %W 	A numeric representation of the week of the year, starting with the first Monday as the first week 	46 (for the 46th week of the year beginning with a Monday)
        Month 	--- 	---
          %b 	Abbreviated month name, based on the locale 	Jan through Dec
          %B 	Full month name, based on the locale 	January through December
          %h 	Abbreviated month name, based on the locale (an alias of %b) 	Jan through Dec
          %m 	Two digit representation of the month 	01 (for January) through 12 (for December)
        Year 	--- 	---
          %C 	Two digit representation of the century (year divided by 100, truncated to an integer) 	19 for the 20th Century
          %g 	Two digit representation of the year going by ISO-8601:1988 standards (see %V) 	Example: 09 for the week of January 6, 2009
          %G 	The full four-digit version of %g 	Example: 2008 for the week of January 3, 2009
          %y 	Two digit representation of the year 	Example: 09 for 2009, 79 for 1979
          %Y 	Four digit representation for the year 	Example: 2038
        Time 	--- 	---
          %H 	Two digit representation of the hour in 24-hour format 	00 through 23
          %I 	Two digit representation of the hour in 12-hour format 	01 through 12
          %l (lower-case 'L') 	Hour in 12-hour format, with a space preceeding single digits 	1 through 12
          %M 	Two digit representation of the minute 	00 through 59
          %p 	UPPER-CASE 'AM' or 'PM' based on the given time 	Example: AM for 00:31, PM for 22:23
          %P 	lower-case 'am' or 'pm' based on the given time 	Example: am for 00:31, pm for 22:23
          %r 	Same as "%I:%M:%S %p" 	Example: 09:34:17 PM for 21:34:17
          %R 	Same as "%H:%M" 	Example: 00:35 for 12:35 AM, 16:44 for 4:44 PM
          %S 	Two digit representation of the second 	00 through 59
          %T 	Same as "%H:%M:%S" 	Example: 21:34:17 for 09:34:17 PM
          %X 	Preferred time representation based on locale, without the date 	Example: 03:59:16 or 15:59:16
          %z 	Either the time zone offset from UTC or the abbreviation (depends on operating system) 	Example: -0500 or EST for Eastern Time
          %Z 	The time zone offset/abbreviation option NOT given by %z (depends on operating system) 	Example: -0500 or EST for Eastern Time
        Time and Date Stamps 	--- 	---
          %c 	Preferred date and time stamp based on local 	Example: Tue Feb 5 00:45:10 2009 for February 4, 2009 at 12:45:10 AM
          %D 	Same as "%m/%d/%y" 	Example: 02/05/09 for February 5, 2009
          %F 	Same as "%Y-%m-%d" (commonly used in database datestamps) 	Example: 2009-02-05 for February 5, 2009
          %s 	Unix Epoch Time timestamp 	Example: 305815200 for September 10, 1979 08:40:00 AM
          %x 	Preferred date representation based on locale, without the time 	Example: 02/05/09 for February 5, 2009
        Miscellaneous 	--- 	---
          %n 	A newline character ("\n") 	---
          %t 	A Tab character ("\t") 	---
          %% 	A literal percentage character ("%") 	---

      gmt - By setting this parameter to '1', you can get the GMT equivalent of the date provided.

      locale - If you use the locale-aware format characters mentioned above, this parameter can be set to the locale desired for formatting the provided date.
        <cms:date k_page_date format='%B %d, %Y' locale='french' />
        <cms:date k_page_date format='%B %d, %Y' locale='italian' />

      This feature depends entirely on the indicated locale being available at your web server. If the locale is not available, the default 'english' locale is used.

      charset - Some locales do not provide their output in UTF8 character set. This causes strange ?? characters to appear in the output.
      The date tag can help converting the output to UTF8 if you can provide it with information about the charset used by the locale.
      For example -

        <cms:date k_page_date format='%B %d, %Y' locale='greek' charset='ISO-8859-7' />

        <cms:date k_page_date format='%B %d, %Y' locale='russian' charset='ISO-8859-5' />

      The following is a rough list of the charset used by different languages -

      ISO-8859-1 - Latin 1
        Western Europe and Americas: Afrikaans, Basque, Catalan, Danish, Dutch, English, Faeroese, Finnish, French, Galician, German, Icelandic, Irish, Italian, Norwegian, Portuguese, Spanish and Swedish.

      ISO-8859-2 - Latin 2
        Latin-written Slavic and Central European languages: Czech, German, Hungarian, Polish, Romanian, Croatian, Slovak, Slovene.

      ISO-8859-3 - Latin 3
        Esperanto, Galician, Maltese, and Turkish.

      ISO-8859-4 - Latin 4
        Scandinavia/Baltic (mostly covered by 8859-1 also): Estonian, Latvian, and Lithuanian. It is an incomplete predecessor of Latin 6.

      ISO-8859-5 - Cyrillic
        Bulgarian, Byelorussian, Macedonian, Russian, Serbian and Ukrainian.

      ISO-8859-6 - Arabic
        Non-accented Arabic.

      ISO-8859-7 - Modern Greek
        Greek.

      ISO-8859-8 - Hebrew
        Non-accented Hebrew.

      ISO-8859-9 - Latin 5
        Same as 8859-1 except for Turkish instead of Icelandic

      ISO-8859-10 - Latin 6
        Latin6, for Lappish/Nordic/Eskimo languages: Adds the last Inuit (Greenlandic) and Sami (Lappish) letters that were missing in Latin 4 to cover the entire Nordic area.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/date.html'
#DAYS
  "<cms:days ><td ><cms:show k_day /></td></cms:days>":
    'prefix':'days'
    'body':"""
      days >
        ${1:<td><cms:show k_day /></td>}
      </cms:days>
    """
    'description':"""
      <cms:days >
        ${1:<td><cms:show k_day /></td>}
      </cms:days>

      The days tag works only within the weeks tag and enumerates all the seven days of each week.

      Parameters: pad_with_zeroes.

      pad_with_zeroes - If set to '1' will pad all single digit days in variable k_day with a leading zero.

      Variables: k_date, k_day, k_month, k_year, k_day_of_week, k_position,  k_count_entries, k_timeline_position.

      k_date - Date of the day. e.g. 2010-10-31

      k_day - Number representing the day - ranges from 1 to 31

      k_month - Number representing the month - ranges from 1 - 12

      k_year - The year. e.g. 2010

      k_day_of_week - Number representing the week - ranges from 0 (Sun) to 6 (Sat)

      k_position - A calendar grid can contain days that belong to the month being shown as well as the previous and the next month. Depending on which month a day belongs to, its position is denoted by this parameter as one of these three values -
        previous_month
        current_month
        next_month

      k_count_entries - The count of pages published on this day.

      k_timeline_position - Denotes the position of the day in timelime (relative to today). Can be one of these three values -
        past
        present
        future
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/days.html'
#decr
  "<cms:decr my_value '2' />":
    'prefix':'decr'
    'body':"decr $1 '$2' />"
    'description':"""
      <cms:decr my_value '2' />
      The decr tag accepts as its first parameter a variable and decreases the value contained within the variable by the value contained within the second optional parameter. If the second parameter is not provided, a value of 1 is assumed.

        <cms:set my_value='11' />
        <cms:show my_value />

      In the snippet above, value of variable my_value is output as 11.

        <cms:decr my_value '2' />
        <cms:show my_value />

      The value of variable my_value now becomes 9.

        <cms:decr my_value />
        <cms:show my_value />

      The value of variable my_value now becomes 8.

      Parameters: Expects a maximum of two parameters.

      The first parameter has to be a variable. The second parameter is optional and its value is used to decrease the value of the variable passed as the first parameter. A default value of 1 is assumed if the second parameter is not specified.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/decr.html'
#DELETE COOKIE
  "<cms:delete_cookie 'my_test_cookie' />":
    'prefix':'delete_cookie'
    'body':"delete_cookie '$1' />"
    'description':"""
      <cms:delete_cookie 'my_test_cookie' />

      The delete_cookie tag can be used to delete any cookie created using the set_cookie tag.

      The snippet above will delete the cookie named 'my_test_cookie'.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/delete_cookie.html'
#DIV
  "<cms:div my_count '5' />":
    'prefix':'couchdiv'
    'body':"div $1 '$2' />"
    'description':"""
      <cms:div my_count '5' />

      The div tag accepts two parameters and returns as its output the value obtained after dividing the first parameter by the second parameter.
      The parameters may be literal strings, variables or output of other tags.

      The snippet divides by 5 whatever value is contained within my_count variable and outputs the resulting value.

      Parameters: The tag expects two parameters as the operands for division.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/div.html'
#DROPDOWNFOLDERS
  "<cms:dropdownfolders masterpage='news.php' />":
    'prefix':'dropdownfolders'
    'body':"dropdownfolders masterpage='$1' hierarchical='${2:1}' depth='${3:0}' />"
    'description':"""
      <cms:dropdownfolders masterpage='news.php' />

      The dropdownfolders tag can be used to create a quick-n-dirty HTML dropdown list of the folders belonging to a template.

      Parameters: masterpage, root, childof, hierarchical, depth, orderby, order, exclude, extended_info, show_count.

      masterpage - This parameter can be used to specify the template the folders of which are to be enumerated. If skipped, the template this tag is being used from is used.

      root - Only a sub-section of the folders tree can be enumerated by specifying a folder as this parameter. The folder specified as the root is returned along with all its children.

      childof - Only a sub-section of the folders tree can be enumerated by specifying a folder as this parameter. Only the children of the specified folder are returned.

      hierarchical - By setting this parameter the folders tag can be made to enumerate the folders in their hierarchical order. If skipped, the folders are enumerated in the alphabetical order of their names.

      depth - This parameter can be set to specify the maximum level in hierarchy (i.e. depth) that will be reached during enumeration. This can be used, for example, to list only the top folders in the tree by setting the depth to 1. A depth of 0 means unlimited depth.

      orderby - This parameter can be set to order the enumerated folders according to the following- name, title, id, count or weight. If skipped, name is used as default.

      order - Can be set to specify whether the enumerated folders are ordered in the ascending order or in descending order. Valid values are asc and desc. Default is asc.

      exclude - Folders can be excluded from being enumerated by specifying them with this parameter. If an excluded folder has children, they are excluded too. If multiple folders are to be excluded, separate them with comma.

      show_count - Show count of pages within folder.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/dropdownfolders.html'
#DUMP
  "<cms:dump />":
    'prefix':'dump'
    'body':"dump />"
    'description':"""
      The dump tag is used to output all variables (system or otherwise) that are present in the immediate context of the location it is invoked from.

      As an example, the following snippet is using the pages tag nested within the folders tag to create a list of all folders and a list of pages that are present within each folder -

        <cms:folders masterpage='news.php'  hierarchical='1'>
          <H3><cms:show k_folder_title /></H3>
          <cms:if k_folder_pagecount >
            <UL>
              <cms:pages masterpage="news.php" folder=k_folder_name include_subfolders='0'>
                <LI><a href="<cms:show k_page_link />"><cms:show k_page_title /></a></LI>
              </cms:pages>
            </UL>
          </cms:if>
        </cms:folders>

      If we place three dump tags at the following locations -

        <cms:dump />
        <cms:folders masterpage='news.php' hierarchical='1'>
          <H3><cms:show k_folder_title /></H3>
          <cms:dump />
          <cms:if k_folder_pagecount >
            <UL>
              <cms:pages masterpage="news.php" folder=k_folder_name include_subfolders='0'>
                <cms:dump />
                <LI><a href="<cms:show k_page_link />"><cms:show k_page_title /></a></LI>
              </cms:pages>
            </UL>
          </cms:if>
        </cms:folders>

      - the first dump tag will output global variables (said to be in the root context) set for the executing page by Couch, the second dump tag will output variables set for each iteration by the folders tag while the third tag will output variables that are set by the pages tag.

      Compare this with the dump_all tag that will output variables belonging to all the contexts that are a part of the hierarchy leading to the current location. Thus for the same example using dump_all. instead of dump, the first tag would have output global variables belonging to the root context, the second tag would have output variables of the root context followed by the variables set for the current iteration by the folders tag and finally the third tag would have output the global variables, the variables set by folders followed by the variables set for the iteration by the pages tag.

      Since, unless specified otherwise, when we use a variable anywhere (e.g. with show tag), Couch looks up through the tags hierarchy starting from the tag within the context of which the variable was used, dump_all is a very useful tag to visually confirm if the variable is actually set and available anywhere in the hierarachy.

      The dump tag is very useful to quickly see which variables (along with their current values) are set by a particular tag.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/dump.html'
#DUMP ALL
  "<cms:dump_all />":
    'prefix':'dump_all'
    'body':':dump_all />'
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/dump_all.html'
#EACH
  "<cms:each msg sep='|' ><cms:show item /><br></cms:each>":
    'prefix':'each'
    'body':"each $1 as='$2' sep='$3'>$4</cms:each>"
    'description':"""
      <cms:each msg >..</cms:each>

      The Each tag, given a string containing values separated by a known separator, splits it up along the separator and returns each value.
      For example, assume we have a variable 'msg' -

        <cms:set msg='hello|world|how|do|you|do' />

      Passing variable 'msg' as parameter to each like this -

        <cms:each msg sep='|' >
          <cms:show item /><br>
        </cms:each>

      will make available each of the '|' separated words as variable named 'item' (which is then being displayed using show tag).

        hello
        world
        how
        do
        you
        do

      The above example could have been written without specifying 'sep', because the default separator is '|'.

      One real world scenario for using each is while handling submission of forms containing multiple checkboxes. If more than one checkbox is selected, the checkbox variable contains a '|' separated string with values for each selected checkbox.

      Parameters: var, as, sep.

      var - The string to split. If passed as the first parameter, the name 'var' can be omitted and only the value passed. e.g.

        <cms:each var=msg >..</cms:each>

        <cms:each msg >..</cms:each>

      both of the above are same.

      as - Name of the variable as which each of the values obtained after splitting the string will be made available.
      By default, the variable is named 'item'.
      If you wish to use some other name, it can be specified thus -

        <cms:each msg as='my_var' >
            <cms:show my_var/><br>
        </cms:each>

      sep - The separator along which the provided string is split.
      By default, the pipe character '|' is assumed as the separator.
      If any other character is being used in the string, it can be specified this way -

        <cms:each msg sep='@' >..</cms:each>

      Variables: item.

      item - This is the default variable that contains the value obtained.
      If any other variable is specified using the as parameter, as explained in parameters, then this variable will not be set.
      The specified variable will be set instead.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/each.html'
#ELSE
  "<cms:else />":
    'prefix':'else'
    'body':':else />'
    'description':"""
      <cms:else />

      The Else tag always occurs within an If tag block.
      Often you'd want to execute a certain set of statements when a given condition is met and a different set when the condition is not met.
      Else provides this capability by extending the If tag. It does so by delimiting statements that will be executed when the condition given to the if does not evaluate to true.

      For example -

        <cms:if my_var == 'hello' >
          <h3> Hello </h3>
        <cms:else />
          <h3> Don't know what it is </h3>
        </cms:if>

      In the snippet above, if variable 'my_var' contains 'hello', all the statements within the if tag block upto the else tag will be executed. In case 'my_var' contains any other value, all the statements within the if tag block starting from the else tag upto the end tag of if, will be executed. (In our example there are only single statements for both conditions but there can be any number of them).

      Notice that the else tag is a self closing tag.

      In cases where there are more than two outcomes of the condition, the else block can be made to contain another nested if block -

      For example, here is a snippet that shows the stage of life by evaluating the variable 'age'.

        <cms:if age lt '1' >
          <h3>Infant</h3>
        <cms:else />
          <cms:if (age ge '1') && (age lt '3') >
            <h3>Toddler</h3>
          <cms:else />
            <cms:if (age ge '3') && (age lt '5') >
              <h3>Preschooler</h3>
            <cms:else />
              <cms:if (age ge '5') && (age lt '11') >
                <h3>School Age</h3>
              <cms:else />
                <cms:if (age ge '11') && (age lt '13') >
                  <h3>Preteen or Tween</h3>
                <cms:else />
                  <cms:if (age ge '13') && (age lt '20') >
                    <h3>Teen</h3>
                  <cms:else />
                    <h3>Adult</h3>
                  </cms:if>
                </cms:if>
              </cms:if>
            </cms:if>
          </cms:if>
        </cms:if>
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/else.html'
#EMBED
  "<cms:embed 'file.html' />":
    'prefix':'embed'
    'body':"embed ${1:'$2'} />$3"
    'description':"""
      <cms:embed 'file.html' />

      The Embed tag can be used to divide your templates into manageable chunks.

      Parts of the templates that are reused at several places can be placed in discrete files and the files then embedded via this tag.
      e.g. most of the templates share the same header code. This can be cut and pasted into a file named 'header.inc' (the extension does not matter - it can be anything) and the file then saved into 'couch/snippets' folder.

      The following code then can be placed where the original code was -

        <cms:embed 'header.inc' />

      This will result in exactly the same output as with the original code in place.
      The advantage of using embedding is that if the code snippet is used in several templates, any future modifications will now need to be done only in a single file.

      Embed tag, when looking for the embedded file, searches along a path relative to the 'couch/snippets' folder. Thus in the example above, the 'header.inc' file should reside directly in 'snippets' folder for Couch to find it. Had the passed parameter been 'common/header.inc', Couch would have looked for the file within a sub-folder named 'common' within 'couch/snippets'. Similarly if the parameter passed was '../../common/header.inc', Couch would have gone up in the folder hierarchy twice (first time landing in the 'couch' folder and next time in the folder where your website resides) and then looked for the embedded file within a subfolder named 'common'.

      UPDATE: From version 1.1.1, the base path relative to which Couch searches for embedded files can be changed from the default 'couch/snippets' folder to any folder relatve to your main site. This can be done by setting the 12b. K_SNIPPETS_DIR configuration item within your config.php file.
      This is convenient when you choose to use a subfolder within your main site to store embedded snippets instead of storing them within 'couch/snippets' folder. For example if K_SNIPPETS_DIR is set to 'common', <cms:embed 'header.inc' /> will now cause Couch to look for 'header.inc' within the 'common' subfolder that resides in the root folder of your website.

      IMP. If you choose to place your snippets in any folder other than the default 'couch/snippets' folder or any of its subfolders, do take care to prevent the snippets from being directly downloadable. 'couch/snippets' folder is protected from this problem by a .htaccess file present within it. You can copy this file into your folder to disallow everybody from directly accessing your snippets.

      IMP. If the code snippet you choose to place in a separate embeddable file contains Couch tags (i.e. those that begin with <cms:), take care not to truncate any tag block. That is, always make sure that every opening tag also has the associated end tag included within the embedded snippet. Embedding partial tags will cause the parser to emit parse errors.

      To illustrate the concept of embedding we use an ultra-trivial example here. In real life scenarios, the embedded snippets may be of any complexity. Suppose we have this piece of code somewhere in a template

        <div class="right">
            <b class="title"><cms:show 'Hello World' /></b>
        </div>

      This does nothing except display 'Hello world'. We now cut and paste the bold part into a file named, say, 'greeting.inc' and save the file into 'couch/snippets' folder. The above code is modified thus -

        <div class="right">
            <cms:embed 'greeting.inc' />
        </div>

      and upon executing the page we get the same output as before.

      Embedded snippets can themselves contain other embedded snippets. Thus to stretch our, already contrived, example a little further, open the 'greeting.inc' file, remove the 'Hello world' part and save it into a separate file named 'message.inc'. Embed the new file within 'greeting.inc' thus -

        <b class="title"><cms:show "<cms:embed 'message.inc' />" /></b>

      Notice the use of double quotes. Executing the template results in the same output as having the entire string right there within the template instead of embedding it in two separate files (original template embeds 'greeting.inc' which in turn embeds 'message.inc').

      WARNING: Make sure that none of the children embedded files embeds back a parent file. This will lead to recursion and an infinite loop.
      Passing code directly

      Instead of using a physical file, Embed tag can be passed code directly to include (see parameters section below).
      For example, in the template code mentioned above, we can use

        <div class="right">
            <cms:set my_var="<b class='title'><cms:show 'Hello world' /></b>" />
            <cms:embed code=my_var />
        </div>

      Per se, this does not seem to be of much use, but this ability of embed tag to execute code contained within a variable can be a very powerful thing if that variable happens to be a custom field (i.e. an editable area defined by you within a template).
      Clearly we can now store snippets or even complete templates as editable regions that can be tweaked within the browser itself instead of manipulating a physical file and FTP'ing it back to the server.

      Make sure that the type of the editable region is textarea and that its no_xss_check parameter is set to '1' (this will prevent Couch from mangling up the < and > tags the way it usually does to stop XSS attacks).

      Parameters: unnamed or code.

      If the first parameter is unnamed (i.e. only the value is passed) or it is anything other than 'code', it is considered to be a path to an embedded file. The path is always relative to the 'couch/snippets' folder. e.g.

        <cms:embed 'message.inc' />

      However if the parameter is named 'code', the value is considered to be a valid code snippet and is executed thus.
      For example -

        <cms:embed code="<b class='title'><cms:show 'Hello world' /></b>" />

      or

        <cms:set my_var="<b class='title'><cms:show 'Hello world' /></b>" />
        <cms:embed code=my_var />

    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/embed.html'
#ENTRIES
  "<cms:excerpt count='100' truncate_chars='1'>...blah blah...</cms:excerpt>":
    'prefix':'excerpt'
    'body':"excerpt count='$1' truncate_chars='$2'>$3"
    'description':"""
      The excerpt tag can be used to create an excerpt of any content that is enclosed within its opening and closing tags.
      Unlike the excerptHTML tag, the excerpt tag strips off all HTML tags (except those specified by its allow parameter) from the excerpt it creates.

      Parameters: count, allow, trail, truncate_chars.

      count - The maximum number of words/characters that the excerpt can contain. The default value is 50.
      By default, this parameter is applied to the number of words in the excerpt.
      By setting the 'truncate_chars' parameter (see below) to '1', it can be made to apply to the number of characters in the excerpt instead.

      allow - The HTML elements you wish to preserve in the excerpt.
      If you wish to preserve multiple tags, separate the tagnames by using comma e.g.

        allow='i, b'

      trail - By default the produced excerpt is appended with '...' (three ellipses). You can change this by using this parameter.
      truncate_chars

      By default, the 'count' paramater is considered to be the number of words the excerpt can contain.
      By setting the 'truncate_chars' to '1', the 'count' becomes the number of characters the excerpt can contain.

        <cms:excerpt count='100' truncate_chars='1'>...blah blah...</cms:excerpt>

      Please note that if 'truncate_chars' is set to '1', the 'allow' parameter is ignored and all the HTML tags are stripped off the input.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/excerpt.html'
#EXCERPT HTML
  "<cms:excerptHTML count='130' ignore='img'>":
    'prefix':'excerptHTML'
    'body':"""
      exerptHTML count='${1:130}' ignore='${2:img, table}' trail="${3:<a href=\"$4\">Read more</a>}">
        ${5:<cms:show $6 />}
      </cms:excerptHTML>
      $7
    """
    'description':"""
      <cms:excerptHTML><cms:show content /></cms:excerptHTML>

      <cms:excerptHTML count='130' ignore='img'>
        <cms:show content />
      </cms:excerptHTML>

      The excerptHTML tag can be used to create an excerpt of any HTML content that is enclosed within its opening and closing tags.
      Unlike the excerpt tag, excerptHTML preserves the HTML formatting of the truncated contents (except for the HTML tags specified in its ignore parameter).

      he snippets are outputting an excerpt of the value contained within the content variable.

      Parameters: count, ignore, trail.

      count - The maximum number of words that the excerpt can contain. The default value is 50 words.
      ignore

      ignore - The HTML elements to weed out of the excerpt. For example, you might not want to have any images in the excerpt.
      If you wish to ignore multiple tags, separate the tagnames by using comma e.g.

        ignore='img, table'

      trail - By default the produced excerpt is appended with '...' (three ellipses). You can change this by using this parameter.

        <cms:excerptHTML trail="&nbsp;(<a href=\"<cms:show k_page_link />\">read more..</a>)"><cms:show blog_content /></cms:excerptHTML>

      The snippet above will append a 'read more..' link leading to the page-view of the item being shown in excerpted form.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/excerpthtml.html'
#EXISTS
  "<cms:exists 'contact.inc' />":
    'prefix':'exists'
    'body':':exists $1 />$2'
    'description':"""
      <cms:exists "pagename_located_relative_to_snippets.html" />

      The Exists tag can be used to confirm the presence of a file or a folder on the server.
      It returns '1' if the object file/folder exists. Otherwise it returns a '0'.
      For example -

        <cms:exists "contact.inc" />

      will output either '1' or '0' depending on whether the file 'contact.inc' is present or not within the 'couch/snippets' folder.

      Exactly like the embed tag, the exists tag considers the file/folder provided to be relative to the 'couch/snippets' folder.
      For example

        <cms:exists "common/contact.inc" />

      will look for 'contact.inc' file within a folder named 'common' that resides within the 'couch/snippets' folder. Whereas

        <cms:exists "../../common/contact.inc" />

      will move up through the folder hierarchy (the first '../' will move into the 'couch' folder while the next '../' will move into the website folder within which 'couch' folder resides) and search for the file within a folder named 'common' residing in the main website folder.

      Combined with the If tag and Embed tag, the Exists tag provides a very powerful method of choosing the right template to display while showing a particular page.
      For example, let us say we have a template 'index.php' that is clonable and several pages have been made out of it - e.g. 'about-us', 'services', 'contact-us' etc.. The template has defined one editable richtext area named 'my_content' and, as usual, every page has its own data in this area. The code within this template to display the data for each cloned page might go somewhat like this

        <cms:if k_is_page >
           <cms:show my_content />
        </cms:if>

      This is perfect for all pages but for 'contact-us', we do not want to display 'my_content'. We wish to display a form (created by using Form tag). One way to do this would be to make 'contact-us' a separate template in itself. However a better method would be to check in the code snippet above whether the page being displayed is 'contact-us' or not and if it is, instead of displaying the usual 'my_content', display the form instead.
      Let us say we have saved the code for the form in a snippet called 'contact-us.inc' within 'couch/snippets' folder. The modified code will be -

        <cms:if k_is_page >
           <cms:if k_page_name=='contact-us' >
              <cms:embed 'contact-us.inc' />
           <cms:else />
               <cms:show my_content />
           </cms:if>
        </cms:if>

      This will do the trick.
      However, suppose there is one other page, 'testimonials', where we wish to use the Pages tag to iterate through and display excerpts from pages created through some other template (or any other logic). Once again, instead of creating a separate template, we decide to check for 'testimonials' page and execute some different code. We'll assume that the code for this page has been saved in a snippet named 'testimonials.inc' within snippets folder.
      The code above can be modified to fit in the new condition -

        <cms:if k_is_page >
           <cms:if k_page_name=='contact-us' >
              <cms:embed 'contact-us.inc' />
           <cms:else />
                <cms:if k_page_name=='testimonials' >
                    <cms:embed 'testimonials.inc' />
                <cms:else />
                    <cms:show my_content />
                </cms:if>
           </cms:if>
        </cms:if>

      This works but it is now becoming painfully evident that this technique is crumbling under its own weight and the addition of few more pages will make it too complex to handle.

      Employing Exists tag for the above task makes it a snap. Here is how -

        <cms:if k_is_page >
            <cms:if "<cms:exists "<cms:show k_page_name/>.inc" />" >
                <cms:embed "<cms:show k_page_name/>.inc" />
            <cms:else />
                <cms:show my_content />
            </cms:if>
        </cms:if>

      Notice how we are checking for the existence of a snippet that is named the same as the page being displayed (but with a '.inc' appended).
      If such a file exists, it gets embedded, else the usual logic is folllowed.
      The beauty of this method is that if you decide to add more pages that will require custom logic, you simply have to place the code in a snippet named the same as the page (and a '.inc' extension) and put the snippet in the 'couch/snippets' folder.
      You'll never need to modify the code given above.
      Parameters

          unnamed

      Takes one unnamed parameter (only the value is required).
      It is considered to be a path to a file or folder. The path is always relative to the 'couch/snippets' folder.
      See above for a discussion on relative path.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/exists.html'
#FIELDSET
  "<cms:fieldset>content</cms:fieldset>":
    'prefix':'fieldset'
    'body':"""
      fieldset label='$1'>
        $2
      </cms:fieldset>
      $3
    """
    'description':"""
      <cms:fieldset>
          <cms:input type="text" size="10" maxlength="40" name="name" required='1' />
          <cms:input type="password" size="10" maxlength="10" name="password" />
      </cms:fieldset>

      - will output the following HTML code -

      <fieldset>
          <dl>
              <dt><label for="name">name <span class="k_fielderror">*</span> </label></dt>
              <dd><input type="text" maxlength="40" size="10" value="aa" id="name" name="name"/></dd>

              <dt><label for="password">password </label></dt>
              <dd><input type="password" maxlength="10" size="10" value="" id="password" name="password"/></dd>
          </dl>
      </fieldset>

      For input tags that are wrapped within fieldset tags, you can set the label and desc parameters to properly label the fields.

      Parameters:label.

      label - The label to be applied to the fieldset.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/fieldset.html'
#FOLDER
  "<cms:folder name='world' title='World News'></cms:folder>":
    'prefix':'folderparent'
    'body':"""
      folder name='$1' title='$2' desc='$3' weight='$4'>
        $5
      </cms:folder>
    """
    'description':"""
      <cms:folder name='name' title='displayed' desc='description' weight='order'>
        children Folders
      </cms:folder>

      The folder tag is used to create virtual folders for a template. The folder tags support nesting within each other thus allowing the creation of an hierarchy of virtual folders.

      Parameters name, title, desc, weight.

      name - The mandatory name of the folder. Has to be unique for the template.
      Only lowercase[a-z], numerals[0-9] hyphen and underscore permitted

      title - The more user friendly displayable title. Can be duplicate unlike name.

      desc - Description.

      weight - A folder can be given a number as its weight. This parameter then can be used to list the folders in any desired order while enumerating them using Couch folders tag. The bigger the number (the heavier the weight), the lower down a folder appears in the sort order. Default weight is 0. You can specify a negative number to make a folder appear higher up.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/folder.html'
#FOLDERChiLD
  "<cms:folder name='world' title='World News' />":
    'prefix':'folderchild'
    'body':"folder name='$1' title='$2' desc='$3' weight='$4' />"
    'description':"""
      parent folder wrapper
        <cms:folder name='name' title='displayed' desc='description' weight='order' />
      end parent folder wrapper

      The folder tag is used to create virtual folders for a template. The folder tags support nesting within each other thus allowing the creation of an hierarchy of virtual folders.

      Parameters name, title, desc, weight.

      name - The mandatory name of the folder. Has to be unique for the template.
      Only lowercase[a-z], numerals[0-9] hyphen and underscore permitted

      title - The more user friendly displayable title. Can be duplicate unlike name.

      desc - Description.

      weight - A folder can be given a number as its weight. This parameter then can be used to list the folders in any desired order while enumerating them using Couch folders tag. The bigger the number (the heavier the weight), the lower down a folder appears in the sort order. Default weight is 0. You can specify a negative number to make a folder appear higher up.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/folder.html'
#FOLDERS
  "<cms:folders masterpage='news.php'><cms:show k_folder_title /> <br></cms:folders>":
    'prefix':'folders'
    'body':"""
      folders masterpage='$1' ${2:root='$3'} ${4:childof='$5'} hierarchical='${6:1}' depth='${7:0}' ${8:orderby='$9'} ${10:order='${11:asc}'} ${12:exclude='$13'} ${14:extended_info='${15:1}'}>
        ${16:<cms:show k_folder_title /> <br>}
      </cms:folders>
      $17
    """
    'description':"""
      <cms:folders masterpage='news.php'>
        <cms:show k_folder_title />
        <br>
      </cms:folders>

      The folders tag can be used to enumerate the virtual folders that have been defined for a template.

      Parameters: masterpage, root, childof, hierarchical, depth, orderby, order, exclude, extended_info.

      masterpage - This parameter can be used to specify the template the folders of which are to be enumerated. If skipped, the template this tag is being used from is used.

      root - Only a sub-section of the folders tree can be enumerated by specifying a folder as this parameter. The folder specified as the root is returned along with all its children.

      childof - Only a sub-section of the folders tree can be enumerated by specifying a folder as this parameter. Only the children of the specified folder are returned.

      hierarchical - By setting this parameter the folders tag can be made to enumerate the folders in their hierarchical order. If skipped, the folders are enumerated in the alphabetical order of their names.

      depth - This parameter can be set to specify the maximum level in hierarchy (i.e. depth) that will be reached during enumeration. This can be used, for example, to list only the top folders in the tree by setting the depth to 1. A depth of 0 means unlimited depth.

      orderby - This parameter can be set to order the enumerated folders according to the following- name, title, id, count or weight. If skipped, name is used as default.

      order - Can be set to specify whether the enumerated folders are ordered in the ascending order or in descending order. Valid values are asc and desc. Default is asc.

      exclude - Folders can be excluded from being enumerated by specifying them with this parameter. If an excluded folder has children, they are excluded too.
      If multiple folders are to be excluded, separate them with comma.

      extended_info - If this parameter is set, additional variables get set to report the changes in hierarchy encountered by the folders tag, as it traverses through the folder tree. Please see the Variables section below.

      The following variables are set to provide information about each folder that gets enumerated

      Variables: k_folder_id, k_folder_name, k_folder_title, k_folder_desc, k_folder_link, k_folder_pagecount, k_folder_totalpagecount, k_level.

      If the hierarchical parameter is set to '1', the following variables also get set to indicate the current position in the hierarchy as this tag enumerates the folders -

      Variables: k_folder_id, k_folder_name, k_folder_title, k_folder_desc, k_folder_link, k_folder_pagecount, k_folder_totalpagecount, k_level, k_level_start, k_element_start, k_element_end, k_level_end.

      You can use these variables to easily create HTML ordered or unordered lists.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/folders.html'
#FORM
  "<cms:form method=\"post\">Name: <cms:input type=\"text\" size=\"10\" maxlength=\"40\" name=\"name\" /> <br /> Email: <cms:input type=\"text\" size=\"10\" name=\"email\" /> <br /> <cms:input name=\"submit\" type=\"submit\" value=\"Send\" /> </cms:form>":
    'prefix':'form'
    'body':"""
      form method="${1:post}" enctype="multipart/form-data" class="$2" ${3:anchor="$4"} ${5:action="$6"} ${7:class="$8"}>
        <cms:if k_success>
          ${9:<div class="$10">
            <h3>Successfully submitted</h3>
            <cms:each k_success sep='\n'>
              <cms:show item /><br />
            </cms:each>
          </div>}
        </cms:if>

        <cms:if k_error>
          ${11:<div class="$12">
            <h3>Submission failed</h3>
            <cms:each k_error>
              <cms:show item /><br />
            </cms:each>
          </div>}
        </cms:if>
        $13
        ${14:<cms:input name="submit" type="submit" value="${15:Submit}" />}
      </cms:form>
      $16
    """
    'description':"""
      <cms:form method="post">
          <cms:if k_success >
              <h3>Form successfully submitted</h3>
              <cms:each k_success sep='\n'>
                  <cms:show item /><br>
              </cms:each>
          </cms:if>

          <cms:if k_error >
              <h3>Failed to submit form</h3>
              <cms:each k_error >
                  <cms:show item /><br>
              </cms:each>
          </cms:if>

          Name: <cms:input type="text" size="10" maxlength="40" name="name" required='1' />
          Email: <cms:input type="text" size="10" name="email" required='1' validator='email' />

          <cms:input name="submit" type="submit" value="Send" />
      </cms:form>

      Apart from the parameters listed below, any parameters given to this tag will be passed on unchanged to the HTML <form> tag generated by this Couch tag. Thus, for example, if you wish to style inline the form, simply set the style parameter of this tag and the resulting HTML form will be passed on the style.

      Parameters: name, method, action, seperator, anchor.

      name - The name of the form.

      method - Method of form submision. Can be either get or post. If skipped, get is assumed.

      action - The script handling the form submission. Normally you do not require to set this parameter because this task is handled by Couch.

      separator - If the form fails to validate, the names of each failed fields, along with their error messages, are concatanated using a '|' pipe character to get a single string and this string is placed in a variable named k_error. You can change the default pipe separator to any other character by setting this parameter.

      anchor - To understand this parameter, suppose a form is created somewhere at the bottom of a web page and requires the user to scroll down the page to reach it. Upon submission of this form, the page is reloaded and in doing so the the form seems to disappear because the refreshed page shows the top region and it will again need scrolling to reach the form. This will cause the user to miss any feedback (error or success messages) that might have been added to the form.
      By setting the anchor parameter to '1', Couch adds an HTML anchor ('#') to the form so that the reloaded page scrolls back to the top of the form, thus mitigating the mentioned problem.

      Variables: k_success, k_error.

      k_success - If the form successfully validates, the names and values of each fields are concatenated using a '\n' newline character to get a single string and this string is placed in a this variable.

      k_error - If the form fails to validate, the names of each failed fields along with their error messages are concatenated using a '|' pipe character to get a single string and this string is placed in this variable.

      In addition to the two above mentioned variables, the values of the fields are also made available individually by setting discrete variables for each field. The names of the variables, however, differ between the success and error conditions.
      Suppose a form has two fields named name and password. Upon successful validation of both fields, two variables named after the two fields will get set - frm_name and frm_password. Each will contain the value submitted through them.
      However, if any of the fields fail to validate, variables representing only those failed fields will get set. Suppose the password field is the one that fails. In this case a variable named k_error_password will get set. This variable will contain the error message set for the validating condition.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/form.html'
#GET
  "<cms:get 'myvar' />":
    'prefix':'get'
    'body':"get 'myvar' />"
    'description':"""
      <cms:get 'myvar' />

      The get tag is used to output the value of the variable the name of which is supplied to it as its parameter.
      For example -

        <cms:set my_var='10' />
        <cms:get 'my_var' />

      In the snippet given above, 'my_var' is the name of the variable the value of which is output by the get tag.
      The output of the snippet is '10'.

      Compare the get tag with the show tag that takes a value (not the name) as its parameter.

      In the snippet given above, if we substitute the get tag with the show tag -

        <cms:set my_var='10' />
        <cms:show 'my_var' />

      - the output would be 'my_var' and not '10'.

      The snippet has to be written in the following manner to make it show the value contained within variable my_var -

        <cms:set my_var='10' />
        <cms:show my_var />

      Notice how the absence of the quotes in the parameter which signifies that it is a variable. This time the output is '10'.

      Consider what would happen with the get tag if we forgot the quotes around the first parameter -

        <cms:set my_var='10' />
        <cms:get my_var />

      The get tag will try and fetch the value of a variable named '10', which would be non-existent.

      The get tag is useful in the cases where we have to fetch the values of variables the names of which are generated dynamically.

      Parameters: var, local_only.

      var - Name of the variable the value of which is to be output.

      local_only - If this parameter is set to '1', get will search for the variable only in the local scope.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/get.html'
#GET COOKIE
  "<cms:get_cookie 'my_test_cookie' />":
    'prefix':'get_cookie'
    'body':"get_cookie '$1' />$2"
    'description':"""
      <cms:get_cookie 'my_test_cookie' />

      The get_cookie tag can be used to fetch value contained within any cookie set by the set_cookie tag.

      The snippet above will retrieve the value set within the cookie named 'my_test_cookie'

      Parameters: name.

      name - The name of the cookie the value of which is to be retrieved.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/get_cookie.html'
#GET CUSTOM FIELD
  "<cms:get_custom_field 'site_name' masterpage='globals.php' />":
    'prefix':'get_custom_field'
    'body':"get_custom_field var='$1' masterpage='$2' page='$3' />$4"
    'description':"""
      <cms:get_custom_field 'site_name' masterpage='globals.php' />

      The get_custom_field tag can be used to fetch the value contained within any editable region defined within any template.

      It is an alternative method to using the pages tag and is well suited for fetching values from single fields (as opposed to the pages tag that fetches values of all the editable regions in a page).

      Parameters: var, masterpage, page.

      var - The name of the editable region the value of which is to be fetched.

      masterpage - The name of the template that defines the editable region. This parameter is mandatory.

      page - The name of the page that contains the editable region.
      For non-clonable pages this parameter can be skipped.

        <cms:get_custom_field var='content' masterpage='blog.php' page='my_test_page' />
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/get_custom_field.html'
#GOOGLE MAP
  "<cms:google_map name='my_map' address='1600 Amphitheatre Parkway, Mountain View, CA' />":
    'prefix':':google_map'
    'body':"google_map name='$1' address='$2' />"
    'description':"""
      <cms:google_map name='my_map' latitude='37.423021' longitude='-122.083739' />

      The google_map tag can be used to easily create a Google map on a web page.


      In addition to the parameters listed below, any arbitrary parameter given to this tag will be passed on unchanged to the DIV that holds the generated map.

      Parameters: name, id, address, longitude,  latitude, zoom, message, width, height, style.

      name - Name of the map. This parameter is mandatory.

      id - If skipped, is set to the name.

      address - A map can be generated by providing either an address of both longitude and latitude.

      longitude/latitude - Coordinates used to create the map.

      zoom - Default is 14

      message - Text shown in the marker baloon.

      width - Width of the map in pixels. Default value is 400.

      height - Height of the map in pixels. Default value is 300.

      style - Regular CSS styles.

      A full example -

        <cms:google_map
            name='my_office'
            latitude='37.423021'
            longitude='-122.083739'
            zoom='14'
            message='We are located here'
            width='640'
            height='480'
            style='margin-bottom:10px;'
        />
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/google_map.html'
#GPC
  "<cms:gpc 'my_parameter' method='post' />":
    'prefix':'gpc'
    'body':"gpc '$1' method='${2:post}' />"
    'description': """
      <cms:gpc 'my_parameter' />

      <cms:gpc 'my_parameter' method='post' />

      The gpc tag stands for GET-POST-COOKIES and can be used to fetch values from variables contained in these.

      If the method parameter is not specified, this tag will look into all the three sources.

      M.IMP: Never, never use variables from GET, POST or COOKIES by using raw PHP code. The gpc tag sanitizes all variables and helps in preventing XSS attacks, something that your code will be susceptible of if you choose to do it manually and do not sanitize the values.

      Parameters: var, method.

      var - Name of the variable to fetch the value of.

      method - This can be one of the following - get, post, cookie. If this parameter is not specified, all the three are searched.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/gpc.html'
#GRAVATAR
  "<cms:gravatar email=\"johndoe@gmail.com\" size=\"60\" />":
    'prefix':'gravatar'
    'body':"gravatar email=\"$1\" size=\"${2:64}\" default=\"$3\" ${4:link_only='1'} />$5"
    'description': """
      <cms:gravatar email="johndoe@gmail.com" size="60" />

      Given an email address, the gravatar tag outputs an HTML <img> tag (or link only). The source of this image is set to the Gravatar image registered for this email at gravatar.com. If the email is not registered, the default image is output.

      Parameters email, size, default, link_only.

      email - The email for the Gravatar.

      size - Specifies the desired width and height of the Gravatar. Valid values are from 1 to 512 inclusive. If skipped, value of 48 is used.

      default - If no Gravatar found for the email, by default the Gravatar of unknown@gravatar.com is used. You can specify some other image to be used instead by setting this parameter to the URL of the alternative image.

      link_only - If set to '1', output the image link only (i.e. not the <img> tag).
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/gravatar.html'
#HIDE
  "<cms:hide>...Things to execute but not display</cms:hide>":
    'prefix':'hide'
    'body':"""
      hide>
        $1
      </cms:hide>
      $2
    """
    'description':"""
      <cms:hide>
         ...Everything here will get executed but the output will never appear on the webpage...
      </cms:hide>

      The hide tag is a very simple tag that can be used to prevent the output of code enclosed within it from being displayed.

      This is useful when you wish to execute some Couch tags but do not wish their outputs to get displayed.
      Compare this with the ignore tag where the enclosed contents are not executed at all.

    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/hide.html'
#HTML_ENCODE
  "<cms:html_encode><cms:excerptHTML><cms:show my_news_text /></cms:excerptHTML></cms:html_encode>":
    'prefix':'html_encode'
    'body':"""
      html_encode>
        ${1:<cms:excerptHTML>
          <cms:show $2 />
        </cms:excerptHTML>}
      </cms:html_encode>
    """
    'description': """
      <cms:html_encode>
        <cms:excerptHTML>
          <cms:show my_news_text />
        </cms:excerptHTML>
      </cms:html_encode>

      Certain characters have special significance in HTML, and should be represented by HTML entities if they are to preserve their meanings. This function returns a string with some of these conversions made.

      The translations performed are:

          '&' (ampersand) becomes '&amp;'
          '"' (double quote) becomes '&quot;'
          ''' (single quote) becomes '&#039;'
          '<' (less than) becomes '&lt;'
          '>' (greater than) becomes '&gt;'

      As an example, the following snippet has been taken from Core Concepts - RSS Feeds, where we are are supplyig the feed with HTML encoded excerpt of our pages -
        <cms:html_encode>
          <cms:excerptHTML><cms:show my_news_text /></cms:excerptHTML>
        </cms:html_encode>
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/html_encode.html'
#IF
  "<cms:if myvar> <h3>myvar is present</h3></cms:if>":
    'prefix':'if'
    'body':"""
      if $1>
        $2
      </cms:if>
    """
    'description': """
      <cms:if my_var >
         <h3> my_var is present </h3>
      </cms:if>

      The If tag is one of the most important tags. It can be used to make decisions based on the presence or absence of a certain condition (or conditions) and then execute or ignore statements enclosed within the opening and closing If tags.

      In the snippet above, the heading will be outputted only if a variable named 'my_var' is present and has a value that is not '0'.

      If evaluates the condition(s) provided as parameter and executes all the statements enclosed within it only if the result of the evaluation is neither '' (i.e. blank or no value) nor '0'.

      In the above snippet we were checking if the variable has any value at all. We can also check if a variable has a certain value or if that value is greater than or smaller than a certain value -
      Checking if equal

        <cms:if my_var = 'hello' >
            <h3> Hello </h3>
        </cms:if>

      In the snippet above we are checking if the variable 'my_var' holds the string 'hello' and output 'Hello' only if it does.

      As noted above, If goes ahead with executing statements enclosed within it only if the result of evaluating the condition is neither blank nor '0'. During the comparision above, if my_var is indeed equal to 'hello', the result of the evaluation is '1', otherwise the result is '0'.

      Instead of '=' we can also use 'eq' or '==' -

        <cms:if my_var eq 'hello'> <h3>Hello</h3> </cms:if>

        <cms:if my_var == 'hello'> <h3>Hello</h3> </cms:if>

      The above are the same as using '='.
      Checking if not equal

        <cms:if my_var != 'hello' >
            <h3> Not Hello </h3>
        </cms:if>

      In the snippet above we are checking if the variable 'my_var' does NOT hold the string 'hello' and output 'Not Hello' only if it is true.
      Instead of '!=' we can instead use 'ne' -

        <cms:if my_var ne 'hello'> <h3> Not Hello </h3> </cms:if>

      The above is the same as using '!='.
      Checking if greater than

        <cms:if my_var gt '100' >
            <h3> Value greater than 100 </h3>
        </cms:if>

      In the snippet above we are checking if the value in variable 'my_var' is greater than 100.
      Checking if greater than or equal

        <cms:if my_var ge '100' >
            <h3> Value greater than or equal to 100 </h3>
        </cms:if>

      In the snippet above we are checking if the value in variable 'my_var' is greater than or equal to 100.
      Checking if lesser than

        <cms:if my_var lt '100' >
            <h3> Value lesser than 100 </h3>
        </cms:if>

      In the snippet above we are checking if the value in variable 'my_var' is lesser than 100.
      Checking if lesser than or equal

        <cms:if my_var le '100' >
            <h3> Value lesser than or equal to 100 </h3>
        </cms:if>

      In the snippet above we are checking if the value in variable 'my_var' is lesser than or equal to 100.
      Combining multiple conditions using && (AND), || (OR)
      && (AND)

      If multiple conditions are combined by using '&&', the If statement will execute only if ALL the conditions are true.

        <cms:if (age gt '18') && (age lt '40')> .. </cms:if>

      The above will be true only if variable 'age' is greater than 18 and is lesser than 40. Thus if 'age' is 25, the above If statement will execute but if 'age' is 50, it will not because the second condition is false.
      || (OR)

      If multiple conditions are combined by using '||', the If statement will execute even if any one of the conditions is true.

        <cms:if (age gt '18') || (age lt '40')> .. </cms:if>

      The above will be true if variable 'age' is greater than 18 or is lesser than 40. Thus if 'age' is 25, the above If statement will execute (both conditions true) but if 'age' is 50, it will still execute because the first condition is true. In fact the above statement will always execute. A better illustration would be

        <cms:if (age lt '18') || (age gt '40')> .. </cms:if>

      here an age of 13 will cause the If to execute and so will an age of 50 but an age of 25 will not do so. As another example -

        <cms:if (age gt '18') || (sex == 'M')> .. </cms:if>

      The statement above will execute if either age of the person is more than 18 or if his sex is male regardless of his age (I know, this is sexist).
      Using && and || together

      Both && as well as || can be used together in the same if tag

        <cms:if (age lt '18') || (age gt '40') && (sex == 'M')> .. </cms:if>

      In the snippet above it seems we are trying to do something only if the sex of a person is male and his age is less than 18 or more than 40.
      Suppose that the variable 'age' holds a value of '13' while variable 'sex' holds 'F. For example -

        <cms:set age = '13' />
        <cms:set sex = 'F' />

        <cms:if (age lt '18') || (age gt '40') && (sex == 'M')>
           <h3>Welcome Gentleman!</h3>
        </cms:if>

      You might be surprised to see the Welcome message appearing although the sex is clearly not 'M'.
      This is because when || and && are used together, the && is given precedence over ||. Implicitly the condition that is being evaluated by if above is

        <cms:if (age lt '18') || ((age gt '40') && (sex == 'M'))>

      where being lesser than 18 is one condition and the combined result of being over 40 and also being a male is the second condition. The two conditions are separated by an || which evaluates to true even if one of the two conditions is true. It should be clear now that in the example above since the age was lesser than 18, the entire condition was evaluated as being true and the If block executed.

      The right way of using both || and && together is to always explicitly indicate the precedence. Thus -

        <cms:if ((age lt '18') || (age gt '40')) && (sex == 'M')>

      will make the code behave the way we had originally intended. The Welcome message will dissapear and will only reappear when we set 'sex' as 'M'. Notice how we enclosed the first two conditions that were supposed to be evaluated together within an extra pair of paranthesis.

      Always explicitly indicate the evaluation precedence of the conditions by using brackets when you use && and || together.

      Parameters: See discussion above.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/if.html'
#IGNORE
  "<cms:ignore><cms:show 'word' /></cms:ignore>":
    'prefix':'ignore'
    'body':"""
      ignore>
        $1
      </cms:ignore>
      $2
    """
    'description': """
      <cms:ignore>
          <cms:show 'world' />
      </cms:ignore>

      The Ignore tag can be used to surround sections of code that you temporarily do not wish to execute (i.e. want to have the code present on the page yet not be executed).
      This is somewhat akin to comenting out code in other languages to prevent execution.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/ignore.html'
#INCR
  "<cms:incr my_value '2' />":
    'prefix':'incr'
    'body':"incr $1 '$2' />$3"
    'description': """
      <cms:incr my_value '2' />
      <cms:show my_value />

      The incr tag accepts as its first parameter a variable and increases the value contained within the variable by the value contained within the second optional parameter. If the second parameter is not provided, a value of 1 is assumed.

        <cms:set my_value='11' />
        <cms:show my_value />

      In the snippet above, value of variable my_value is outputted as 11.

        <cms:incr my_value '2' />
        <cms:show my_value />

      The value of variable my_value now becomes 13.

        <cms:incr my_value />
        <cms:show my_value />

      The value of variable my_value now becomes 14.

      Parameters: Expects a maximum of two parameters.

      The first parameter has to be a variable. The second parameter is optional and its value is used to increase the value of the variable passed as the first parameter. A default value of 1 is assumed if the second parameter is not specified.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/incr.html'
#INPUT
  "<cms:input type=\"text\" size=\"10\" maxlength=\"40\" name=\"name\" />":
    'prefix':'input_text'
    'body':"input type=\"text\" size=\"$1\" maxlength=\"$2\" name=\"$3\" label=\"$4\" desc='$5' ${6:validator='$7'} ${8:required='1'} class='$9' />$10"
    'description': """
      <cms:input type="text" size="10" maxlength="40" name="name" label="displayed name" desc="description" validator="email|min_len=3|other" required='1' />

      Parameters: type, size, maxlength, name, label, desc, validator, required.

      Type - text

      size - font size

      maxlength - max characters

      name - Name of the input. This parameter is mandatory.

      label - displayed in admin

      desc - description/instructions

      validator - the input tag shares this parameter with the editable tag

      required - set this to 1 to make this field mandatory

    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/input.html'
  "<cms:input type=\"password\" size=\"10\" maxlength=\"10\" name=\"password\" />":
    'prefix':'input_password'
    'body':"input type=\"password\" name=\"${1:password}\" label='${2:password}' maxlength=\"${3:12}\" size=\"${4:10}\" required='1' class=\"$5\" />$6"
    'description': """
      <cms:input type="password" name="password" label='password' maxlength="12" size="10" required='1' class="classname" />

      Parameters: type, name, label, maxlength, size, required, class.

      type - password

      name - Name of the input this parameter is mandatory.

      label - displayed label of input

      maxlength - max characters allowed in the input

      size - font size

      required - set this to 1 to make input manadatory

      class - classname to style the input

    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/input.html'
  "<cms:input type=\"submit\" name=\"submit\" value=\"Send\" />":
    'prefix':'input_submit'
    'body':"input type=\"submit\" name=\"${1:submit}\" value=\"${2:Submit}\" style=\"$3\" />"
    'description': """
      <cms:input type="submit" name="submit" value="submit" style="padding:5 10;border-radius:15px" />

      Parameters: type, name, value, style.

      type - submit

      name - name of the input this parameter is mandatory.

      value - the text shown on the submit button

      style - inline css to style the submit button
    """
    'descriptionMoreURL':'https://docs.couchcms.com/concepts/forms.html'
  "<cms:input type=\"hidden\"  name=\"max_val\" value=\"100\" />":
    'prefix':'input_hidden'
    'body':"input type=\"hidden\" name=\"$1\" value=\"$2\" />$3"
    'description': """
      <cms:input type="hidden" name="max_val" value="100" />

      Parameters: type, name, value.

      type - hidden

      name - name of the input this parameter is manadatory

      value - value of the input
    """
    'descriptionMoreURL':'https://docs.couchcms.com/concepts/forms.html'

  "<cms:input type=\"textarea\" cols=\"35\" rows=\"5\" name=\"message\" required='1' label='message'></cms:input>":
    'prefix':'input_textarea'
    'body':"input type=\"textarea\" cols=\"$1\" rows=\"$2\" name=\"$3\" label='$4' desc='$5' ${6:required='1'}></cms:input>$7"
    'description': """
      <cms:input type="textarea" cols="45" rows="5" name="text" label='text' desc='description' required='1'></cms:input>

      Parameters: type, cols, rows, name, label, desc, required.

      type - textarea

      cols - number of columns the text area will appear

      rows - number of rows the text area will appear

      name - name of the input, this parameter is manadatory

      label - displayed label

      desc - description of the input

      required - set this to 1 to make this input manadatory.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/concepts/forms.html'

  "<cms:input type=\"radio\" name=\"mailinglist\" label='Add me to your mailing list' opt_values='Yes=y | No=n' opt_selected='n' required='1' />":
    'prefix':'input_radio'
    'body':"input type=\"radio\" name=\"$1\" label='$2' opt_values='$3' opt_selected='$4' ${5:required='1'} />$6"
    'description': """
      <cms:input type="radio" name="name" label="displayed name" opt_values='option1=0 | option2=1 | option3=2'opt_selected='0' required='1' />

      Parameters: type, name, label, opt_values, opt_selected, required.

      type - radio

      name - name of the input, this parameter is manadatory

      label - displayed name of input

      opt_values - the possible values to be selected

      opt_selected - the default selected option

      required - set this to 1 to make this input mandatory
    """
    'descriptionMoreURL':'https://docs.couchcms.com/concepts/forms.html'

  "<cms:input type=\"checkbox\" name=\"interests_arr\" label='Interests' opt_values='Music | Computers | Movies | Sports | Art' opt_selected='Music | Computers | Movies | Art' required='1' />":
    'prefix':'input_checkbox'
    'body':"input type=\"checkbox\" name=\"$1\" label=\"$2\" opt_values='$3' opt_selected='$4' ${5:required='1'} />"
    'description': """
      <cms:input type="checkbox" name="name" label='displayed name' opt_values='Option1 | option2 | option3 | opt4 | opt5' opt_selected='' required='1' />

      Parameters: type, name, label, opt_values, opt_selected required.

      type - checkbox

      name - name of the input, this parameter is manadatory

      label - displayed name of input

      opt_values - possible values to check

      opt_selected - default checked values

      required - set this parameter to 1 to make this input manadatory
    """
    'descriptionMoreURL':'https://docs.couchcms.com/concepts/forms.html'

  "<cms:input type=\"dropdown\" name=\"subject\" label='subject' opt_values='Please selected a subject=- | General enquiry | Booking enquiry' opt_selcted='General enquiry' required='1'":
    'prefix':'input_dropdown'
    'body':"input type=\"dropdown\" name=\"$1\" label='$2' opt_values='$3' opt_selected='${4:-}' ${5:required='1'} />"
    'description': """
      <cms:input type="dropdown" name="name" label='displayed name' opt_values='unselectedable opt=- | selectedable1=0 | selectedable2=1 | selectedable3=2' opt_selected='-' required='1' />

      Parameters: type, name, label, opt_values, opt_selected, required.

      type - dropdown

      name - name of the input, this parameter is manadatory

      label - displayed name of input_text

      opt_values - possible selectedable values of dropdown

      opt_selected - default selected value of dropdown

      required - set this parameter to 1 to make this input manadatory
    """
    'descriptionMoreURL':'https://docs.couchcms.com/concepts/forms.html'

  "<cms:input type=\"captcha\" name=\"my-captcha\" label='Are you human' format='i-r-t' />":
    'prefix':'input_captcha'
    'body':"input type=\"captcha\" name=\"$1\" label=\"$2\" format='${3:r-i-t}'/>$4"
    'description': """
      <cms:input type="captcha" name="name" label='displayed' format='r-i-t|i-r-t|t-i-r|rit|irt|tir' />

      Parameters: type, name, label, format.

      type - captcha

      name - name of the input, this parameter is mandatory.

      label - displayed name of input

      format - format of the characters and numbers of the captcha are shown.
    """
#IS ANCESTOR
  "<cms:is_ancestor parent=folder1 child=folder2 />":
    'prefix':'is_ancestor'
    'body':"is_ancestor parent=$1 child=$2 masterpage=$3 />$4"
    'description': """
      <cms:if "<cms:is_ancestor parent=folder1 child=folder2 />" >
        ..
      </cms:if>

      The is_ancestor tag can be used to find whether or not a folder is the ancestor of another folder.
      Outputs '1' if true, else outputs '0'. This makes it possible to use this tag with the conditional if tag.

      Parameters: masterpage, parent, child.

      masterpage - This parameter specifies the template the two folders belong to. If skipped, the template of the executing page is assumed.

      parent - The purported parent folder.

      child - The child folder.

    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/is_ancestor.html'
#LINK
  "<cms:link masterpage='news.php' />":
    'prefix':'link'
    'body':"link masterpage=$1 ${2:page='$3'} ${4:folder='$5'} ${6:year='$7' month='$8' day='$9'} />"
    'description': """
      Home view:
        <a href="<cms:link masterpage='news.php' />" >Testing Link tag</a>

      Page view:
        <a href="<cms:link masterpage='news.php' page='first-news-item' />" >Testing Link tag</a>

      Folder view:
        <a href="<cms:link masterpage='news.php' folder='entertainment' />" >Testing Link tag</a>

      Archive view:
        <a href="<cms:link masterpage='news.php' year='2010' />" >Testing Link tag</a>

        <a href="<cms:link masterpage='news.php' year='2010' month='8' />" >Testing Link tag</a>

        <a href="<cms:link masterpage='news.php' year='2010' month='8' day='17' />" >Testing Link tag</a>

      If multiple parameters are given, the page-view will be given priority over the folder-view and the folder-view will be given priority over the archive-view. The home-view link will be generated only when no other parameter (except the mandatory masterpage) is given.

      Parameters: masterpage, page, folder, year, month, day.

    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/link.html'
#LISTFOLDERS
  "<cms:listfolders masterpage='news.php' />":
    'prefix':'listfolders'
    'body':"listfolders masterpage=$1 ${2:childof='$3'} ${4:root='$5'} ${6:depth='${7:0}'} ${8:orderby='${9:weight}'} ${10:exclude='$11'} ${12:extended_info='1'} ${13:show_count='1'} ${14:hierarchial='1'} />"
    'description': """
      <cms:listfolders masterpage='news.php' />

      The listfolders tag can be used to create a quick-n-dirty HTML unordered list of the folders belonging to a template.

      Supports the same parameter as the folders tag. In addition, takes one more parameter - show_count.

      Parameters: masterpage, root, childof, hierarchical, depth, orderby, order, exclude, extended_info, show_count.

      masterpage - This parameter can be used to specify the template the folders of which are to be enumerated. If skipped, the template this tag is being used from is used.

      root - Only a sub-section of the folders tree can be enumerated by specifying a folder as this parameter. The folder specified as the root is returned along with all its children.

      childof - Only a sub-section of the folders tree can be enumerated by specifying a folder as this parameter. Only the children of the specified folder are returned.

      hierarchical - By setting this parameter the folders tag can be made to enumerate the folders in their hierarchical order. If skipped, the folders are enumerated in the alphabetical order of their names.

      depth - This parameter can be set to specify the maximum level in hierarchy (i.e. depth) that will be reached during enumeration. This can be used, for example, to list only the top folders in the tree by setting the depth to 1. A depth of 0 means unlimited depth.

      orderby - This parameter can be set to order the enumerated folders according to the following- name, title, id, count or weight. If skipped, name is used as default.

      order - Can be set to specify whether the enumerated folders are ordered in the ascending order or in descending order. Valid values are asc and desc. Default is asc.

      exclude - Folders can be excluded from being enumerated by specifying them with this parameter. If an excluded folder has children, they are excluded too.
      If multiple folders are to be excluded, separate them with comma.

      extended_info - If this parameter is set, additional variables get set to report the changes in hierarchy encountered by the folders tag, as it traverses through the folder tree. Please see the Variables section below.

      show_count - show number of pages by each folder in dropdown
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/listfolders.html'
#LOG
  "<cms:log k_page_title file='couch/uploads/file/secure/mylog.txt' />":
    'prefix':'log'
    'body':"log msg=$1 file='${2:couch/uploads/files/secure/log.txt}' />$3"
    'description': """
      <cms:log 'Just a test message' />

      The log tag can be used to save arbitrary text into a log file. This may be useful for debugging or for actually keeping a log of events.

      <cms:log some_msg />

      Parameters: msg, file.

      msg - The string to be logged.

      file - The log file into which the msg is to be logged. If this parameter is skipped, a log file named 'log.txt' in your site's root is used (created if not already existing) for logging.
      You can specify a path with the file that is relative to the site's root.

        <cms:log some_msg file='mylog.txt' />

        <cms:log k_page_title file='couch/uploads/file/secure/mylog.txt' />

      In the last snippet we are saving the log file in a subfolder of Couch which has a .htaccess file protecting its contents from being directly downloaded.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/log.html'
#MENU
  "<cms:menu masterpage='index.php' menu_class='sf-menu' />":
    'prefix':'menu'
    'body':"menu masterpage=$1 ${2:no_selected='1'} depth='$3' ${4:exclude='$5'} ${6:ignore_show_in_menu='1'} ${7:root='$8'} ${9:childof='$10'} ${11:extended_info='1'} ${12:menu_class='$13'} ${14:first_class='$15'} ${16:last_class='$17'} ${18:selected_class='$19'} ${20:active_trail_class='$21'} ${22:list_type='${23:ol}'} />$24"
    'description': """
      <cms:menu masterpage='menu.php' depth='2' orderby='title' />

      The menu tag is used to quickly generate the HTML markup representing the nested-pages of a site in the form of a dropdown menu.

      Parameters: masterpage, depth, orderby, order, exclude, ignore_show_in_menu, root, childof, extended_info,  menu_class, menu_id, first_class, last_class, no_selected, selected_class, no_active_trail, active_trail_class, list_type.

      To illustrate the use of 'menu' tag, we'll use the same sample hierarchy of elements that we used in the 'folders' section. The difference being that in this case the elements represent pages instead of folders.

        menu.php
            |---World News
            |   |---North American News
            |   |   |---United States News
            |   |       |---Ohio News
            |   |       |---Nevada News
            |   |---Asian News
            |       |---China News
            |       |---Japan News
            |---Sports News
            |---Music News
            |---Entertainment News

      masterpage - This parameter is used to specify the template behind the nested-pages tree used to create the menu.
      If left empty, the template of the currently executing page is assumed (which is unlikely to be correct as you'll usually want to display the menu on all sections (templates) of your site - typically by using 'embed' tag).

        <cms:menu masterpage='menu.php'/>

      depth - This parameter can be set to specify the maximum level in hierarchy (i.e. depth) that will be displayed in the menu.
      This can be used, for example, to list only the top-level pages in the tree by setting the depth to 1. A depth of 0 means unlimited depth.

        <cms:menu masterpage='menu.php' depth='1' />

      Output:

        * World News
        * Sports News
        * Music News
        * Entertainment News

      orderby - By default the menu-items get displayed in the order they are arranged in the admin-panel. This parameter can be set to order them according to the following criteria - name, title, id.

        <cms:menu masterpage='menu.php' depth='2' orderby='title' />

      Output:

        * Entertainment News
        * Music News
        * Sports News
        * World News
              o Asian News
              o North American News

      order - Can be set to specify whether the menu-items are ordered in the ascending order or in descending order.
      Valid values are 'asc' and 'desc'. Default is 'asc'.

        <cms:menu masterpage='menu.php' depth='2' orderby='title' order='desc' />

      Output:

        * World News
              o North American News
              o Asian News
        * Sports News
        * Music News
        * Entertainment News

      exclude - Pages can be excluded from the menu by specifying their names using this parameter.
      If an excluded page has children, they are excluded too.
      If multiple pages are to be excluded, separate them using comma.

        <cms:menu masterpage='menu.php' exclude='united-states-news, china-news' />

      Output:

        * World News
              o North American News
              o Asian News
                    + Japan News
        * Sports News
        * Music News
        * Entertainment News

      ignore_show_in_menu - The 'Advanced Settings' of each nested-page has a checkbox labeled 'Show in menu'.
      If that is unchecked, the page (an all its child pages) is not included by default in the menu.
      You can override this by setting 'ignore_show_in_menu' parameter to '1'.

        <cms:menu masterpage='menu.php' ignore_show_in_menu='1' />

      root - Only a sub-section of the nested-pages tree can be displayed in the menu by specifying the name of a nested-page as this parameter.
      The nested-page specified as the root is displayed along with all its children (compare with 'childof' parameter below where only the children are displayed).

        <cms:menu masterpage='menu.php' root='united-states-news' />

      Output:

        * United States News
              o Ohio News
              o Nevada News

      childof - Only a sub-section of the nested-pages tree can be displayed in the menu by specifying the name of a nested-page as this parameter.
      Only the children of the nested-page specified are displayed (compare with 'root' parameter above where the specified nested-page is also included in the display).

      If both 'childof' and 'root' are set, the 'root' parameter gets precedence.

        <cms:menu masterpage='menu.php' childof='united-states-news' />

      Output:

        * Ohio News
        * Nevada News

      Dynamic  Menu

      Occasionally, you'll come across sites where there is more than one menu on a single page with each of the discrete menus being inter-dependant.
      Thus we could have, for example, a top menu that shows only the top level pages of the site while another menu in the sidebar shows only the pages that occur immediately below the page currently selected in the top menu. There could be yet another menu in the footer that shows the pages below the page selected (if any) in the sidebar menu.
      The sidebar and the footer menu in the case above are examples of dynamic menus because their 'root' keeps on dynamically changing depending on the current page being visited.

      To help easily create such menus the 'childof' and 'root' parameter accept some special keywords. At runtime, the 'menu' tag dynamically calculates their values taking into consideration the current page.

      The special keywords are -
      @n (where n is a number starting from 1 e.g. @1, @2 etc.)

      By setting either the 'childof' and 'root' parameter to '@n', we ask Couch to use as the 'root' or 'childof' the page that is parent number 'n' of the current page being visited.

      For example -

        <cms:menu masterpage='menu.php' root='@1' />

      In the snippet above we are instructing Couch to find out all the parents of the current page and then use the top most parent (first parent) as the value for the 'root' parameter.
      Thus, if the page being visited was
      'Nevada News' (http://www.yoursite.com/world-news/north-american-news/united-states-news/nevada-news/)
      the first parent would be 'world-news' and that is the value that would be used as the 'root' parameter.
      Whereas, in the following snippet

        <cms:menu masterpage='menu.php' root='@2' />

      the value used for the 'root' parameter would be 'north-american-news' as that is the second parent of the current page.

        @current

      By setting either the 'childof' and 'root' parameter to '@current', we ask Couch to use as the 'root' or 'childof' the current page itself that is being visited.

      For example -

        <cms:menu masterpage='menu.php' root='@current' />

      In the snippet above, if the page being visited was
      'North American News' (http://www.yoursite.com/world-news/north-american-news/)
      the value used for the 'root' parameter would be 'north-american-news'.

        @current-n (where n is a number starting from 1 e.g. @current-1, @current-2 etc.)

      By setting either the 'childof' and 'root' parameter to '@current-n', we ask Couch to use as the 'root' or 'childof' the parent page that is 'n' level above the page being visited.

      For example -

        <cms:menu masterpage='menu.php' root='@current-1' />

      In the snippet above, if the page being visited was
      'Nevada News' (http://www.yoursite.com/world-news/north-american-news/united-states-news/nevada-news/)
      the value used for the 'root' parameter would be 'united-states-news' while for the following snippet

        <cms:menu masterpage='menu.php' root='@current-2' />

      the value used would be 'north-american-news'.

      Using these special keywords some very complex menu can be easily created without involving any programming.


      list_type - By default the HTML list element used to create the menu is <UL>.
      It can be set to <OL> but using this parameter.

      <cms:menu masterpage='menu.php' list_type='ol' />

      menu_class - This parameter can be used to add class names to the outermost list container (<UL> or <OL>) of the menu.
      This is useful for styling the menu using CSS.

        <cms:menu masterpage='menu.php' menu_class='sf-menu' />

        <cms:menu masterpage='menu.php' menu_class='sf-menu sf-navbar' />

      Notice that in the second example we are applying two classes to the menu.
      menu_id

      This parameter can be used to apply an ID to the outermost list container (<UL> or <OL>) of the menu.
      This is useful for styling the menu using CSS.

        <cms:menu masterpage='menu.php' menu_id='top-menu' />

      first_class - The default behavior of the menu tag is to apply a special class 'first' to the very first menu-item at each level. This is useful for styling the menu using CSS.
      A different class name can be set by using this parameter.

        <cms:menu masterpage='menu.php' first_class='begin' />

      last_class - The default behavior of the menu tag is to apply a special class 'last' to the last menu-item at each level.
      This is useful for styling the menu using CSS. A different class name can be set by using this parameter.

        <cms:menu masterpage='menu.php' first_class='begin' last_class='end' />

      no_selected - The default behavior of the menu tag is to apply a special class 'current' (can be changed using the 'selected_class' parameter) to the menu-item that matches the page being visited. This behavior can be turned off by setting the 'no_selected' parameter to '1'.

        <cms:menu masterpage='menu.php' no_selected='1' />

      selected_class - The default behavior of the menu tag is to apply a special class 'current' to the menu-item that matches the page being visited.
      A different class name can be set by using this parameter.

        <cms:menu   masterpage='menu.php' selected_class='selected' />

      no_active_trail - The default behavior of the menu tag is to apply a special class 'active' to all the menu-items leading up to (and including) the menu-item that matches the current page - thus marking out an 'active-trail' that can be used for CSS styling.This behavior can be turned off by setting the 'no_active_trail' parameter to '1'.

        <cms:menu masterpage='menu.php' no_active_trail='1' />

      active_trail_class - The default behavior of the menu tag is to apply a special class 'active' to all the menu-items leading up to (and including) the menu-item that matches the current page - thus marking out an 'active-trail' that can be used for CSS styling. A different class name can be set by using this parameter.

        <cms:menu masterpage='menu.php' active_trail_class='selected-parent' />

    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/menu.html'
#MOD
  "<cms:mod my_count '5' />":
    'prefix':'mod'
    'body':"mod $1 '$2' />$3"
    'description': """
      <cms:set my_count='23' />
      <cms:mod my_count '5' />

      The mod tag accepts two parameters and returns as its output the remainder obtained after dividing the first parameter by the second.
      The parameters may be literal strings, variables or output of other tags.

      The snippet above outputs '3', which is what remains after dividing 23 by 5.

      Parameters:The tag expects two parameters as the operands.

    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/mod.html'

#MUL
  "<cms:mul my_count '5' />":
    'prefix':'mul'
    'body':"mul $1 '$2' />$3"
    'description': """
      <cms:mul my_count '5' />

      The mul tag accepts two parameters and returns as its output the value obtained after multiplying them.
      The parameters may be literal strings, variables or output of other tags.
      The snippet multiplies by 5 whatever value is contained within my_count variable and outputs the resulting value.

      Parameters: The tag expects two parameters as the values to be multiplied.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/mul.html'
#NESTED CRUMBS
  "<cms:nested_crumbs masterpage='index.php' ignore_show_in_menu='1' prepend='<ul class=\"breadcrumb\">' append='</ul>'> <li><a href=\"<cms:show k_crumb_link />\"><cms:show k_crumb_text /></a><cms:if k_crumb_is_last='0'> &raquo; </cms:if></li></cms:nested_crumbs>":
    'prefix':'nested_crumbs'
    'body':"""
      nested_crumbs masterpage=$1 ${2:ignore_show_in_menu='1'} ${3:prepend='${4:<ul class="breadcrumb">'} ${5:append='${6:</ul>}' ${7:>
      <li><a href="<cms:show k_crumb_link />"<cms:show k_crumb_text /></a><cms:if k_crumb_is_last='0'> &raquo; </cms:if></li>
      </cms:nested_cumbs>}} ${8:/>}
      $9
    """
    'description': """
      <cms:nested_crumbs masterpage='index.php' ignore_show_in_menu='1' prepend='<ul class="breadcrumb">' append='</ul>'>
        <li><a href="<cms:show k_crumb_link />"><cms:show k_crumb_text /></a><cms:if k_crumb_is_last='0'> &raquo; </cms:if></li>
      </cms:nested_crumbs>

      The nested_crumbs tag can be used to easily create breadcrumbs out of nested-pages.

       There is another tag named 'breadcrumbs', which is used with the folder hierarchy associated with normal cloned pages.
      'nested_crumbs' on the other hand works with nested-pages only.
      Usage

      This tag can be used in two ways -

      1. As self-closing tag. e.g.

        <cms:nested_crumbs masterpage='index.php' />

      where 'masterpage' points to the template behind the nested-pages tree.

      2. As a tag-pair for better control over the generated breadcrumbs markup. e.g.

        <cms:nested_crumbs masterpage='index.php' ignore_show_in_menu='1' prepend='<ul class="breadcrumb">' append='</ul>'>
          <li><a href="<cms:show k_crumb_link />"><cms:show k_crumb_text /></a><cms:if k_crumb_is_last='0'> &raquo; </cms:if></li>
        </cms:nested_crumbs>

      Parameters: masterpage, ignore_show_in_menu, prepend, append.

      masterpage - This parameter is used to specify the template behind the nested-pages used to create the breadcrumbs. If left empty, the template of the currently executing page is assumed.

      ignore_show_in_menu - The 'Advanced Settings' of each nested-page has a checkbox labeled 'Show in menu'. If that is unchecked, the page is not included by default in the breadcrumbs. You can override this by setting 'ignore_show_in_menu' parameter to '1'.

      prepend - While using the tag as a tag-pair (see Usage above), this parameter can be used to output anything before the first crumb.

      append - While using the tag as a tag-pair (see Usage above), this parameter can be used to output anything after the last crumb.

      Variables: When used as a self-closing tag, this tag sets no variables.

      When used as a tag-pair, the following variables are set for each crumb -

      Variables: k_crumb_id, k_crumb_name, k_crumb_text, k_crumb_link, k_crumb_is_nested_page, k_crumb_is_folder, k_crumb_open_external, k_crumb_is_last.

    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/nested_crumbs.html'
#NESTED PAGES
  "<cms:nested_pages masterpage='index.php'><cms:dump /> <a href=\"<cms:show k_nestedpage_link />\"><cms:show k_nestedpage_title /></a><br /></cms:nested_pages>":
    'prefix':'nested_pages'
    'body':"""
      nested_pages masterpage=$1 ${2:depth='$3'} ${4:orderby='$5'} ${6:order='$7'} ${8:exclude='$9'} ${10:ignore_show_in_menu='1'} ${11:root='$12'} ${13:childof='$14'} ${15:extended_info='1'} ${16:include_custom_fields='1'} ${17:paginate='1'} ${18:limit='$19'} ${20:offset='$21'} ${22:startcount='$23'}>
        ${24:<cms:if k_level_start>
          <cms:if k_level='0'>
            <ul class="$25" id="$26">
          <cms:else />
            <ul>
          </cms:if>
        </cms:if>

        <cms:if k_element_start>
          <li id="item-<cms:show k_nestedpage_name />"
             class="level-<cms:show k_level /><cms:if k_total_children> has-submenu</cms:if><cms:if k_first_child> first</cms:if><cms:if k_last_child> last</cms:if><cms:if k_is_active> active</cms:if><cms:if k_is_current> current</cms:if>">
              <a href="<cms:show k_menu_link />"><cms:show k_menu_title /></a>
        </cms:if>
        <cms:if k_element_end>
            </li>
        </cms:if>
        <cms:if k_level_end>
          </ul>
        </cms:if>}
      </cms:nested_pages>
    """
    'description': """
      <cms:nested_pages masterpage='index.php' extended_info='1' >
        <cms:if k_level_start >
          <cms:if k_level='0'>
              <ul class="my-menu-class-1 my-menu-class-2" id="my-menu-id">
          <cms:else />
              <ul>
          </cms:if>
        </cms:if>
        <cms:if k_element_start >
          <li id="item-<cms:show k_nestedpage_name />" class="level-<cms:show k_level/><cms:if k_total_children> has-submenu</cms:if><cms:if k_first_child> first</cms:if><cms:if k_last_child> last</cms:if><cms:if k_is_active> active</cms:if><cms:if k_is_current> current</cms:if>">
          <a href="<cms:show k_menu_link />"><cms:show k_menu_title /></a>
        </cms:if>
        <cms:if k_element_end ></li></cms:if>
        <cms:if k_level_end ></ul></cms:if>
      </cms:nested_pages>

      The nested_pages tag is used to list nested-pages.

      Since the primary purpose of nested-pages (as explained in the Core Concepts) is to create a hierarchy of pages that can be represented as the site's menu, you'll find that usually the 'menu' tag will suffice for the purpose of creating a menu.
      However, sometimes you'll need more control over the generated menu than what the 'menu' tag offers.
      For such cases, the 'nested_pages' tag can be used as it is a lower level tag (in fact, the 'menu' tag uses the 'nested_pages' internally).

      To illustrate the use of 'nested_pages', we'll use the same sample hierarchy of elements that we used in the 'folders' section. The difference being that in this case the elements represent pages instead of folders.
      We'll assume that a template named 'index.php' has been used to create the nested-pages.

      index.php
          |---World News
          |   |---North American News
          |   |   |---United States News
          |   |       |---Ohio News
          |   |       |---Nevada News
          |   |---Asian News
          |       |---China News
          |       |---Japan News
          |---Sports News
          |---Music News
          |---Entertainment News

      The simplest way to list the nested-pages would be as follows -

        <cms:nested_pages masterpage='index.php'>
          <a href="<cms:show k_nestedpage_link />"><cms:show k_nestedpage_title /></a><br />
        </cms:nested_pages>

      The output -

      World News
      North American News
      United States News
      Ohio News
      Nevada News
      Asian News
      China News
      Japan News
      Sports News
      Music News
      Entertainment News

      Notice how the hierarchical relationship between the pages has been preserved.

      As is the norm with other similar tags in Couch, the 'nested_pages' tag too, as it iterates through the pages within the tree, makes available all the information pertaining the page it is currently on by setting various variables.
      Place a <cms:dump /> statement inside the loop and you'll see that Couch provides all the information that was inputted in the admin-section for each nested-page.

        <cms:nested_pages masterpage='index.php'>
          <cms:dump />
          <a href="<cms:show k_nestedpage_link />"><cms:show k_nestedpage_title /></a><br />
        </cms:nested_pages>

      These, for example, are the variables that get set for page 'United States News' -

      * k_level: 2
      * k_nestedpage_id: 1595
      * k_nestedpage_name: united-states-news
      * k_nestedpage_title: United States News
      * k_nestedpage_is_active: 1
      * k_nestedpage_comments_count: 0
      * k_nestedpage_parent_id: 1594
      * k_nestedpage_weight: 1
      * k_show_in_menu: 1
      * k_menu_text:
      * k_is_pointer: 0
      * k_pointer_link:
      * k_open_external: 0
      * k_masquerades: 0
      * k_is_active: 1
      * k_is_current: 1
      * k_immediate_children: 2
      * k_total_children: 2
      * k_nestedpage_link: http://www.yourdomain.com/?p=1595
      * k_menu_link: http://www.yourdomain.com/?p=1595
      * k_menu_title: United States News

      As you can see, all the information that would be needed to create manually a menu markup is available.
      Let us use is to create one.
      Creating menu using 'nested_pages' tag

      A menu is normally created using nested <UL>/<OL> and <LI> elements. To make the task of doing so easy, the 'nested_pages' tag, like the 'folders' tag, supports the 'extended_info' parameter. Setting the 'extended_info' parameter to '1' makes the 'nested_pages' tag provide additional information that can be used to output the closing and opening <UL>/<OL> and <LI> tags without any pain.

        <cms:nested_pages masterpage='index.php' extended_info='1' >
         <cms:if k_level_start ><ul></cms:if>
         <cms:if k_element_start ><li>
            <cms:show k_nestedpage_title />
         </cms:if>
         <cms:if k_element_end ></li></cms:if>
         <cms:if k_level_end ></ul></cms:if>
      </cms:nested_pages>

      Output -

      <ul>
          <li>
              Asian News
              <ul>
                  <li>China News</li>
                  <li>Japan News</li>
              </ul>
          </li>
          <li>
              North American News
              <ul>
                  <li>
                      United States News
                      <ul>
                          <li>Nevada News</li>
                          <li>Ohio News</li>
                      </ul>
                  </li>
              </ul>
          </li>
      </ul>

      Following is a complete example that makes use of the variables mentioned before to create a functioning menu -

      <cms:nested_pages masterpage='index.php' extended_info='1' >
         <cms:if k_level_start >
            <cms:if k_level='0'>
                <ul class="my-menu-class-1 my-menu-class-2" id="my-menu-id">
            <cms:else />
                <ul>
            </cms:if>
         </cms:if>

         <cms:if k_element_start >
            <li id="item-<cms:show k_nestedpage_name />" class="level-<cms:show k_level/><cms:if k_total_children> has-submenu</cms:if><cms:if k_first_child> first</cms:if><cms:if k_last_child> last</cms:if><cms:if k_is_active> active</cms:if><cms:if k_is_current> current</cms:if>">
            <a href="<cms:show k_menu_link />"><cms:show k_menu_title /></a>
         </cms:if>

         <cms:if k_element_end ></li></cms:if>
         <cms:if k_level_end ></ul></cms:if>
      </cms:nested_pages>

      The example shown above is equivalent to the following using 'menu' tag -

      <cms:menu masterpage='index.php' menu_class='my-menu-class-1 my-menu-class-2' menu_id='my-menu-id' first_class='first' last_class='last' active_trail_class='active' selected_class='current' />

      Creating a paginated listing using 'nested_pages' tag

      Apart from being used to create a menu, the 'nested_pages' tag may also be used to create a conventional listing of pages, complete with pagination etc., the way it is usually done using the 'pages' tag with normal (i.e. non nestable) pages.

      If you are familiar with the 'pages' tag, the following snippet will seem familiar -

      <cms:nested_pages masterpage='index.php' extended_info='1' paginate='1' limit='5' >
         <cms:if k_paginated_top>
           <cms:if k_paginator_required >
               Page <cms:show k_current_page /> of <cms:show k_total_pages /><br>
           </cms:if>
           <cms:show k_total_records /> records Found.
           Displaying: <cms:show k_record_from />-<cms:show k_record_to />
           <br /><hr />
         </cms:if>

          <a href="<cms:show k_nestedpage_link />"><cms:show k_nestedpage_title /></a><br />

          <cms:paginator />

      </cms:nested_pages>

      Output -

      Page 1 of 3
      11 records Found. Displaying: 1-5

      World News
      North American News
      United States News
      Ohio News
      Nevada News

      « prev 1 2 3 next »

      Some points to note -

          With 'paginate' set to '1', the 'extended_info' is automatically turned off - i.e. only the conventional linear listing is possible.
          For performance reasons, data from the custom fields (i.e. the editable regions defined for the nested-pages template) is not made available by default. You can set the 'include_custom_fields' parameter to '1' to make the custom fields available.

      IMPORTANT: Since, as you just saw, the nested pages can be listed in the conventional manner (like the one produced by the 'pages' tag), it is perfectly possible to create entire sections of a website using nested-pages instead of the regular cloned pages.
      One feature of the nested-pages that might make doing so more desirable is the ability to set their display order from the admin panel using simple up-down arrows (for regular pages this usually entailed tweaking their publish-dates).

      However, it is necessary to emphasize here that the nested-pages have been created (and hence optimized) for creating loose stand-alone pages in a site. Such pages, as opposed to the cloned pages within discrete sections like blog or portfolio, are not likely to be in very large numbers.
      You can definitely have hundreds of them, but if the number of pages is likely to reach into the thousands please use the regular cloned pages as they are optimized for handling larger numbers.

      Parameters: masterpage, depth, orderby, order, exclude, ignore_show_in_menu, root, childof, extended_info, include_custom_fields, paginate, limit, offset, startcount.

      masterpage - This parameter is used to specify the template behind the nested-pages tree. If left empty, the template of the currently executing page is assumed.
      depth
      This parameter can be set to specify the maximum level in hierarchy (i.e. depth) that will be listed by this tag.
      This can be used, for example, to list only the top-level pages in the tree by setting the depth to 1. A depth of 0 means unlimited depth.

      orderby - By default the pages are listed in the order they are arranged in the admin-panel.
      This order can be changed by using the 'orderby' parameter. Valid values are: name, title, id.

      order - Can be set to specify whether the pages are ordered in the ascending order or in descending order.
      Valid values are asc and desc. Default is asc.

      exclude - Pages can be excluded from being listed by specifying their names using this parameter.
      If an excluded page has children, they are excluded too.
      If multiple pages are to be excluded, separate their names using comma.

      ignore_show_in_menu - The 'Advanced Settings' of each nested-page has a checkbox labeled 'Show in menu'.
      If that is unchecked, the page (an all its child pages) is not included by default in the listing.
      You can override this by setting 'ignore_show_in_menu' parameter to '1'

      root - Only a sub-section of the nested-pages tree can be listed by specifying the name of a page as this parameter.
      The page specified as the root is displayed along with all its children (compare with 'childof' parameter below where only the children are displayed).

      childof - Only a sub-section of the nested-pages tree can be listed by specifying the name of a page as this parameter.
      Only the children of the page specified are displayed (compare with 'root' parameter above where the specified page is also included in the display).

      If both 'childof' and 'root' are set, the 'root' parameter gets precedence.

      extended_info - If this parameter is set, additional variables get set to report the changes in hierarchy encountered by the nested_pages tag, as it traverses through the tree. Please see the Variables section below.

      include_custom_fields - By default, in a bid to enhance performance, the custom-field's data (i.e. data within the editable regions) are not made available as the nested_pages tag traverses through the pages in the tree.
      If the 'include_custom_fields' is set to '1', all the values within the editable regions of each page are made available as variables named after the regions.

      paginate - To list the nested-pages in conventional manner (i.e. the way the 'pages' tag lists the regular cloned pages), set this parameter to '1'.
      One the 'paginate' parameter is set -
      a. 'extended_info' is automatically turned off so information about the changes in hierarchy levels in no longer available.
      b. All the variables that help in creating the pagination buttons become available (see Pagination)
      c. The 'limit', 'offset' and 'startcount' parameters described below become effective.

      limit - This parameter takes effect only when the 'paginate' parameter is set to '1'.
      It can be used to limit the number of pages listed before the pagination buttons leading to the next/prev set of pages appear.

      offset - This parameter takes effect only when the 'paginate' parameter is set to '1'.
      it can be used to skip any number of pages before beginning the listing.

      startcount - This parameter takes effect only when the 'paginate' parameter is set to '1'.
      The k_count, k_record_from, k_current_record and k_record_to variables (see Pagination) start by default from '1'. This can be changed to any other value by setting this parameter.

      Variables: The following variables are set to provide information about each nested-page that gets enumerated -

      Variables: k_nestedpage_id, k_nestedpage_name, k_nestedpage_title, k_nestedpage_is_active, k_nestedpage_comments_count, k_nestedpage_parent_id, k_nestedpage_weight, k_show_in_menu, k_menu_text, k_menu_link, k_menu_title, k_is_pointer, k_pointer_link,k_open_external, k_masquerades, k_is_active, k_is_current, k_immediate_children, k_total_children, k_first_child, k_last_child, k_nestedpage_link.

      If the 'extended_info' parameter is set to '1', the following variables also get set to indicate the current position in the hierarchy as this tag enumerates the pages -

      Variables: k_level_start, k_element_start, k_element_end, k_level_end.

      If the 'include_custom_fields' parameter is set to '1', all the values within the editable regions of each page are made available as variables named after the regions.

      If the 'paginate' parameter is set to '1', variables that help in creating the pagination buttons become available (see Pagination)
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/nested_pages.html'
#NL2BR
  "<cms:nl2br><cms:show some_variable /></cms:nl2br>":
    'prefix':'nl2br'
    'body':"nl2br>${1:<cms:show $2 />}</cms:nl2br>$3"
    'description': """
      <cms:nl2br><cms:show some_variable /></cms:nl2br>

      The nl2br tag stands for 'newline to BR' and can be used to convert all newline characters in a string to HTML <BR> tags.

      It comes in handy in situations where you have an editable region of textarea type and while displaying the data contained within it, you wish to replace all the newlines entered by the user with <BR> tags.

      Parameters: This tag takes no parameters. All content enclosed within its opening and closing tags serve as its input.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/nl2br.html'
#NOT EMPTY
  "<cms:not_empty my_content />":
    'prefix':'not_empty'
    'body':"not_empty $1 />$2"
    'description': """
      <cms:if "<cms:not_empty my_content />" >
        .. do something..
      </cms:if>

      The not_empty tag can be used to find out whether or not an editable region contains any value.

      It returns a '1' if the variable representing the editable region contains some value (i.e. is not empty) else it returns a '0'.
      This property makes it possible to use it with conditional tags, like if and else.

      The snippet above, where we are checking if the editable region named my_content contains any value, could have been written in the following simpler manner -

      <cms:if my_content >
         .. do something..
      </cms:if>

      - however, if the editable region is of type richtext, the CKEditor sometimes inserts some spurious <BR /> or empty <P> tags into it even if nothing is entered into the editable region by the user. This will cause the simple test above to fail with richtext types. The not_empty strips off all HTML tags from the variable it is testing and then returns the result, thus making it useful for such cases.

      Parameters: This tag takes no parameters.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/not_empty.html'
#NUMBER FORMAT
  "<cms:number_format '1234567890' />":
    'prefix':'number_format'
    'body':"number_format '$1' ${2:decimal_percision='$3'} ${4:decimal_character='${5:.}'} ${6:thousands_seperator='${7:,}'} />$8"
    'description': """
      <cms:number_format '1234.56' decimal_character=',' thousands_separator=' ' />

      he number_format tag can be used to properly format numeric values.

      For example

        <cms:number_format '1234567890' />

      The snippet above will output

        1,234,567,890.00

      Parameters: number, decimal_precision, decimal_character, thousands_separator.

      number - The number to be formatted.

      decimal_precision - By default two numeric characters are outputted after the decimal point. This can be changed by this parameter.

        <cms:number_format '1234567890' decimal_precision='0' />

      will output

        1,234,567,890

      decimal_character - The default character used as the decimal point can be changed by this parameter.

      thousands_separator - The default character used as the thousand separator is the comma. It can be changed by this parameter.

      The following snippet can be used to format a number in French notation

        <cms:number_format '1234.56' decimal_character=',' thousands_separator=' ' />

      Output -

        1 234,56
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/number_format.html'
#PAGE EXISTS
  "<cms:page_exists 'contact-us' masterpage='index.php' />":
    'prefix':'page_exists'
    'body':"page_exists '$1' masterpage='$2' />$3"
    'description': """
      <cms:page_exists 'contact-us' masterpage='index.php' />

      The page_exists tag checks whether or not a cloned page, the name of which is given to it as a parameter, exists.
      It returns a '1' if the page exists else it returns a '0'.

      The above snippet is checking for the existence of a page named 'contact-us' that has been cloned out of a template named 'index.php'.

      Parameters: name, masterpage.

      name - Name of the cloned page the existence of which is to be checked.

      masterpage - Name of the template out of which the cloned page mentioned above has been cloned.
      If this parameter is skipped, the name of the template of the currently executing page will be used instead.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/page_exists.html'
#PAGES
  "<cms:pages masterpage='blog.php'><!-- All the variables of each page cloned out of this template are available here --><cms:show k_page_title /><br></cms:pages>" :
    'prefix':'pages'
    'body':"""
      pages masterpage='$1' ${2:id='$3'} ${4:page_name='$5'} ${6:limit='$7'} ${8:paginate='1'} ${9:offset='$10'} ${11:folder='$12'} ${13:include_subfolders='1'} ${14:start_on='$15'} ${16:stop_before='$17'} ${18:show_future_entries='1'} ${19:orderby='$20'} ${21:order='$22'} ${23:custom_field='$24'}>
        $25
      </cms:pages>
    """
    'description': """
      <cms:pages masterpage='blog.php'></cms:pages>
     This tag is very closely related to the pages tag and supports all the parameters acceptable to the pages tag

      Parameters: masterpage, id, page_name, limit, paginate, offset, startcount, folder, include_subfolders, start_on, stop_before, show_future_entries, orderby, order, custom_field, field.

      masterpage - This parameter specifies the template that defines the editable region of type 'relation' specified in the 'field' parameter above.
      This parameter is mandatory.

        <cms:pages masterpage='blog.php'></cms:pages>

      This example would fetch all pages cloned from blog.php.

      If this parameter is skipped, the template being currently executed is used instead. Thus -

        <cms:pages></cms:pages>

      This example would fetch all pages cloned from the template being currently executed.

      id -
        <cms:pages masterpage='blog.php' id='14'></cms:pages>

      This example would fetch only page with id of 14 that has been cloned from blog.php.

        <cms:pages masterpage='blog.php' id='14, 13'></cms:pages>

      This example would fetch only pages with id of 14 or 13 that have been cloned from blog.php.

        <cms:pages masterpage='blog.php' id='NOT 14, 13'></cms:pages>

      This example would fetch all pages cloned from blog.php except the two with the ids of 14 or 13.

      page_name -
        <cms:pages masterpage='blog.php' page_name='my_first_entry'></cms:pages>

      This example would fetch the page named 'my_first_entry' that has been cloned from blog.php.

        <cms:pages masterpage='blog.php' page_name='my_first_entry, my_another_entry'></cms:pages>

      This example would fetch pages named 'my_first_entry' or 'my_another_entry' that have been cloned from blog.php.

        <cms:pages masterpage='blog.php' page_name='NOT my_first_entry, my_another_entry'></cms:pages>

      This example would fetch all pages cloned from blog.php except the two named 'my_first_entry' or 'my_another_entry'.

      limit -
        <cms:pages masterpage='blog.php' limit='5'></cms:pages>

      This example would fetch five pages cloned from blog.php. (Since no 'orderby' and 'order' parameters specified, the default values of these parameters will be used and the most recent five pages will be fetched.)

      paginate -
        <cms:pages masterpage='blog.php' limit='5' paginate='1'></cms:pages>

      This example would fetch ALL pages cloned from blog.php but show only 5 at one time. To move to the next 5 or the previous 5 pages, pagination code has to be used (see Pagination).
      offset

        <cms:pages masterpage='blog.php' offset='2'></cms:pages>

      This example would fetch pages cloned from blog.php after skipping the first two.

      startcount -
        <cms:pages masterpage='blog.php' startcount='0'></cms:pages>

      The k_count, k_record_from, k_current_record and k_record_to variables (see Pagination) start by default from '1'. This can be changed to any other value by setting this parameter.

      folder -
        <cms:pages masterpage='blog.php' folder='classic-bikes'></cms:pages>

      This example would fetch pages cloned from blog.php and belonging to folder named 'classic-bikes'.

        <cms:pages masterpage='blog.php' folder='classic-bikes, super-bikes'></cms:pages>

      This example would fetch pages cloned from blog.php and belonging to folders named 'classic-bikes' or 'super-bikes'.

        <cms:pages masterpage='blog.php' folder='NOT classic-bikes, super-bikes'></cms:pages>

      This example would fetch all pages cloned from blog.php except those belonging to folders named 'classic-bikes' or 'super-bikes'.

      By default Couch will only fetch pages that lie DIRECTLY within the given folder(s).
      To include the pages that are within the subfolders of the given folder(s), set the include_subfolders parameter as well.
      See below.

      In the folder-view (see Views), the k_folder_name variable is set to the name of the current folder. It can be used to list the right pages -

        <cms:pages folder=k_folder_name include_subfolders='1'></cms:pages>

      include_subfolders -
        <cms:pages masterpage='blog.php' folder='classic-bikes' include_subfolders='1'></cms:pages>

      This example would fetch all pages cloned from blog.php that belong to 'classic-bikes' or any of its sub-folders.

      This parameter augments the folder parameter given above which only fetches pages that lie DIRECTLY within the given folder(s).

      start_on -
        <cms:pages masterpage='blog.php' start_on='2010-02-01'></cms:pages>

      This example would fetch all pages cloned from blog.php that have been published on or after the 1st of February, 2010.

      stop_before -
        <cms:pages masterpage='blog.php' stop_before='2010-03-01'></cms:pages>

      This example would fetch all pages cloned from blog.php that have been published before the first of March, 2010.

      The parameters start_on and stop_before can be combined to fetch pages published betwen a particular time period. Thus -

        <cms:pages masterpage='blog.php' start_on='2010-02-01' stop_before='2010-03-01'></cms:pages>

      This example would fetch all pages cloned from blog.php that have been published on or after the first of February, 2010 but before the first of March, 2010. (i.e. only during the month of February of 2010)

      In the archive-view (see Views), the k_archive_date and the k_next_archive_date are set to the first day of the archive and the first day of the next archive (month). These can be used to easily fetch pages that belong to only that archive period -

        <cms:pages start_on=k_archive_date stop_before=k_next_archive_date ></cms:pages>

      show_future_entries -
        <cms:pages masterpage='blog.php' show_future_entries='0'></cms:pages>

      This example would fetch only those pages cloned from blog.php that have been published on or before the current date (i.e. skip those pages the publication date of whom fall in the future).

      orderby - The pages fetched can be sorted and ordered according to the following fields -

          publish_date (default)
          page_name
          page_title
          modification_date
          comments_count
          random

      Thus -

        <cms:pages masterpage='blog.php' orderby='page_name'></cms:pages>

      Apart from the three fields mentioned above, any of the custom field defined in the template (i.e. the editable regions contained within the template) may be used for sorting the fetched pages. Thus, for example if the template 'blog.php' has three editable regions - my_blog_text, my_blog_image and my_blog_author, the following snippet -

        <cms:pages masterpage='blog.php' orderby='my_blog_author'></cms:pages>

      will sort the fetched pages by the custom field named 'my_blog_author'.

      IMP. Though any type of editable region can be used as the orderby field, it is the 'text', 'textarea', 'dropdown' and 'radio' types that are best suited for ordering the pages.

      Multiple fields can be used together for sorting e.g.

        <cms:pages masterpage='blog.php' orderby='modification_date, page_name'></cms:pages>

      order -
        <cms:pages masterpage='blog.php' orderby='publish_date' order='desc'></cms:pages>

      This example would fetch all pages cloned from blog.php and arrange them in descending order of 'publish_date'.

      If order parameter is not set, the default value used is 'desc'. Since the default value used for orderby is 'publish_date', the above snippet is equivalent to the following -

        <cms:pages masterpage='blog.php'></cms:pages>

      If multiple fields have been used in the orderby parameter, separate sort orders can be set for each of the orderby field. Thus -

        <cms:pages orderby='my_custom_field_1, my_custom_field_2' order='asc, desc'></cms:pages>

      The above will first sort pages in ascending order of 'my_custom_field_1'. The pages having the same value for 'my_custom_field_1' will then be sorted in descending order of 'my_custom_field_2'.

      custom_field - The editable regions defined for a template can be used to fetch cloned pages that contain certain values within those editable regions (custom fields) -

        <cms:pages masterpage='blog.php' custom_field='my_blog_author=jeffrey'></cms:pages>

      This example would fetch all cloned pages of blog.php where the editable region 'my_blog_author' contained the word 'jeffrey' anywhere within it.

      To fetch those pages where the editable region 'my_blog_author' exactly matches the term 'jeffrey', use '==' instead of '='. Thus -

        <cms:pages masterpage='blog.php' custom_field='my_blog_author==jeffrey'></cms:pages>

        <cms:pages masterpage='blog.php' custom_field='my_blog_author==jeffrey, arthur'></cms:pages>

      This example would fetch all cloned pages of blog.php where the editable region 'my_blog_author' exactly matches either the term 'jeffrey' or 'arthur'.

      Since a comma ',' is being used to separate two values, if any of the values contains a comma
      within itself you'll have to 'escape' the comma by prepending it with a backward slash -
      'my_blog_text=veni, vidi, veci' - contains any of the terms veni, vidi or veci
      'my_blog_text=veni\, vidi\, veci' - contains the phrase 'veni, vidi, veci'.

      Similarly if any of the values contains a single quote ''' or double quote '"', it can be escaped likewise.

        <cms:pages masterpage='blog.php' custom_field='my_blog_author!=jeffrey'></cms:pages>

      This example would fetch all cloned pages of blog.php where the editable region 'my_blog_author' DOES NOT contain the word 'jeffrey' anywhere within it.

        <cms:pages masterpage='blog.php' custom_field='my_blog_author!==jeffrey'></cms:pages>

      This example would fetch all cloned pages of blog.php where the editable region 'my_blog_author' DOES NOT exactly match the term 'jeffrey'.

        <cms:pages masterpage='blog.php' custom_field='my_blog_author!=jeffrey, arthur'></cms:pages>

      This example would fetch all cloned pages of blog.php where the editable region 'my_blog_author' DOES NOT contain the words 'jeffrey' and 'arthur' anywhere within it.

      The above snippet might seem a little counter-intuitive.
      It does not mean fetch all pages that contain neither jeffrey nor arthur. It means fetch only those pages that do not
      have both jeffrey and arthur in the same field.
      For how to fetch pages that contain neither jeffrey nor arthur, use the multiple fields examples given below.

      Multiple custom fields may be combined together with a pipe '|' character (The pipe stands for a boolean AND) -
      The same custom field may be repeated.

        <cms:pages masterpage='blog.php' custom_field='my_blog_author!=jeffrey | my_blog_author!=arthur'></cms:pages>

      This example would fetch all pages that do not contain 'jeffrey' AND do not contain 'arthur' anywhere within 'my_blog_author' (i.e. have neither jeffrey nor arthur).

        <cms:pages masterpage='blog.php' custom_field='my_blog_author=jeffrey | my_blog_author=arthur'></cms:pages>

      This example would fetch all pages that contain 'jeffery' AND contain 'arthur' somewhere within 'my_blog_author' (i.e. contain both jeffery as well as arthur).

        <cms:pages masterpage='blog.php' custom_field='my_blog_author=jeffrey | my_blog_text=fellow countrymen'></cms:pages>

      This example would fetch all pages that contain 'jeffery' within 'my_blog_author' AND contain 'fellow countrymen' within 'my_blog_text'

      Custom fields can also be used for comparisions other than the equality and non-equality described above.
      For example, we can fetch pages that have the value of a certain editable region 'greater than' or 'less than' a particular value.

      Please bear in mind that if an editable region will contain values that you plan to compare in this manner
      (i.e. test whether the value is greater or less than some value), most probably the value will be a 'number' -
      age < 35
      salary > 12500
      distance >= 23.56
      price = 355.39

      Telephone number, though it might contain all numeric values, is not a 'number' because you are unlikely to do something like -
      telephone_number < 234567878

      For all such cases where the values will be numbers and you'd want to use them in the custom_field parameter, MAKE SURE to set the search_type parameter of the editable regions to either 'integer' (for values that will not be fractional e.g. number of bathrooms) or 'decimal' (for values that can be fractional e.g. price).

      Remember that only editable regions of types 'text', 'radio' and 'dropdown' can be made of 'integer'/'decimal' search_type.

      As an example of numeric fields -

        <cms:pages custom_field='distance<50 | price>=1000000 | price<=3000000'></cms:pages>

      This example would fetch all pages with custom field distance containing a value less than 50
      AND custom field price 'greater than or equal to' 1000000
      AND custom field price 'less than or equal to' 3000000 (i.e. price between 1000000 and 3000000)

      The following comparisions can be done with numeric fields -

          = (equal to)
          != (not equal to)
          <= (less than or equal to)
          >= (greater than or equal to)
          <> (not equal to)
          < (less than)
          > (greater than)

      Variables

      As this tag iterates through all the fetched pages, at each iteration it sets all the variables that one normally finds set when that page is accessed in a page-view (see Variables available in Views).
      Apart from this, several variables are also set that indicate the current status of the loop.
      These variables can be used to show the fetched pages in a paginated manner.


      Variables: k_page_link, k_admin_link, k_site_link, k_admin_path, k_site_path, k_template_title, k_template_name, k_template_id, k_template_link, k_prettyurls, k_site_charset, k_email_from, k_email_to, k_is_commentable.

      Variables available for a non-clonable template: If blog.php is non-clonable, the only way it can be accessed is -
        http://www.mysite.com/blog.php

      - and the available variables are: k_is_list_page, k_comments_count, k_page_date, k_page_modification_date, my_blog_text, my_blog_image, my_blog_author.

      Variables available in a clonable template: If blog.php is made clonable, the different views it can be accessed in and the variables made available in each view are -

      PAGE VIEW: e.g. http://www.mysite.com/blog/some_page_name.html
      In this view, variables giving information about the current page, the containing folder (if the page resides in one) and the contents of the page's editable regions are made available.

      The folowing variables carry information about the page in question:  k_is_page, k_page_title, k_page_name, k_page_id, k_page_date, k_page_modification_date, k_comments_count.

      The following variables carry Information about the folder, if the page resides in one: k_page_folderid, k_page_foldername, k_page_foldertitle, k_page_folderlink, k_page_folderpagecount, k_page_foldertotalpagecount.

      Finally the contents of editable regions: my_blog_text, my_blog_image, my_blog_author.

      FOLDER VIEW: e.g. http://www.mysite.com/blog/some_subfolder/
      In this view, variables giving information about the folder mentioned in the URL are set.

      Variables: k_is_list, k_is_folder, k_folder_id, k_folder_name, k_folder_title, k_folder_link, k_folder_pagecount (Number of pages in the folder), k_folder_totalpagecount (Total number of pages, including pages in subfolders).

      ARCHIVE VIEW: e.g. http://www.mysite.com/blog/2010/05/
      In this view, variables giving information about the archive's time period (as given in the URL) are set.

      Variables: k_is_list, k_is_archive, k_archive_date, k_next_archive_date, k_archive_link, k_day, k_month, k_year.

      HOME VIEW: e.g. http://www.mysite.com/blog/

      Variables: k_is_list, k_is_home, k_folder_pagecount (Number of pages. Remember home view is also the root folder), k_folder_totalpagecount (Total number of cloned pages, including pages in subfolders)


    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/pages.html'
#PAGINATOR
  "<cms:paginator />":
    'prefix':'paginator'
    'body':"paginator ${1:simple='1'} ${2:position='1'} ${3:adjacents='$4'} ${5:prev_text='$6'} ${7:next_text='$8'} />"
    'description': """
      <cms:paginator simple='1' position='0' adjacents='7' prev_text='<-' next_text='->' />

      The paginator tag can be used to quickly create a 'Google' style paginator

      The paginator tag can be used within the pages, comments and search tags. Example -

        <cms:paginator />

      Please see Core Concepts - Pagination for a detailed usage example.

      Parameters: simple, position, adjacents, prev_text, next_text.

      simple - If instead of the Google style paginator, you wish this tag to display a simple 'next' and 'prev' paginator, set this parameter to '1'.
      position

      By default this tag displays the paginator at the bottom after the last record. To make the paginator appear at the top, set this parameter to '1'. The default valie is '0'.

      adjacents - The number of buttons that are always displayed can be changed by this parameter.

      prev_text - The text used in the 'prev' button can be set by this parameter. The default is '« prev' (&#171; prev)

      next_text - The text used in the next' button can be set by this parameter. The default is 'next »' (next &#187;)
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/paginator.html'
#PARENTFOLDERS
  "<cms:parentfolders folder='china' ><a href=\"<cms:show k_folder_link/>\"><cms:show k_folder_title/></a>&nbsp;></cms:parentfolders>":
    'prefix':'parentfolders'
    'body':"""
      parent_folders folder='$1' masterpage=$2>
        ${3:<a href="<cms:show k_folder_link />"> <cms:show k_folder_title /></a>&nbsp;>}
      </cms:parentfolders>$4
    """
    'description': """
      <cms:parentfolders folder='china' >
        <a href="<cms:show k_folder_link/>"><cms:show k_folder_title/></a>&nbsp;>
      </cms:parentfolders>

      The parentfolders tag enumerates all the ancestor folders of a given folder.
      The snippet above will iterate through all the ancestor folders of the folder named 'china', starting from the topmost ancestor.

      Please see Core Concepts - Folders for more info.

      Parameters: folder, masterpage.

      folder - The folder the parents of which are to be enumerated.

      masterpage - The template containing the folder above. If skipped, the template of the current executing page is used.

      Variables: At each iteration, this tag sets variables that describe the parent folder being enumerated.

      Variables: k_folder_id, k_folder_name, k_folder_title, k_folder_desc, k_folder_link, k_folder_pagecount, k_folder_totalpagecount, k_level.

    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/parentfolders.html'
#PAYPAL BUTTON
  "<cms:paypal_button image=\"<cms:show k_site_link />/images/my_button.gif\" />" :
    'prefix':'paypal_button'
    'body':"paypal_button image=\"${1:${2:0}${3:1}${4:2}${5:3}${6:4}${7:5}${8:6}${9:7}${10:8}${11:https://$12}\" ${13:show_shiping='1'} ${14:processor=$15} />"
    'description': """
      <cms:paypal_button image="<cms:show k_site_link />/images/my_button.gif" />

      <cms:paypal_button image='3' />

      Parameters: image, processor, show_shipping.

      image - This parameter is used to set the image used as the button.
      You can either choose to use an image of your own or you may use one of the buttons made available by PayPal.

      Using your own image -

      <cms:paypal_button image="<cms:show k_site_link />/images/my_button.gif" />

      Using PayPal provided images -

      To use these images, set the image parameter to a number ranging from 0 to 8.

      <cms:paypal_button image='3' />

      processor - The generated button provides PayPal with a link to the page that will process the IPN sent by it. By default this will be the link of the page the button is located on. If you have placed the paypal_processor tag, that handles the IPN, on some other page, set that pages link as this parameter.

      show_shipping - If the product being sold is not downloadable and requires a shipping address, set this parameter to '1'. This will make PayPal prompt the buyer for a shipping address.

    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/paypal_button.html'
#PAYPAL PROCESSOR
  "<cms:paypal_processor debug='1' logfile='couch/uploads/file/secure/paypal.log' />":
    'prefix':'paypal_processor'
    'body':"paypal_processor ${1:debug='1'} ${2:logfile='couch/uploads/file/secure/paypal.log'} />"
    'description': """
      <cms:paypal_processor debug='1' logfile='paypal.log' />

      The paypal_processor tag can be used to process PayPal IPN.

      Parameters: debug, logfile.

      debug - The processing of IPN by this tag is a background operation which makes it difficult to know what exactly is going on in case things don't work in the expected manner. By setting this parameter to '1', we can make this tag log into a file (specified by the logfile parameter) every step it takes while processing.

      logfile - The log file into which the steps are to be logged. If this parameter is skipped, a log file named 'log.txt' in your site's root is used (created if not already existing) for logging.
      You can specify a path with the file that is relative to the site's root.

        <cms:paypal_processor debug='1' logfile='paypal.log' />

        <cms:paypal_processor debug='1' logfile='couch/uploads/file/secure/paypal.log' />

      In the last snippet we are saving the log file in a subfolder of Couch which has a .htaccess file protecting its contents from being directly downloaded.

      Variables: PayPal provides values pertaining to the transaction being handled through the IPN. This tag makes available those values by setting variables for each. The following are the variables that give those values -

      Variables: pp_item_name, pp_item_number, pp_quantity, pp_mc_gross, pp_mc_currency, pp_txn_id, pp_receiver_email, pp_payer_email, pp_first_name, pp_last_name, pp_payer_business_name.

      Once this tag verifies that the transaction is valid, it sets an additional variable to notify this -

      Variable: k_paypal_success.

      Apart from this variable, all the variables of the page representing the item being sold, which are normally available in the page's page-view, are also made available.

      If the transaction is deemed invalid, the following variable is set to notify this -

      Variable: k_paypal_error.

    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/paypal_processor.html'
#PHP
  "<cms:php>...php code...</cms:php>":
    'prefix':'php'
    'body':"""
      <cms:php>
        $1
      </cms:php>
      $2
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/php.html'
#PROCESS COMMENT
  "<cms:process_comment />":
    'prefix':'process_comment'
    'body':"<cms:process_comment />$1"
    'description': """
      <cms:if k_is_commentable >
      <div class="comment-form" >
          <h3>Post a comment</h3>

          <cms:form method="post" class="k_form">

              <cms:if k_success >

                  <cms:process_comment />

                  <cms:if k_process_comment_success>
                      <cms:send_mail from=k_email_from to=k_email_to subject='Comment posted'>
                          The following comment has been posted at your site:
                          <cms:show k_success />
                      </cms:send_mail>

                      <div class="k_successmessage">
                          <p>
                              Thank you for the feed back! <br>
                              Your comment awaits moderation and will be published as soon as reviewed by the Admin.
                          </p>
                      </div>
                  <cms:else />
                      <div class="k_errormessage">
                          <p>
                              Could not post comment! <br>
                              The following error occured while processing your comment:<br>
                              <cms:show k_process_comment_error />
                          </p>
                      </div>

                  </cms:if>

              <cms:else />

                  <cms:if k_error >
                      <div class="k_errormessage">
                          <h2>Fields incomplete!</h2>
                          <ul>
                              <cms:each k_error >
                                  <li><cms:show item /></li>
                              </cms:each>
                          </ul>
                      </div>
                  </cms:if>

                  <cms:if k_logged_out >
                      <p class="comment-input">
                          <cms:input type="text" name="k_author" size="22" tabindex="1" required="1"/>
                          <label for="author"><small>Name *</small></label>
                      </p>

                      <p class="comment-input">
                          <cms:input type="text" name="k_email" size="22" tabindex="2" validator="email" required="1"/>
                          <label for="email"><small>Email * (will not be published)</small></label>
                      </p>

                      <p class="comment-input">
                          <cms:input type="text" name="k_link" value="http://" size="22" tabindex="3" />
                          <label for="link"><small>Website</small></label>
                      </p>
                  <cms:else />
                      <p>
                          Logged in as <b><cms:show k_user_title /></b>.
                          <a href="<cms:show k_logout_link />" onclick="if( confirm('Are you sure you want to logout?') ) { return true; } return false;">Logout &raquo;</a>
                      </p>
                  </cms:if>

                  <p class="comment-input">
                      <cms:input type="textarea" name="k_comment" style="width:93%" rows="10" cols="10" tabindex="4"
                          validator_msg="required=Please enter something as comment"
                          required="1" />

                      <br>
                      <small>
                      <cms:html_encode>
                          You can use the following HTML tags: <a><br><strong><b><em><i><blockquote><code><ul><ol><li><del>
                      </cms:html_encode>
                      </small>
                  </p>

                  <cms:if k_logged_out >
                      <p class="comment-input">
                          <label for="captcha"><small>Please enter this word in the textbox below</small></label><br>
                          <cms:input type="captcha" name="captcha" format='i-r-t' />
                      </p>
                  </cms:if>

                  <cms:input type="submit" value="Submit" name="submit"/>

              </cms:if>
          </cms:form>

      </div>
      </cms:if>

      TIP: The above snippet can be saved into a file named, for example, comment-form.inc within the snippets folder and then be used in any template by using the embed tag -

      <cms:embed 'comment-form.inc' />

      The process_comment tag is meant to be used at the successful submission of a comments form.

      It simply tries to insert the submitted comment into the database. If it is successful in inserting the comment, the tag sets the k_process_comment_success variable otherwise it sets the k_process_comment_error variable in the context of its parent tag.


      Variables: This tag is self-closing and does not set any variables of its own except the k_process_comment_success and k_process_comment_error variables that it sets in the context of the calling tag to signal the result of its operation.
    """
#REDIRECT
  "<cms:redirect url=\"<cms:link masterpage=k_template_name page='test' />\" permanently='1' />":
    'prefix':'redirect'
    'body':"redirect url=\"$1\" ${2:permanently='1'} />"
    'description': """
      <cms:redirect url='http://www.google.com/' />

      <cms:redirect url="<cms:link masterpage=k_template_name page='test' />" />

      The redirect tag can be used to redirect the user to a new location.

      In the last example above, the user is being redirected to a page named test that is a cloned page of the same template as the page this code is executed from (the link tag is being used to get the target URL).

      Parameters: url, permanently.

      url - This is the URL of the location being redirected to.

      permanently - By default, the redirect tag causes the server to send back a HTTP 302 redirection code. Setting this parameter to 1 will cause it to send back HTTP 301 (moved permanently) code instead.

        <cms:redirect url="<cms:link masterpage=k_template_name page='test' />" permanently='1' />

    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/redirect.html'
#RELATED PAGES
  "<cms:related_pages 'artist_albums' ><!-- All variables of 'albums.php' are available here --><cms:show k_page_title /><br/></cms:related_pages>":
    'prefix':'related_pages'
    'body':"""
      related_pages  ${1:id='$2'} ${3:page_name='$4'} ${5:limit=$6} ${7:paginate='1'} ${8:offset='$9'} ${10:startcount='$11'} ${12:folder=$13} ${14:include_subfolders='1'} ${15:start_on='$16'} ${17:stop_before='$18'} ${19:show_future_entries='1'} ${20:orderby='$21'} ${22:order='$23'} ${24:custom_field='$25'} ${26:field='$27'}>
        $28
      </cms:related_pages>
    """
    'description': """
      This tag is very closely related to the pages tag and supports all the parameters acceptable to the pages tag

      Parameters: masterpage, id, page_name, limit, paginate, offset, startcount, folder, include_subfolders, start_on, stop_before, show_future_entries, orderby, order, custom_field, field.

      masterpage -
        <cms:related_pages masterpage='blog.php'></cms:related_pages>

      This example would fetch all pages cloned from blog.php.

      If this parameter is skipped, the template being currently executed is used instead. Thus -

        <cms:related_pages></cms:related_pages>

      This example would fetch all pages cloned from the template being currently executed.

      id -
        <cms:related_pages masterpage='blog.php' id='14'></cms:related_pages>

      This example would fetch only page with id of 14 that has been cloned from blog.php.

        <cms:related_pages masterpage='blog.php' id='14, 13'></cms:related_pages>

      This example would fetch only pages with id of 14 or 13 that have been cloned from blog.php.

        <cms:related_pages masterpage='blog.php' id='NOT 14, 13'></cms:related_pages>

      This example would fetch all pages cloned from blog.php except the two with the ids of 14 or 13.

      page_name -
        <cms:related_pages masterpage='blog.php' page_name='my_first_entry'></cms:related_pages>

      This example would fetch the page named 'my_first_entry' that has been cloned from blog.php.

        <cms:related_pages masterpage='blog.php' page_name='my_first_entry, my_another_entry'></cms:related_pages>

      This example would fetch pages named 'my_first_entry' or 'my_another_entry' that have been cloned from blog.php.

        <cms:related_pages masterpage='blog.php' page_name='NOT my_first_entry, my_another_entry'></cms:related_pages>

      This example would fetch all pages cloned from blog.php except the two named 'my_first_entry' or 'my_another_entry'.

      limit -
        <cms:related_pages masterpage='blog.php' limit='5'></cms:related_pages>

      This example would fetch five pages cloned from blog.php. (Since no 'orderby' and 'order' parameters specified, the default values of these parameters will be used and the most recent five pages will be fetched.)

      paginate -
        <cms:related_pages masterpage='blog.php' limit='5' paginate='1'></cms:related_pages>

      This example would fetch ALL pages cloned from blog.php but show only 5 at one time. To move to the next 5 or the previous 5 pages, pagination code has to be used (see Pagination).
      offset

        <cms:related_pages masterpage='blog.php' offset='2'></cms:related_pages>

      This example would fetch pages cloned from blog.php after skipping the first two.

      startcount -
        <cms:related_pages masterpage='blog.php' startcount='0'></cms:related_pages>

      The k_count, k_record_from, k_current_record and k_record_to variables (see Pagination) start by default from '1'. This can be changed to any other value by setting this parameter.

      folder -
        <cms:related_pages masterpage='blog.php' folder='classic-bikes'></cms:related_pages>

      This example would fetch pages cloned from blog.php and belonging to folder named 'classic-bikes'.

        <cms:related_pages masterpage='blog.php' folder='classic-bikes, super-bikes'></cms:related_pages>

      This example would fetch pages cloned from blog.php and belonging to folders named 'classic-bikes' or 'super-bikes'.

        <cms:related_pages masterpage='blog.php' folder='NOT classic-bikes, super-bikes'></cms:related_pages>

      This example would fetch all pages cloned from blog.php except those belonging to folders named 'classic-bikes' or 'super-bikes'.

      By default Couch will only fetch pages that lie DIRECTLY within the given folder(s).
      To include the pages that are within the subfolders of the given folder(s), set the include_subfolders parameter as well.
      See below.

      In the folder-view (see Views), the k_folder_name variable is set to the name of the current folder. It can be used to list the right pages -

        <cms:related_pages folder=k_folder_name include_subfolders='1'></cms:related_pages>

      include_subfolders -
        <cms:related_pages masterpage='blog.php' folder='classic-bikes' include_subfolders='1'></cms:related_pages>

      This example would fetch all pages cloned from blog.php that belong to 'classic-bikes' or any of its sub-folders.

      This parameter augments the folder parameter given above which only fetches pages that lie DIRECTLY within the given folder(s).

      start_on -
        <cms:related_pages masterpage='blog.php' start_on='2010-02-01'></cms:related_pages>

      This example would fetch all pages cloned from blog.php that have been published on or after the 1st of February, 2010.

      stop_before -
        <cms:related_pages masterpage='blog.php' stop_before='2010-03-01'></cms:related_pages>

      This example would fetch all pages cloned from blog.php that have been published before the first of March, 2010.

      The parameters start_on and stop_before can be combined to fetch pages published betwen a particular time period. Thus -

        <cms:related_pages masterpage='blog.php' start_on='2010-02-01' stop_before='2010-03-01'></cms:related_pages>

      This example would fetch all pages cloned from blog.php that have been published on or after the first of February, 2010 but before the first of March, 2010. (i.e. only during the month of February of 2010)

      In the archive-view (see Views), the k_archive_date and the k_next_archive_date are set to the first day of the archive and the first day of the next archive (month). These can be used to easily fetch pages that belong to only that archive period -

        <cms:related_pages start_on=k_archive_date stop_before=k_next_archive_date ></cms:related_pages>

      show_future_entries -
        <cms:related_pages masterpage='blog.php' show_future_entries='0'></cms:related_pages>

      This example would fetch only those pages cloned from blog.php that have been published on or before the current date (i.e. skip those pages the publication date of whom fall in the future).

      orderby - The pages fetched can be sorted and ordered according to the following fields -

          publish_date (default)
          page_name
          page_title
          modification_date
          comments_count
          random

      Thus -

        <cms:related_pages masterpage='blog.php' orderby='page_name'></cms:related_pages>

      Apart from the three fields mentioned above, any of the custom field defined in the template (i.e. the editable regions contained within the template) may be used for sorting the fetched pages. Thus, for example if the template 'blog.php' has three editable regions - my_blog_text, my_blog_image and my_blog_author, the following snippet -

        <cms:related_pages masterpage='blog.php' orderby='my_blog_author'></cms:related_pages>

      will sort the fetched pages by the custom field named 'my_blog_author'.

      IMP. Though any type of editable region can be used as the orderby field, it is the 'text', 'textarea', 'dropdown' and 'radio' types that are best suited for ordering the pages.

      Multiple fields can be used together for sorting e.g.

        <cms:related_pages masterpage='blog.php' orderby='modification_date, page_name'></cms:related_pages>

      order -
        <cms:related_pages masterpage='blog.php' orderby='publish_date' order='desc'></cms:related_pages>

      This example would fetch all pages cloned from blog.php and arrange them in descending order of 'publish_date'.

      If order parameter is not set, the default value used is 'desc'. Since the default value used for orderby is 'publish_date', the above snippet is equivalent to the following -

        <cms:related_pages masterpage='blog.php'></cms:related_pages>

      If multiple fields have been used in the orderby parameter, separate sort orders can be set for each of the orderby field. Thus -

        <cms:related_pages orderby='my_custom_field_1, my_custom_field_2' order='asc, desc'></cms:related_pages>

      The above will first sort pages in ascending order of 'my_custom_field_1'. The pages having the same value for 'my_custom_field_1' will then be sorted in descending order of 'my_custom_field_2'.

      custom_field - The editable regions defined for a template can be used to fetch cloned pages that contain certain values within those editable regions (custom fields) -

        <cms:related_pages masterpage='blog.php' custom_field='my_blog_author=jeffrey'></cms:related_pages>

      This example would fetch all cloned pages of blog.php where the editable region 'my_blog_author' contained the word 'jeffrey' anywhere within it.

      To fetch those pages where the editable region 'my_blog_author' exactly matches the term 'jeffrey', use '==' instead of '='. Thus -

        <cms:related_pages masterpage='blog.php' custom_field='my_blog_author==jeffrey'></cms:related_pages>

        <cms:related_pages masterpage='blog.php' custom_field='my_blog_author==jeffrey, arthur'></cms:related_pages>

      This example would fetch all cloned pages of blog.php where the editable region 'my_blog_author' exactly matches either the term 'jeffrey' or 'arthur'.

      Since a comma ',' is being used to separate two values, if any of the values contains a comma
      within itself you'll have to 'escape' the comma by prepending it with a backward slash -
      'my_blog_text=veni, vidi, veci' - contains any of the terms veni, vidi or veci
      'my_blog_text=veni\, vidi\, veci' - contains the phrase 'veni, vidi, veci'.

      Similarly if any of the values contains a single quote ''' or double quote '"', it can be escaped likewise.

        <cms:related_pages masterpage='blog.php' custom_field='my_blog_author!=jeffrey'></cms:related_pages>

      This example would fetch all cloned pages of blog.php where the editable region 'my_blog_author' DOES NOT contain the word 'jeffrey' anywhere within it.

        <cms:related_pages masterpage='blog.php' custom_field='my_blog_author!==jeffrey'></cms:related_pages>

      This example would fetch all cloned pages of blog.php where the editable region 'my_blog_author' DOES NOT exactly match the term 'jeffrey'.

        <cms:related_pages masterpage='blog.php' custom_field='my_blog_author!=jeffrey, arthur'></cms:related_pages>

      This example would fetch all cloned pages of blog.php where the editable region 'my_blog_author' DOES NOT contain the words 'jeffrey' and 'arthur' anywhere within it.

      The above snippet might seem a little counter-intuitive.
      It does not mean fetch all pages that contain neither jeffrey nor arthur. It means fetch only those pages that do not
      have both jeffrey and arthur in the same field.
      For how to fetch pages that contain neither jeffrey nor arthur, use the multiple fields examples given below.

      Multiple custom fields may be combined together with a pipe '|' character (The pipe stands for a boolean AND) -
      The same custom field may be repeated.

        <cms:related_pages masterpage='blog.php' custom_field='my_blog_author!=jeffrey | my_blog_author!=arthur'></cms:related_pages>

      This example would fetch all pages that do not contain 'jeffrey' AND do not contain 'arthur' anywhere within 'my_blog_author' (i.e. have neither jeffrey nor arthur).

        <cms:related_pages masterpage='blog.php' custom_field='my_blog_author=jeffrey | my_blog_author=arthur'></cms:related_pages>

      This example would fetch all pages that contain 'jeffery' AND contain 'arthur' somewhere within 'my_blog_author' (i.e. contain both jeffery as well as arthur).

        <cms:related_pages masterpage='blog.php' custom_field='my_blog_author=jeffrey | my_blog_text=fellow countrymen'></cms:related_pages>

      This example would fetch all pages that contain 'jeffery' within 'my_blog_author' AND contain 'fellow countrymen' within 'my_blog_text'

      Custom fields can also be used for comparisions other than the equality and non-equality described above.
      For example, we can fetch pages that have the value of a certain editable region 'greater than' or 'less than' a particular value.

      Please bear in mind that if an editable region will contain values that you plan to compare in this manner
      (i.e. test whether the value is greater or less than some value), most probably the value will be a 'number' -
      age < 35
      salary > 12500
      distance >= 23.56
      price = 355.39

      Telephone number, though it might contain all numeric values, is not a 'number' because you are unlikely to do something like -
      telephone_number < 234567878

      For all such cases where the values will be numbers and you'd want to use them in the custom_field parameter, MAKE SURE to set the search_type parameter of the editable regions to either 'integer' (for values that will not be fractional e.g. number of bathrooms) or 'decimal' (for values that can be fractional e.g. price).

      Remember that only editable regions of types 'text', 'radio' and 'dropdown' can be made of 'integer'/'decimal' search_type.

      As an example of numeric fields -

        <cms:related_pages custom_field='distance<50 | price>=1000000 | price<=3000000'></cms:related_pages>

      This example would fetch all pages with custom field distance containing a value less than 50
      AND custom field price 'greater than or equal to' 1000000
      AND custom field price 'less than or equal to' 3000000 (i.e. price between 1000000 and 3000000)

      The following comparisions can be done with numeric fields -

          = (equal to)
          != (not equal to)
          <= (less than or equal to)
          >= (greater than or equal to)
          <> (not equal to)
          < (less than)
          > (greater than)

      Variables

      As this tag iterates through all the fetched pages, at each iteration it sets all the variables that one normally finds set when that page is accessed in a page-view (see Variables available in Views).
      Apart from this, several variables are also set that indicate the current status of the loop.
      These variables can be used to show the fetched pages in a paginated manner.

      field - This parameter specifies the name of the editable region of type relation that is used to create the associations between pages.
      If not specified, the first relation type editable region defined in the template would be used.

      Variables: k_page_link, k_admin_link, k_site_link, k_admin_path, k_site_path, k_template_title, k_template_name, k_template_id, k_template_link, k_prettyurls, k_site_charset, k_email_from, k_email_to, k_is_commentable.

      Variables available for a non-clonable template: If blog.php is non-clonable, the only way it can be accessed is -
        http://www.mysite.com/blog.php

      - and the available variables are: k_is_list_page, k_comments_count, k_page_date, k_page_modification_date, my_blog_text, my_blog_image, my_blog_author.

      Variables available in a clonable template: If blog.php is made clonable, the different views it can be accessed in and the variables made available in each view are -

      PAGE VIEW: e.g. http://www.mysite.com/blog/some_page_name.html
      In this view, variables giving information about the current page, the containing folder (if the page resides in one) and the contents of the page's editable regions are made available.

      The folowing variables carry information about the page in question:  k_is_page, k_page_title, k_page_name, k_page_id, k_page_date, k_page_modification_date, k_comments_count.

      The following variables carry Information about the folder, if the page resides in one: k_page_folderid, k_page_foldername, k_page_foldertitle, k_page_folderlink, k_page_folderpagecount, k_page_foldertotalpagecount.

      Finally the contents of editable regions: my_blog_text, my_blog_image, my_blog_author.

      FOLDER VIEW: e.g. http://www.mysite.com/blog/some_subfolder/
      In this view, variables giving information about the folder mentioned in the URL are set.

      Variables: k_is_list, k_is_folder, k_folder_id, k_folder_name, k_folder_title, k_folder_link, k_folder_pagecount (Number of pages in the folder), k_folder_totalpagecount (Total number of pages, including pages in subfolders).

      ARCHIVE VIEW: e.g. http://www.mysite.com/blog/2010/05/
      In this view, variables giving information about the archive's time period (as given in the URL) are set.

      Variables: k_is_list, k_is_archive, k_archive_date, k_next_archive_date, k_archive_link, k_day, k_month, k_year.

      HOME VIEW: e.g. http://www.mysite.com/blog/

      Variables: k_is_list, k_is_home, k_folder_pagecount (Number of pages. Remember home view is also the root folder), k_folder_totalpagecount (Total number of cloned pages, including pages in subfolders)

      IMP. Notice that for cloneable templates, the contents of the editable regions associated with a page are made available only in page view.

      TIP: You can use the Couch tags - dump and dump_all to see for youself all the variables with their current values.


    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/related_pages.html'
#REPEAT
  "<cms:repeat count='4' >...code to repeat...</cms:repeat>cms:repeat>":
    'prefix':'repeat'
    'body':"""
      repeat count='$1' ${2:startcount='$3'}>
        $4
      </cms:repeat>
      $5
    """
    'description': """
      <TABLE>
        <cms:repeat count='4' >
            <TR>
                <cms:repeat count='6' startcount='1' >
                    <TD>
                        <cms:show k_count />
                    </TD>
                </cms:repeat>
            </TR>
        </cms:repeat>
      </TABLE>

      The repeat tag can be used to unconditionaly repeat all contents contained within its opening and closing tags the number of times specified by its count parameter. This can be used to create HTML tables etc.

      In the example above, we are using the repeat tag twice to create a table with 4 rows each having 6 cells. The startcount parameter is used to make the k_count variable, set by this tag to denote the number of the current iteration, to start from 1 instead of the default 0.

      Parameters: count, startcount

      count - Sets the number of times this tag repeats

      startcount - This tag sets a variable named k_count that increases with each iteration. By default, the first iteration is numbered 0. The startcount parameter can be used to make k_count begin from any arbitrary number.

      Variables: k_count.

      k_count - This variable is increased by one each time the repeat tags repeats the loop. See the startcount parameter above.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/repeat.html'
#REPEATABLE
  "<cms:repeatable name='my_multiple_images' >...editable/s to repeat...</cms:repeatable>cms:repeatable>":
    'prefix':'repeatable'
    'body':"""
      repeatable name='$1'>
        $2
      </cms:repeatable>
      $3
    """
    'description': """
      <cms:repeatable name='my_multiple_images' >
        <cms:editable type='image' name='my_image' label='Photo' />
      </cms:repeatable>

      Parameters: name.

      name - A unique name identifying the repeatable block created by this tag. This parameter is mandatory.

      Variables - This tag does not set any variables of its own.
      To get the values entered into the editable regions enclosed by this block, use show_repeatable tag.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/repeatable.html'
#REVERSE RELATED PAGES
  "<cms:reverse_related_pages 'artist_albums' masterpage='artists.php' ><!-- All variables of 'artists.php' are available here --></cms:reverse_related_pages>":
    'prefix':'reverse_related_pages'
    'body':"""
      reverse_related_pages masterpage=$1 ${2:id='$3'} ${4:page_name='$5'} ${6:limit=$7} ${8:paginate='1'} ${9:offset='$10'} ${11:startcount='$12'} ${13:folder=$14} ${15:include_subfolders='1'} ${16:start_on='$17'} ${18:stop_before='$19'} ${20:show_future_entries='1'} ${21:orderby='$22'} ${23:order='$24'} ${25:custom_field='$26'} ${27:field='$28'}>
        $29
      </cms:reverse_related_pages>
    """
    'description': """
      <cms:reverse_related_pages 'artist_albums' masterpage='artists.php' >
      <!-- All variables of 'artists.php' are available here -->
      <cms:show k_page_title /><br/>
      </cms:reverse_related_pages>

      This tag is very closely related to the pages tag and supports all the parameters acceptable to the pages tag

      Parameters: masterpage, id, page_name, limit, paginate, offset, startcount, folder, include_subfolders, start_on, stop_before, show_future_entries, orderby, order, custom_field, field.

      masterpage - This parameter specifies the template that defines the editable region of type 'relation' specified in the 'field' parameter above.
      This parameter is mandatory.

        <cms:reverse_related_pages masterpage='blog.php'></cms:reverse_related_pages>

      This example would fetch all pages cloned from blog.php.

      If this parameter is skipped, the template being currently executed is used instead. Thus -

        <cms:reverse_related_pages></cms:reverse_related_pages>

      This example would fetch all pages cloned from the template being currently executed.

      id -
        <cms:reverse_related_pages masterpage='blog.php' id='14'></cms:reverse_related_pages>

      This example would fetch only page with id of 14 that has been cloned from blog.php.

        <cms:reverse_related_pages masterpage='blog.php' id='14, 13'></cms:reverse_related_pages>

      This example would fetch only pages with id of 14 or 13 that have been cloned from blog.php.

        <cms:reverse_related_pages masterpage='blog.php' id='NOT 14, 13'></cms:reverse_related_pages>

      This example would fetch all pages cloned from blog.php except the two with the ids of 14 or 13.

      page_name -
        <cms:reverse_related_pages masterpage='blog.php' page_name='my_first_entry'></cms:reverse_related_pages>

      This example would fetch the page named 'my_first_entry' that has been cloned from blog.php.

        <cms:reverse_related_pages masterpage='blog.php' page_name='my_first_entry, my_another_entry'></cms:reverse_related_pages>

      This example would fetch pages named 'my_first_entry' or 'my_another_entry' that have been cloned from blog.php.

        <cms:reverse_related_pages masterpage='blog.php' page_name='NOT my_first_entry, my_another_entry'></cms:reverse_related_pages>

      This example would fetch all pages cloned from blog.php except the two named 'my_first_entry' or 'my_another_entry'.

      limit -
        <cms:reverse_related_pages masterpage='blog.php' limit='5'></cms:reverse_related_pages>

      This example would fetch five pages cloned from blog.php. (Since no 'orderby' and 'order' parameters specified, the default values of these parameters will be used and the most recent five pages will be fetched.)

      paginate -
        <cms:reverse_related_pages masterpage='blog.php' limit='5' paginate='1'></cms:reverse_related_pages>

      This example would fetch ALL pages cloned from blog.php but show only 5 at one time. To move to the next 5 or the previous 5 pages, pagination code has to be used (see Pagination).
      offset

        <cms:reverse_related_pages masterpage='blog.php' offset='2'></cms:reverse_related_pages>

      This example would fetch pages cloned from blog.php after skipping the first two.

      startcount -
        <cms:reverse_related_pages masterpage='blog.php' startcount='0'></cms:reverse_related_pages>

      The k_count, k_record_from, k_current_record and k_record_to variables (see Pagination) start by default from '1'. This can be changed to any other value by setting this parameter.

      folder -
        <cms:reverse_related_pages masterpage='blog.php' folder='classic-bikes'></cms:reverse_related_pages>

      This example would fetch pages cloned from blog.php and belonging to folder named 'classic-bikes'.

        <cms:reverse_related_pages masterpage='blog.php' folder='classic-bikes, super-bikes'></cms:reverse_related_pages>

      This example would fetch pages cloned from blog.php and belonging to folders named 'classic-bikes' or 'super-bikes'.

        <cms:reverse_related_pages masterpage='blog.php' folder='NOT classic-bikes, super-bikes'></cms:reverse_related_pages>

      This example would fetch all pages cloned from blog.php except those belonging to folders named 'classic-bikes' or 'super-bikes'.

      By default Couch will only fetch pages that lie DIRECTLY within the given folder(s).
      To include the pages that are within the subfolders of the given folder(s), set the include_subfolders parameter as well.
      See below.

      In the folder-view (see Views), the k_folder_name variable is set to the name of the current folder. It can be used to list the right pages -

        <cms:reverse_related_pages folder=k_folder_name include_subfolders='1'></cms:reverse_related_pages>

      include_subfolders -
        <cms:reverse_related_pages masterpage='blog.php' folder='classic-bikes' include_subfolders='1'></cms:reverse_related_pages>

      This example would fetch all pages cloned from blog.php that belong to 'classic-bikes' or any of its sub-folders.

      This parameter augments the folder parameter given above which only fetches pages that lie DIRECTLY within the given folder(s).

      start_on -
        <cms:reverse_related_pages masterpage='blog.php' start_on='2010-02-01'></cms:reverse_related_pages>

      This example would fetch all pages cloned from blog.php that have been published on or after the 1st of February, 2010.

      stop_before -
        <cms:reverse_related_pages masterpage='blog.php' stop_before='2010-03-01'></cms:reverse_related_pages>

      This example would fetch all pages cloned from blog.php that have been published before the first of March, 2010.

      The parameters start_on and stop_before can be combined to fetch pages published betwen a particular time period. Thus -

        <cms:reverse_related_pages masterpage='blog.php' start_on='2010-02-01' stop_before='2010-03-01'></cms:reverse_related_pages>

      This example would fetch all pages cloned from blog.php that have been published on or after the first of February, 2010 but before the first of March, 2010. (i.e. only during the month of February of 2010)

      In the archive-view (see Views), the k_archive_date and the k_next_archive_date are set to the first day of the archive and the first day of the next archive (month). These can be used to easily fetch pages that belong to only that archive period -

        <cms:reverse_related_pages start_on=k_archive_date stop_before=k_next_archive_date ></cms:reverse_related_pages>

      show_future_entries -
        <cms:reverse_related_pages masterpage='blog.php' show_future_entries='0'></cms:reverse_related_pages>

      This example would fetch only those pages cloned from blog.php that have been published on or before the current date (i.e. skip those pages the publication date of whom fall in the future).

      orderby - The pages fetched can be sorted and ordered according to the following fields -

          publish_date (default)
          page_name
          page_title
          modification_date
          comments_count
          random

      Thus -

        <cms:reverse_related_pages masterpage='blog.php' orderby='page_name'></cms:reverse_related_pages>

      Apart from the three fields mentioned above, any of the custom field defined in the template (i.e. the editable regions contained within the template) may be used for sorting the fetched pages. Thus, for example if the template 'blog.php' has three editable regions - my_blog_text, my_blog_image and my_blog_author, the following snippet -

        <cms:reverse_related_pages masterpage='blog.php' orderby='my_blog_author'></cms:reverse_related_pages>

      will sort the fetched pages by the custom field named 'my_blog_author'.

      IMP. Though any type of editable region can be used as the orderby field, it is the 'text', 'textarea', 'dropdown' and 'radio' types that are best suited for ordering the pages.

      Multiple fields can be used together for sorting e.g.

        <cms:reverse_related_pages masterpage='blog.php' orderby='modification_date, page_name'></cms:reverse_related_pages>

      order -
        <cms:reverse_related_pages masterpage='blog.php' orderby='publish_date' order='desc'></cms:reverse_related_pages>

      This example would fetch all pages cloned from blog.php and arrange them in descending order of 'publish_date'.

      If order parameter is not set, the default value used is 'desc'. Since the default value used for orderby is 'publish_date', the above snippet is equivalent to the following -

        <cms:reverse_related_pages masterpage='blog.php'></cms:reverse_related_pages>

      If multiple fields have been used in the orderby parameter, separate sort orders can be set for each of the orderby field. Thus -

        <cms:reverse_related_pages orderby='my_custom_field_1, my_custom_field_2' order='asc, desc'></cms:reverse_related_pages>

      The above will first sort pages in ascending order of 'my_custom_field_1'. The pages having the same value for 'my_custom_field_1' will then be sorted in descending order of 'my_custom_field_2'.

      custom_field - The editable regions defined for a template can be used to fetch cloned pages that contain certain values within those editable regions (custom fields) -

        <cms:reverse_related_pages masterpage='blog.php' custom_field='my_blog_author=jeffrey'></cms:reverse_related_pages>

      This example would fetch all cloned pages of blog.php where the editable region 'my_blog_author' contained the word 'jeffrey' anywhere within it.

      To fetch those pages where the editable region 'my_blog_author' exactly matches the term 'jeffrey', use '==' instead of '='. Thus -

        <cms:reverse_related_pages masterpage='blog.php' custom_field='my_blog_author==jeffrey'></cms:reverse_related_pages>

        <cms:reverse_related_pages masterpage='blog.php' custom_field='my_blog_author==jeffrey, arthur'></cms:reverse_related_pages>

      This example would fetch all cloned pages of blog.php where the editable region 'my_blog_author' exactly matches either the term 'jeffrey' or 'arthur'.

      Since a comma ',' is being used to separate two values, if any of the values contains a comma
      within itself you'll have to 'escape' the comma by prepending it with a backward slash -
      'my_blog_text=veni, vidi, veci' - contains any of the terms veni, vidi or veci
      'my_blog_text=veni\, vidi\, veci' - contains the phrase 'veni, vidi, veci'.

      Similarly if any of the values contains a single quote ''' or double quote '"', it can be escaped likewise.

        <cms:reverse_related_pages masterpage='blog.php' custom_field='my_blog_author!=jeffrey'></cms:reverse_related_pages>

      This example would fetch all cloned pages of blog.php where the editable region 'my_blog_author' DOES NOT contain the word 'jeffrey' anywhere within it.

        <cms:reverse_related_pages masterpage='blog.php' custom_field='my_blog_author!==jeffrey'></cms:reverse_related_pages>

      This example would fetch all cloned pages of blog.php where the editable region 'my_blog_author' DOES NOT exactly match the term 'jeffrey'.

        <cms:reverse_related_pages masterpage='blog.php' custom_field='my_blog_author!=jeffrey, arthur'></cms:reverse_related_pages>

      This example would fetch all cloned pages of blog.php where the editable region 'my_blog_author' DOES NOT contain the words 'jeffrey' and 'arthur' anywhere within it.

      The above snippet might seem a little counter-intuitive.
      It does not mean fetch all pages that contain neither jeffrey nor arthur. It means fetch only those pages that do not
      have both jeffrey and arthur in the same field.
      For how to fetch pages that contain neither jeffrey nor arthur, use the multiple fields examples given below.

      Multiple custom fields may be combined together with a pipe '|' character (The pipe stands for a boolean AND) -
      The same custom field may be repeated.

        <cms:reverse_related_pages masterpage='blog.php' custom_field='my_blog_author!=jeffrey | my_blog_author!=arthur'></cms:reverse_related_pages>

      This example would fetch all pages that do not contain 'jeffrey' AND do not contain 'arthur' anywhere within 'my_blog_author' (i.e. have neither jeffrey nor arthur).

        <cms:reverse_related_pages masterpage='blog.php' custom_field='my_blog_author=jeffrey | my_blog_author=arthur'></cms:reverse_related_pages>

      This example would fetch all pages that contain 'jeffery' AND contain 'arthur' somewhere within 'my_blog_author' (i.e. contain both jeffery as well as arthur).

        <cms:reverse_related_pages masterpage='blog.php' custom_field='my_blog_author=jeffrey | my_blog_text=fellow countrymen'></cms:reverse_related_pages>

      This example would fetch all pages that contain 'jeffery' within 'my_blog_author' AND contain 'fellow countrymen' within 'my_blog_text'

      Custom fields can also be used for comparisions other than the equality and non-equality described above.
      For example, we can fetch pages that have the value of a certain editable region 'greater than' or 'less than' a particular value.

      Please bear in mind that if an editable region will contain values that you plan to compare in this manner
      (i.e. test whether the value is greater or less than some value), most probably the value will be a 'number' -
      age < 35
      salary > 12500
      distance >= 23.56
      price = 355.39

      Telephone number, though it might contain all numeric values, is not a 'number' because you are unlikely to do something like -
      telephone_number < 234567878

      For all such cases where the values will be numbers and you'd want to use them in the custom_field parameter, MAKE SURE to set the search_type parameter of the editable regions to either 'integer' (for values that will not be fractional e.g. number of bathrooms) or 'decimal' (for values that can be fractional e.g. price).

      Remember that only editable regions of types 'text', 'radio' and 'dropdown' can be made of 'integer'/'decimal' search_type.

      As an example of numeric fields -

        <cms:reverse_related_pages custom_field='distance<50 | price>=1000000 | price<=3000000'></cms:reverse_related_pages>

      This example would fetch all pages with custom field distance containing a value less than 50
      AND custom field price 'greater than or equal to' 1000000
      AND custom field price 'less than or equal to' 3000000 (i.e. price between 1000000 and 3000000)

      The following comparisions can be done with numeric fields -

          = (equal to)
          != (not equal to)
          <= (less than or equal to)
          >= (greater than or equal to)
          <> (not equal to)
          < (less than)
          > (greater than)

      Variables

      As this tag iterates through all the fetched pages, at each iteration it sets all the variables that one normally finds set when that page is accessed in a page-view (see Variables available in Views).
      Apart from this, several variables are also set that indicate the current status of the loop.
      These variables can be used to show the fetched pages in a paginated manner.

      field - This parameter specifies the name of the editable region of type relation that is used to create the associations between pages.
      If not specified, the first relation type editable region defined in the template would be used.

      Variables: k_page_link, k_admin_link, k_site_link, k_admin_path, k_site_path, k_template_title, k_template_name, k_template_id, k_template_link, k_prettyurls, k_site_charset, k_email_from, k_email_to, k_is_commentable.

      Variables available for a non-clonable template: If blog.php is non-clonable, the only way it can be accessed is -
        http://www.mysite.com/blog.php

      - and the available variables are: k_is_list_page, k_comments_count, k_page_date, k_page_modification_date, my_blog_text, my_blog_image, my_blog_author.

      Variables available in a clonable template: If blog.php is made clonable, the different views it can be accessed in and the variables made available in each view are -

      PAGE VIEW: e.g. http://www.mysite.com/blog/some_page_name.html
      In this view, variables giving information about the current page, the containing folder (if the page resides in one) and the contents of the page's editable regions are made available.

      The folowing variables carry information about the page in question:  k_is_page, k_page_title, k_page_name, k_page_id, k_page_date, k_page_modification_date, k_comments_count.

      The following variables carry Information about the folder, if the page resides in one: k_page_folderid, k_page_foldername, k_page_foldertitle, k_page_folderlink, k_page_folderpagecount, k_page_foldertotalpagecount.

      Finally the contents of editable regions: my_blog_text, my_blog_image, my_blog_author.

      FOLDER VIEW: e.g. http://www.mysite.com/blog/some_subfolder/
      In this view, variables giving information about the folder mentioned in the URL are set.

      Variables: k_is_list, k_is_folder, k_folder_id, k_folder_name, k_folder_title, k_folder_link, k_folder_pagecount (Number of pages in the folder), k_folder_totalpagecount (Total number of pages, including pages in subfolders).

      ARCHIVE VIEW: e.g. http://www.mysite.com/blog/2010/05/
      In this view, variables giving information about the archive's time period (as given in the URL) are set.

      Variables: k_is_list, k_is_archive, k_archive_date, k_next_archive_date, k_archive_link, k_day, k_month, k_year.

      HOME VIEW: e.g. http://www.mysite.com/blog/

      Variables: k_is_list, k_is_home, k_folder_pagecount (Number of pages. Remember home view is also the root folder), k_folder_totalpagecount (Total number of cloned pages, including pages in subfolders)

      IMP. Notice that for cloneable templates, the contents of the editable regions associated with a page are made available only in page view.

      TIP: You can use the Couch tags - dump and dump_all to see for youself all the variables with their current values.


    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/reverse_related_pages.html'
#SEARCH
  "<cms:search masterpage='news.php' >..</cms:search>":
    'prefix':'search'
    'body':"""search masterpage=$1 ${2:keywords="<cms:gpc '$3' />"} ${4:limit='$5'}>
      ${6:<h3><a href="<cms:show k_page_link />"><cms:show k_search_title /></a></h3>
    <cms:show k_search_excerpt />}
    </cms:search>
    $7
    """
    'description': """
      <cms:search masterpage='blog.php' limit='10' keywords="<cms:gpc 's' />" >
        <h3><a href="<cms:show k_page_link />"><cms:show k_search_title /></a></h3>
        <cms:show k_search_excerpt />
      </cms:search>

      Parameters: keywords, masterpage, limit.

      keywords - This parameter can set to the terms to be searched. If skipped, the search tag will look for a GET parameter named 's' in the querystring for the search terms.

      masterpage - Normally pages of all available templates will be searched for the specified terms. You can set this parameter to limit he search to only some of the templates or to exclude certain templates from the search.

        <cms:search masterpage='news.php' >..</cms:search>

      This example would search only pages of news.php.

        <cms:search masterpage='news.php, blog.php' >..</cms:search>

      This example would search only pages of news.php and blog.php.

        <cms:search masterpage='NOT news.php' >..</cms:search>

      This example would search pages of all templates except news.php.
      limit

      Limit parameter can be set to display only a limited number of pages that were found. The rest of the pages can be displayed in a paginated manner (See Pagination).
      Variables

      For each page found, all the variables normally available in its page-view will be available. Apart from these, the following variables are also made available -

          k_search_title
          k_search_content
          k_search_excerpt
          k_search_query

    """

    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/search.html'
#SEARCH FORM
  "<cms:search_form />":
    'prefix':'search_form'
    'body':"search_form ${1:msg='$2'} ${3:processor=\"${4:<cms:show k_site_link />search.php}\"} />$5"
    'description': """
      <cms:search_form msg='Search' processor="<cms:show k_site_link/>search.php" />

      The search_form is a simple tag that creates a form that could be used with the search tag.

      Parameters: msg, processor.

      msg - This parameter sets the message displayed within the search textbox. By default the string 'Search..' gets displayed.

      processor - This parameter sets the action parameter of the generated form. This needs to be set to the URL of the page that has the pages tag on it.

      If left empty, the pages tag is expected to be on the same page as the search_form tag.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/search_form.html'
#SEND MAIL
  "<cms:send_mail from='admin@mysite.com' to='johndoe@gmail.com' subject='Feedback from your site'>Anything here (between the opening and closing tags of send_mail) will form the body of the email that will be sent.</cms:send_mail>":
    'prefix':'send_mail'
    'body':"""
      send_mail from='$1' to='$2' subject='$3' ${4:cc='$5'} ${6:bcc='$7'} ${8:debug='1'} ${9:logfile='$10'} ${11:html='1'}>
        $
      </cms:send_mail>
      $
    """
    'description': """
      <cms:send_mail from='admin@mysite.com' to='johndoe@gmail.com' subject='Feedback from your site'>
        Anything here (between the opening and closing tags of send_mail)
      will form the body of the email that will be sent.
      </cms:send_mail>

      The send_mail tag, as the name suggests, can be used to send emails.

      Anything enclosed within the opening and closing tags will form the body of the message to be sent.
      Each line should be separated with a LF (\n). Lines should not be larger than 70 characters.

      There is no provision (yet) for attachments.

      Parameters: from, to, cc, bcc, subject, debug, logfile, html.

      from - Sender's email address.

      to - Receiver, or receivers of the mail.

      The formatting of this string must comply with » RFC 2822. Some examples are:

      user@example.com
      user@example.com, anotheruser@example.com
      User <user@example.com>
      User <user@example.com>, Another User <anotheruser@example.com>

      cc - Carbon copy receivers.

      bcc - Blind carbon copy receivers.

      subject - Subject of the email.

      debug - If set to '1', all send emails will be logged. The file used for logging can be set by the logfile parameter below.

      logfile - This can be set to the log file used to save all send emails. The file can be given a path relative to the site's root. If skipped, a log file named 'log.txt' in the site's root will be used (will be created if not present).

      html - If set to '1', HTML will be allowed in the body of the message.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/send_mail.html'
#SET
  "<cms:set greeting=\"Hello\" />":
    'prefix':'set'
    'body':"set $1=$2 />"
    'description': """
      <cms:set message="<cms:show greeting /> World" />

      The Set tag is used to put some value in a variable. The variable, if not already present, is created.
      (This tag is the counterpart of Show tag which is used to display set variables)

      The following example will create a variable called 'greeting' and set its value to 'Hello'

        <cms:set greeting='Hello' />

      The following will create another variable known as 'message' and set its value to 'Hello'

      <cms:set message=greeting />

      As with all other tags, nested tags may be used in parameters (taking care to use double quotes).
      The following will set the value of 'message' to 'Hello World'.

        <cms:set message="<cms:show greeting /> World" />

      A valid variable name starts with a letter or underscore, followed by any number of letters, numbers, or underscores.

      IMP. Set cannot be used to set system variables (i.e. those that begin with prefix 'k_').
      Parameters

      The first parameter, as illustrated above, is mandatory and is used to set a named variable to a certain value.
      The tag also uses an optional unnamed (i.e. only the value can be provided) second parameter that defines the scope within which the variable will be set.

        <cms:set message='hello' scope='global' />

      The above is the same as

        <cms:set message='hello' 'global' />

      Here 'global' defines the scope of 'message' variable

      The valid values for this second parameter are: local, parent, global.

    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/set.html'
#SET COOKIE
  "<cms:set_cookie 'my_test_cookie' 'hello world' />":
    'prefix':'set_cookie'
    'body':"set_cookie name='$1' value='$2' expire='${3:86400}' />"
    'description': """
      <cms:set_cookie 'my_test_cookie' 'hello world' />

      <cms:set_cookie name='my_test_cookie' value='hello world' />

      The set_cookie tag can be used to set a cookie with a name and value. An expiration time can also be set for the cookie.

      Parameters: name, value, expire.

      name - The name of the cookie.

      value - The value of the cookie. This value is stored on the clients computer.

      expire - The time in seconds for the cookie to expire. If set to 0, or omitted, the cookie will expire at the end of the session (when the browser closes).

        <cms:set_cookie 'my_test_cookie' value='hello world' expire='86400' />

      The code above will set the expiration time of the cookie to 1 day (24 * 60 * 60).
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/set_cookie.html'
#SHOW
  "<cms:show 'Hello World' />":
    'prefix':'show'
    'body':"show $1 />"
    'description': """
      The Show tag is used to display something on the page.
      It could be a literal string e.g.
        <cms:show 'Hello World' />
      or a variable (both system variables as well as all the editable regions on the page) e.g.
        <cms:show k_page_title />
        <cms:show my_intro />
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/show.html'
#SHOW REPEATABLE
  "<cms:show_repeatable 'my_multiple_images' ><b>Image: <img src=\"<cms:show my_image />\" /><br/><b>Desc:</b><cms:show my_desc /><hr></cms:show_repeatable>":
    'prefix':'show_repeatable'
    'body':"""
      show_repeatable '$1' ${2:startcount='$3'}>
        $4
      </cms:show_repeatable>
      $5
    """
    'description': """
      <cms:show_repeatable 'my_multiple_images' >
         <b>Image: <img src="<cms:show my_image />" /> <br/>
         <b>Desc:</b> <cms:show my_desc />
         <hr>
      </cms:show_repeatable>

      Parameters:var (default), startcount.

      var - Default parameter (usually left unnamed). The name of the repeatable tag defining the repeatable regions.

        <cms:show_repeatable 'my_multiple_images' >
          <b>Image: <img src="<cms:show my_image />" /> <br/>
          <b>Desc:</b> <cms:show my_desc />
          <hr>
        </cms:show_repeatable>

      In the snippet above the string 'my_multiple_images' is the name of a repeatable tag.

      startcount - One of the variables set by this tag is k_count. The value of this variable increases with each iteration. By default, the first iteration is numbered 1. The startcount parameter can be used to make k_count begin from any arbitrary number.

      Variables: k_count, k_total_records.

      k_count - As this tag iterates through the rows of repeated regions, this variable keeps track of the number of current iteration.
      By default, the first iteration is numbered from '1' but the startcount parameter mentioned above can be used to change this.

      k_total_records - The total number of rows that will be iterated.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/show_repeatable.html'
#SUB
  "<cms:sub my_count '1' />":
    'prefix':'sub'
    'body':"sub $1 '$2' />"
    'description': """
      <cms:sub my_count '1' />

      The sub tag accepts two parameters and returns as its output the value obtained after subtracting the second parameter from the first.

      The parameters may be literal strings, variables or output of other tags.

      <cms:sub my_count '1' />

      The snippet above subtracts 1 from what ever value is contained within my_count variable and outputs the resulting value.

      Parameters: The tag expects two parameters as operands for subtraction.

    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/sub.html'

#TEMPLATE
  "<cms:template>...editables and folders...</cms:template>":
    'prefix':'template'
    'body':"""
      template title='$1' ${2:clonable='1'} ${3:access_level='$4'} ${5:executable='1'} ${6:commentable='1'} ${7:hidden='1'} ${8:order='$9'}>
        $10
      </cms:template>
    """
    'description': """
      <cms:template title='index' clonable='1'>
        <cms:editable type='text' name='example' />
        <cms:folder name='news' title='News' />
      </cms:template>

      The template tag can be used to modify the attributes of the template this tag is used on.
      It is customary to place this tag somewhere at the beginning of a template. This tag outputs nothing and this makes it a good place to put the structural Couch tags, like editable and folders, within it.

      Parameters: title, clonable, access_level, executable, commentable, hidden, order.

      title - This parameter is used to set the display name of the template in Couch admin panel. If this parameter is skipped, the name of the template (will have the .php extension) is used instead.

      clonable - This parameter needs to be set to '1' in order to declare a template clonable i.e. allow multiple pages to be cloned out of it.

      access_level - This parameter can be set to restrict the access to the template and all its cloned pages to users of certain access level. For details, please see 'Template level access' in Users and Access Control.

      executable - If this parameter is set to '0', non-super-admin users will be unable to access the template and all its cloned pages via their URLs. This is usually done when a template is used only to define editable regions that will be used to capture data in the admin panel. The captured data is then usually displayed on other templates by the use of either pages tag or get_custom_field tag.

      commentable - To allow users to comment on pages of this template, this parameter has to be set to '1'. See Comments.

      hidden - Certain templates, like the ones used for RSS feeds and custom 404 page, might not contain any editable regions at all. Since there is nothing that the non-super-admins are supposed to enter in these templates as data, it is advisable to hide the names of such templates from them in the admin panel. This can be done by setting this parameter to '1'.

      order - By default, all the templates defined for a web site are displayed in the admin panel in the order of their creation, the oldest one being on the top. This order can be manipulated by setting this parameter for each template. The smaller the number set as the order, the higher up the template appears in the list.
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/template.html'
#TEMPLATES
  "<cms:templates show_hidden='1' order='desc'><cms:dump /></cms:templates>":
    'prefix':'templates'
    'body':"""
      templates ${1:show_hidden='1'} ${2:orderby='$3'} ${4:order='$5'}>
        ${6:<cms:dump />}
      </cms:templates>
      $7
    """
    'description': """
      <cms:templates show_hidden='1' order='desc'>
        <cms:dump />
      </cms:templates>

      The templates tag can be used to enumerate all the templates that are managed by Couch.

      Parameters: show_hidden, orderby, order.

      show_hidden - By default the hidden templates are not enumerated. This can be changed by setting this parameter to 1.

      orderby - The templates can be ordered by one of these attributes - name, title or order. The default is order.

      order - Can be set to either asc or desc.

      Variables: k_total, k_template_id, k_template_name, k_template_title, k_template_desc, k_template_access_level, k_template_is_clonable, k_template_is_commentable, k_template_is_executable, k_template_is_hidden, k_template_order, k_template_link.

    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/templates.html'

#THUMBNAIL
  "<cms:thumbnail src='http://www.mysite.com/couch/uploads/image/test.jpg' width='150' />":
    'prefix':'thumbnail'
    'body':"thumbnail src='$1' width='$2' height='$3' ${4:enforce_max='1'} />"
    'description': """
      <img src="<cms:thumbnail my_image width='150' height='150' enforce_max='1' />" />

      Tag thumbnail can be used as an alternative to editable region of type thumbnail.

      Unlike the editable region, this method is a simple tag and does not create anything to edit within the admin-panel and thus might (in certain situations) prove to be more flexible and dynamic than the former.

      The immediate reason for the introduction of this tag is to use it with repeatable regions as its editable region counterpart does not support being repeated.
      Usage

      Given the full path of an image, as in the following snippet

        <cms:thumbnail src='http://www.mysite.com/couch/uploads/image/test.jpg' width='150' />

      this tag will create a thumbnail of the specified image (in the same folder) and output the thumbnail's path.

      The proper way to use this tag's output in a template would be in tandem with the HTML 'img' tag - something like this

        <img src="<cms:thumbnail src='http://www.mysite.com/couch/uploads/image/test.jpg' width='150' />" />

      Instead of hardcoding the source image's path, as we did above, we are more likely to provide the output of an editable region of type image as this tag's source.

      If, for example, the name of an image type region is 'my_image', this is how we would output the image on the front-end

        <img src="<cms:show my_image />" />

      and this is how we create and output the above image's thumbnail

        <img src="<cms:thumbnail my_image width='150' />" />

      Parameters: src, width, height, enforce_max.

        <img src="<cms:thumbnail my_image width='150' height='150' enforce_max='1' />" />

      These parameters work exactly the same way as the parameters with the same names work for editable region of type thumbnail.

      width & height - Parameters width and height specify the dimensions of the thumbnail.
      If neither width nor height are specified, the resulting thumbnail is of exactly the same dimensions as the associated image.

      Specifying a single dimension only will create a thumbnail with that dimension of the specified value and the other dimension of a value that retains the original proportion of the image. e.g.

        <cms:editable name='my_image_thumb' label='Image Thumbnail' desc='Thumbnail of main image' width='100' show_preview='1' assoc_field='my_image' type='thumbnail' />

        Parent Image (200 x 300) 	Thumbnail (100 x 150) 	Remarks

      The width was made 100px and the height was proportionately scaled to 150px so that the original proportion between the dimensions is retained.

      Specifying both the dimensions will create a thumbnail with each dimension of the specified values. The original proportion between the dimensions is preserved and hence this could lead to cropping off of any dimension that overshoots the specified value in the attempt to retain proportion. e.g.

        <cms:editable name='my_image_thumb' label='Image Thumbnail' desc='Thumbnail of main image' width='100' height='80' show_preview='1' assoc_field='my_image' type='thumbnail' />

      Parent Image (200 x 300) 	Thumbnail (100 x 80) 	Remarks

		  The width was made 100px and the height was proportionately scaled resulting in a dimension of 150px. Since a height of only 80px was asked for, the surplus 70px were cropped off (35px equally from both sides with the two images aligned in the center).

      If both the dimensions are specified and the thumbnail's ratio does not match that of the parent image, the cropping that inevitably occurs can sometimes lead to unacceptable results. In the thumbnail above the most important part of the image has been cropped off. This can be rectified by asking Couch to recreate the thumbnail but this time aligning it to the top of the parent image instead of the default center.


      enforce_max - Setting this parameter will cause Couch to simply scale (instead of cropping as in the example above) the thumbnail, ensuring that none of its two dimensions exceed those specfied by the width and height parameters.

    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/thumbnail.html'
#ZEBRA
  "<cms:zebra 'one' 'two' 'three' /><br>":
    'prefix':'zebra'
    'body':"zebra '$1' '2' ${3:$4} ${5:$6} ${7:$8} ${9:$10} />"
    'description': """
      <cms:repeat count='5'>
        <cms:zebra 'one' 'two' 'three' /><br>
      </cms:repeat>

      The snippet above will output -

        one
        two
        three
        one
        two

      The zebra tag, when used within any Couch tag that repeats its contents (e.g. repeat, while, pages, folders, templates etc.), outputs its first parameter at the first iteration, its second parameter at the second iteration and so on. If the number of iterations exceed the number of its parameters, it wraps around and starts from the first parameter.

      The zebra tag can be used to output a different class to every alternate row of a table, thus creating a 'zebra' striping that gives this tag its name

      A more practical example -

        <TABLE>
          <cms:repeat count='4' >
            <TR class="<cms:zebra 'row' 'alternate_row' />">
              <cms:repeat count='6' startcount='1' >
                <TD>
                  <cms:show k_count />
                </TD>
              </cms:repeat>
            </TR>
          </cms:repeat>
        </TABLE>
      In the snippet above, we are using the repeat tag to create a table. The zebra tag will alternately output 'row' and 'alternate_row' as class names for the table rows. This can be used to color alternate rows differently.

      Parameters: This tag can accept any number of unnamed parameters.

    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/zebra.html'
#EDITABLE TEXT
  "<cms:editable name='prop_title' label='Title' desc='Enter title of property here' type='text'>Awesome property!</cms:editable>":
    'prefix':'editable_text'
    'body':"""
      editable type='text' name='$1' ${2:label='$3'} ${4:desc='$5'} ${6:order='$7'} ${8:group='$9'} ${10:searchable='1'} ${11:search_type='${12:text}'} ${13:hidden='1'} ${14:required='1'} ${15:validator='$16'} ${17:validator_msg='$18'} ${19:seperator='$20'} ${21:val_separator='$22'} ${23:width='$24'} ${25:maxlength='$26'} ${27:search_type='$28'} >
        $29
      </cms:editable>
    """
    'description': """
      <cms:editable name='prop_title'
          label='Title'
          desc='Enter title of property here'
          type='text'>
        Awesome property!
      </cms:editable>

      Editable region of text type is used to allow users to input text when only one line of text is required.
      For this type, Couch creates a single line textbox for data input.

      Any text enclosed between the opening and the closing tags will appear as the default text within the textbox. If you do not wish to have any default text, simply make the Editable tag self-closing e.g.

        <cms:editable name='prop_title' label='Title' desc='Enter title of property here' type='text' />

      The contents of this region can be accessed, as with all other editable regions, by using the variable named after it -

        <cms:show prop_title />

      In addition to the parameters common to all the types of editable regions, text accepts the following parameters

      Parameters: width, maxlength, search_type.

      width - The width of the generated textbox can be changed by setting this parameter. For example, the following will make the textbox 200px wide -

        <cms:editable name='prop_title' label='Title' desc='Enter title of property here' width='200' type='text'>
          Awesome property!
        </cms:editable>

      maxlength - The maximum number of characters that can be inputted by the user in this textbox can be constrained by setting this parameter. For example, the following code will prevent the user from entering more than 40 characters -

        <cms:editable name='prop_title' label='Title' desc='Enter title of property here' maxlength='40' type='text'>
          Awesome property!
        </cms:editable>

      search_type - Can be set to the following valid values -

          text
          integer
          decimal

      The default search_type is (as with all other types of editable regions) text.
      If you wish to use this region to input numeric values (e.g. age or salary), set the type to either integer or decimal (if the value can be fractional).

      It is necessary to set an explicit numeric type on an editable region only when you wish to use the values contained within it to make comparisions (i.e. age < 40) or to sort some output based on these values. See Pages.

      The following are the parameters that are common to all the types of editable regions. The parameters that are specific to individual types are discussed along with that type of editable region.

      Parameters: name, label, desc, type, order, group, searchable, search_type, hidden, required, validator, validator_msg, separator, val_separator.

      name - The only attribute that is mandatory. It needs to be unique amongst all the editable regions within the same template. Only lowercase[a-z] alphabets, numerals[0-9] hyphen and underscore are permitted to be used within a name. For usage see discussion above.

      label - Label instructs Couch to display a more user friendly name than the name attribute above. Unlike name, it has no limitation of the type of characters that can be used within it. If label attribute is not supplied, Couch by default uses the name as the label. For usage see discussion above.

      desc - This can be used to provide the user some more information about the editable region. For usage see discussion above.

      type - text

      order - By default, the order in which the editable regions appear in the Admin panel matches the order in which they have been created. This order can be tweaked by setting the order parameter. For example -

      order='3'

      The higher the order number, the lower the editable region appears on the page (think about it as the higher number being heavier). Thus a region with an order number of '-2' will appear above that with an order number of '0' which in turn will appear higher on the page than a region with an order number of '2'.

      The default order number given to all editable regions is '0'.

      group - Related editable regions can be grouped together by setting the group parameter of each region to the name of an another editable region of type group. For example -

      group='paypal_group'

      - where paypal_group is the name of an editable region of type group.

      searchable -  searchable='0'

      Setting the searchable parameter to '0' for an editable region will exclude its contents from search results.

      search_type - search_type='decimal'

      search_type parameter determines how the values contained within an editable region are sorted and compared. Couch recognizes three different search_types -

          text
          integer
          decimal

      The default search_type of all editable regions is text. For editable regions of type text, radio and dropdown, the search_type can be changed to integer or decimal if the values contained within them would be numeric.

      It is necessary to set an explicit numeric type on an editable region only when you wish to use the values contained within it to make comparisions (i.e. age < 40) or to sort some output based on these values. See Pages.

      hidden - hidden='1'

      hidden parameter can be set to '1' to supress the output of an editable region that has been defined outside the Template tag.

      required - required='1'

      Setting the required parameter to '1' for an editable region will make it mandatory for the user to input something within it. i.e. the region cannot be left empty.

      If an editable region marked as required is left empty, the user is not allowed to save his changes and a default error message gets displayed. You can display your custom error message by setting the validator_msg parameter described below.

      validator - Couch has several built-in validators that can be used to enforce that the user only inputs valid data into an editable region -
      min_len

      validator='min_len=6'

      In the example above the length of the input (i.e. the number of characters in it) cannot be less than 6.
      max_len

      validator='max_len=20'

      In the example above the length of the input (i.e. the number of characters in it) cannot be more than 20.
      exact_len

      validator='exact_len=10'

      In the example above the length of the input (i.e. the number of characters in it) has to be exactly 10. It cannot be less or more than the specified value.
      alpha

      validator='alpha'

      In the example above the only characters allowed in the input would be a to z and A to Z.
      alpha_num

      validator='alpha_num'

      In the example above the only characters allowed in the input would be a to z, A to Z and numbers 0 to 9.
      integer

      validator='integer'

      In the example above only numbers 0 to 9 and the negative sign '-' are allowed. e.g.

      -3, -2, -1, 0, 1, 2, 3

      non_negative_integer

      validator='non_negative_integer'

      In the example above only numbers 0 to 9 are allowed. e.g.

      0, 1, 2, 3

      non_zero_integer

      validator='non_zero_integer'

      In the example above only numbers 1 to 9 are allowed. e.g.

      1, 2, 3

      decimal

      validator='decimal'

      In the example above only numeric values are allowed. e.g.

      -3, -2.5, -2, -1, 0, 0.02, 1, 2, 3.45

      non_negative_decimal

      validator='non_negative_decimal'

      In the example above only non-negative numeric values are allowed. e.g.

      0, 0.02, 1, 2, 3.45

      non_zero_decimal

      validator='non_zero_decimal'

      In the example above only numeric values larger than 0 are allowed. e.g.

      0.02, 1, 2, 3.45

      email

      validator='email'

      In the example above only a valid email address is allowed.
      url

      validator='url'

      In the example above only a valid URL is allowed.
      matches_field

      This is used to ensure that the user has input identical contents into two ediatble regions (e.g. Password and Confirm Password).

      validator='matches_field=my_password'

      In the example above, Couch will allow input only if it matches that in another editable region named my_password.
      regex

      This is a very powerful option and can actually mimic all the validators described above (and much more).
      It requires a little knowledge of Regular Expressions (as understood by PHP), though.

      validator='regex=/(cat|dog)$/i'

      In the silly example, the input is considered valid only if it ends in either cat or dog.

      Multiple validators can be applied together by separating them with a '|' (pipe) character. For example -

      validator='alpha_num | min_len=6 | max_len=14'
      validator_msg

      When a validator mentioned above fails (this includes the required parameter too) and the input is rejected, the changes made by the user are not saved and a default error message is displayed.

      You can display your own custom message instead by setting the validator_msg parameter. For example, the following is a custom message that is displayed when a required region is left empty -

      validator_msg='required=What! You think you can get away with leaving this empty?'

      Multiple messages can be applied together by separating them with a '|' (pipe) character. For example -

      validator_msg='required=Please enter something | min_len=Too short!'
      separator
      val_separator

      The use of '|' (pipe) character as the default separator between validators and validator_msg parameters, as well as the use of '=' (equals-to) before a value, is sometimes not possible if the same characters appear elsewhere within the expression. e.g. in the regex example -

      validator='regex=/(cat|dog)$/i'

      - the pipe character appears within the regular expression itself, thus that validator cannot be combined with any other using a pipe.

      In such cases, the default separator and value separator can be set to any other character using the separator and val_separator parameters. For example -

      separator='#'
      val_separator=':'

      With the separator and the val_separator having changed, the regex validator can now be combined with other validator thus -

      validator='regex:/(cat|dog)$/i # min_len:14'

      The validator_msg will now become -

      validator_msg='required:Please enter something # min_len:Too short!'

      Variables: A variable by the name of the editable region becomes available in the context the region is being used in
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/editable/text.html'

#EDITABLE PASSWORD
  "<cms:editable name='my_password' label='Password' desc='Enter your password' type='password' />":
    'prefix':'editable_password'
    'body':"""
      editable type='password' name='$1' ${2:label='$3'} ${4:desc='$5'} ${6:order='$7'} ${8:group='$9'} ${10:searchable='0'} ${11:hidden='1'} ${12:required='1'} ${13:validator='$14'} ${15:validator_msg='$16'} ${17:seperator='$18'} ${19:val_separator='$20'} ${21:width='$22'} ${23:maxlength='$24'} ${25:search_type='$26'} />
    """
    'description': """
      <cms:editable name='my_password'
          label=Password
          desc='Enter your password here' width:'200'
          type='password'/>

      Editable region of password type is very similar to the text type. As with text type, for this type too Couch creates a single line textbox for data input. The only difference between the two is that anything being typed into an editable region of type password will appear as '*' (asterisks). This makes it suitable for entering passwords.

      An editable region of password type can be defined this way -

        <cms:editable name='my_password' label='Password' desc='Enter your password' type='password'/>

      The code above will result in the following (with some password typed in) -

      The contents of this region can be accessed, as with all other editable regions, by using the variable named after it -

        <cms:show my_password />


      In addition to the parameters common to all the types of editable regions, password accepts the following parameters

      Parameters: width, maxlength.

      width - The width of the generated textbox can be changed by setting this parameter. For example, the following will make the textbox 200px wide -

        <cms:editable name='my_password' label='Password' desc='Enter your password' width='200' type='password' />

      maxlength - The maximum number of characters that can be inputted by the user in this textbox can be constrained by setting this parameter. For example, the following code will prevent the user from entering more than 40 characters -

        <cms:editable name='my_password' label='Password' desc='Enter your password' maxlength='40'  type='password' />


      The following are the parameters that are common to all the types of editable regions. The parameters that are specific to individual types are discussed along with that type of editable region.

      Parameters: name, label, desc, type, order, group, searchable, search_type, hidden, required, validator, validator_msg, separator, val_separator.

      name - The only attribute that is mandatory. It needs to be unique amongst all the editable regions within the same template. Only lowercase[a-z] alphabets, numerals[0-9] hyphen and underscore are permitted to be used within a name. For usage see discussion above.

      label - Label instructs Couch to display a more user friendly name than the name attribute above. Unlike name, it has no limitation of the type of characters that can be used within it. If label attribute is not supplied, Couch by default uses the name as the label. For usage see discussion above.

      desc - This can be used to provide the user some more information about the editable region. For usage see discussion above.

      type - text

      order - By default, the order in which the editable regions appear in the Admin panel matches the order in which they have been created. This order can be tweaked by setting the order parameter. For example -

      order='3'

      The higher the order number, the lower the editable region appears on the page (think about it as the higher number being heavier). Thus a region with an order number of '-2' will appear above that with an order number of '0' which in turn will appear higher on the page than a region with an order number of '2'.

      The default order number given to all editable regions is '0'.

      group - Related editable regions can be grouped together by setting the group parameter of each region to the name of an another editable region of type group. For example -

      group='paypal_group'

      - where paypal_group is the name of an editable region of type group.

      searchable -  searchable='0'

      Setting the searchable parameter to '0' for an editable region will exclude its contents from search results.

      search_type - search_type='decimal'

      search_type parameter determines how the values contained within an editable region are sorted and compared. Couch recognizes three different search_types -

          text
          integer
          decimal

      The default search_type of all editable regions is text. For editable regions of type text, radio and dropdown, the search_type can be changed to integer or decimal if the values contained within them would be numeric.

      It is necessary to set an explicit numeric type on an editable region only when you wish to use the values contained within it to make comparisions (i.e. age < 40) or to sort some output based on these values. See Pages.

      hidden - hidden='1'

      hidden parameter can be set to '1' to supress the output of an editable region that has been defined outside the Template tag.

      required - required='1'

      Setting the required parameter to '1' for an editable region will make it mandatory for the user to input something within it. i.e. the region cannot be left empty.

      If an editable region marked as required is left empty, the user is not allowed to save his changes and a default error message gets displayed. You can display your custom error message by setting the validator_msg parameter described below.

      validator - Couch has several built-in validators that can be used to enforce that the user only inputs valid data into an editable region -
      min_len

      validator='min_len=6'

      In the example above the length of the input (i.e. the number of characters in it) cannot be less than 6.
      max_len

      validator='max_len=20'

      In the example above the length of the input (i.e. the number of characters in it) cannot be more than 20.
      exact_len

      validator='exact_len=10'

      In the example above the length of the input (i.e. the number of characters in it) has to be exactly 10. It cannot be less or more than the specified value.
      alpha

      validator='alpha'

      In the example above the only characters allowed in the input would be a to z and A to Z.
      alpha_num

      validator='alpha_num'

      In the example above the only characters allowed in the input would be a to z, A to Z and numbers 0 to 9.
      integer

      validator='integer'

      In the example above only numbers 0 to 9 and the negative sign '-' are allowed. e.g.

      -3, -2, -1, 0, 1, 2, 3

      non_negative_integer

      validator='non_negative_integer'

      In the example above only numbers 0 to 9 are allowed. e.g.

      0, 1, 2, 3

      non_zero_integer

      validator='non_zero_integer'

      In the example above only numbers 1 to 9 are allowed. e.g.

      1, 2, 3

      decimal

      validator='decimal'

      In the example above only numeric values are allowed. e.g.

      -3, -2.5, -2, -1, 0, 0.02, 1, 2, 3.45

      non_negative_decimal

      validator='non_negative_decimal'

      In the example above only non-negative numeric values are allowed. e.g.

      0, 0.02, 1, 2, 3.45

      non_zero_decimal

      validator='non_zero_decimal'

      In the example above only numeric values larger than 0 are allowed. e.g.

      0.02, 1, 2, 3.45

      email

      validator='email'

      In the example above only a valid email address is allowed.
      url

      validator='url'

      In the example above only a valid URL is allowed.
      matches_field

      This is used to ensure that the user has input identical contents into two ediatble regions (e.g. Password and Confirm Password).

      validator='matches_field=my_password'

      In the example above, Couch will allow input only if it matches that in another editable region named my_password.
      regex

      This is a very powerful option and can actually mimic all the validators described above (and much more).
      It requires a little knowledge of Regular Expressions (as understood by PHP), though.

      validator='regex=/(cat|dog)$/i'

      In the silly example, the input is considered valid only if it ends in either cat or dog.

      Multiple validators can be applied together by separating them with a '|' (pipe) character. For example -

      validator='alpha_num | min_len=6 | max_len=14'
      validator_msg

      When a validator mentioned above fails (this includes the required parameter too) and the input is rejected, the changes made by the user are not saved and a default error message is displayed.

      You can display your own custom message instead by setting the validator_msg parameter. For example, the following is a custom message that is displayed when a required region is left empty -

      validator_msg='required=What! You think you can get away with leaving this empty?'

      Multiple messages can be applied together by separating them with a '|' (pipe) character. For example -

      validator_msg='required=Please enter something | min_len=Too short!'
      separator
      val_separator

      The use of '|' (pipe) character as the default separator between validators and validator_msg parameters, as well as the use of '=' (equals-to) before a value, is sometimes not possible if the same characters appear elsewhere within the expression. e.g. in the regex example -

      validator='regex=/(cat|dog)$/i'

      - the pipe character appears within the regular expression itself, thus that validator cannot be combined with any other using a pipe.

      In such cases, the default separator and value separator can be set to any other character using the separator and val_separator parameters. For example -

      separator='#'
      val_separator=':'

      With the separator and the val_separator having changed, the regex validator can now be combined with other validator thus -

      validator='regex:/(cat|dog)$/i # min_len:14'

      The validator_msg will now become -

      validator_msg='required:Please enter something # min_len:Too short!'

      Variables: A variable by the name of the editable region becomes available in the context the region is being used in
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/editable/password.html'

#EDITABLE TEXTAREA
  "<cms:editable name='prop_desc' label='Description' desc='Enter a description of property here' type='textarea' />":
    'prefix':'editable_textarea'
    'body':"""
      editable type='textarea' name='$1' ${2:label='$3'} ${4:desc='$5'} ${6:order='$7'} ${8:group='$9'} ${10:searchable='1'} ${11:hidden='1'} ${12:required='1'} ${13:validator='$14'} ${15:validator_msg='$16'} ${17:seperator='$18'} ${19:val_separator='$20'} ${21:width='$22'} ${23:height='$24'} ${25:no_xss_check='1'} ${27:search_type='$28'} >
        $30
      </cms:editable>
    """
    'description': """
      <cms:editable name='prop_desc'
          label='Description'
          desc='Enter description of property here' width:'400' height:'200'
          type='textarea'>
        Condo pricing starts at just under $700,000. Waterfront Private Residence. Jack Nicklaus Signature Golf Course.
      </cms:editable>

      Editable region of textarea type is used to allow users to input multiple lines of text. It is suitable for inputting multiple lines of unformatted text (i.e. not requiring HTML tags) although the user can format the text by manually adding HTML tags to the input.
      For this type, Couch creates a multi-line textbox for data input.

      An editable region of textarea type can be defined this way -

        <cms:editable
          name='prop_desc'
          label='Description'
          desc='Enter description of property here'
          type='textarea'>
            Condo pricing starts at just under $700,000. Waterfront Private Residences. Jack Nicklaus
            Signature Golf Course.
        </cms:editable>

      The code above will result in -

      The default type of an editable region is textarea. Hence if the code example given above were to be written without explicitly setting the type parameter, the result would have been just the same. Thus -

        <cms:editable
          name='prop_desc'
          label='Description'
          desc='Enter description of property here'>
            Condo pricing starts at just under $700,000. Waterfront Private Residences. Jack Nicklaus
            Signature Golf Course.
        </cms:editable>

      will result in an identical textbox.

      Any text enclosed between the opening and the closing tags will appear as the default text within the textbox. If you do not wish to have any default text, simply make the Editable tag self-closing e.g.

        <cms:editable name='prop_desc' label='Description' desc='Enter description of property here' />

      The contents of this region can be accessed, as with all other editable regions, by using the variable named after it -

        <cms:show prop_desc />


      In addition to the parameters common to all the types of editable regions, textarea accepts the following parameters

      Parameters: width, height, no_xss_check.

      width & height - The dimensions of the textarea can be changed by setting the width and height parameters. For example, the following will make it 400px wide and 200px high -

        <cms:editable name='prop_desc' label='Description'
            desc='Enter description of property here'
            width='400'
            height='200'
            type='textarea'
        />

      no_xss_check - XSS (Cross Site Scripting) is a type of Web Application vulnerability which is caused by user managing to inject malicious script code into a webpage. Couch, by default, sanitizes all user input and that includes all inputs through all types of editable regions.

      In some cases though, you'll wish to allow your user to input Javascript code, or even script containing Couch tags, into an editable region. This could be, for example, when you have created a textarea type editable region into which the user is supposed to enter his Google AdSense code. In such cases, to instruct Couch to leave the input alone and not to sanitize it, set the no_xss_check to '1'. As an example -

        <cms:editable name='my_adsense' label="Adsense Code" desc="Enter your Adsense code here"
            height='100'
            no_xss_check='1'
            type='textarea'
        />

      Without the no_xss_check explicitly set, Couch would disable all Javascript code contained within the AdSense code and thus make it useless.


      The following are the parameters that are common to all the types of editable regions. The parameters that are specific to individual types are discussed along with that type of editable region.

      Parameters: name, label, desc, type, order, group, searchable, search_type, hidden, required, validator, validator_msg, separator, val_separator.

      name - The only attribute that is mandatory. It needs to be unique amongst all the editable regions within the same template. Only lowercase[a-z] alphabets, numerals[0-9] hyphen and underscore are permitted to be used within a name. For usage see discussion above.

      label - Label instructs Couch to display a more user friendly name than the name attribute above. Unlike name, it has no limitation of the type of characters that can be used within it. If label attribute is not supplied, Couch by default uses the name as the label. For usage see discussion above.

      desc - This can be used to provide the user some more information about the editable region. For usage see discussion above.

      type - text

      order - By default, the order in which the editable regions appear in the Admin panel matches the order in which they have been created. This order can be tweaked by setting the order parameter. For example -

      order='3'

      The higher the order number, the lower the editable region appears on the page (think about it as the higher number being heavier). Thus a region with an order number of '-2' will appear above that with an order number of '0' which in turn will appear higher on the page than a region with an order number of '2'.

      The default order number given to all editable regions is '0'.

      group - Related editable regions can be grouped together by setting the group parameter of each region to the name of an another editable region of type group. For example -

      group='paypal_group'

      - where paypal_group is the name of an editable region of type group.

      searchable -  searchable='0'

      Setting the searchable parameter to '0' for an editable region will exclude its contents from search results.

      search_type - search_type='decimal'

      search_type parameter determines how the values contained within an editable region are sorted and compared. Couch recognizes three different search_types -

          text
          integer
          decimal

      The default search_type of all editable regions is text. For editable regions of type text, radio and dropdown, the search_type can be changed to integer or decimal if the values contained within them would be numeric.

      It is necessary to set an explicit numeric type on an editable region only when you wish to use the values contained within it to make comparisions (i.e. age < 40) or to sort some output based on these values. See Pages.

      hidden - hidden='1'

      hidden parameter can be set to '1' to supress the output of an editable region that has been defined outside the Template tag.

      required - required='1'

      Setting the required parameter to '1' for an editable region will make it mandatory for the user to input something within it. i.e. the region cannot be left empty.

      If an editable region marked as required is left empty, the user is not allowed to save his changes and a default error message gets displayed. You can display your custom error message by setting the validator_msg parameter described below.

      validator - Couch has several built-in validators that can be used to enforce that the user only inputs valid data into an editable region -
      min_len

      validator='min_len=6'

      In the example above the length of the input (i.e. the number of characters in it) cannot be less than 6.
      max_len

      validator='max_len=20'

      In the example above the length of the input (i.e. the number of characters in it) cannot be more than 20.
      exact_len

      validator='exact_len=10'

      In the example above the length of the input (i.e. the number of characters in it) has to be exactly 10. It cannot be less or more than the specified value.
      alpha

      validator='alpha'

      In the example above the only characters allowed in the input would be a to z and A to Z.
      alpha_num

      validator='alpha_num'

      In the example above the only characters allowed in the input would be a to z, A to Z and numbers 0 to 9.
      integer

      validator='integer'

      In the example above only numbers 0 to 9 and the negative sign '-' are allowed. e.g.

      -3, -2, -1, 0, 1, 2, 3

      non_negative_integer

      validator='non_negative_integer'

      In the example above only numbers 0 to 9 are allowed. e.g.

      0, 1, 2, 3

      non_zero_integer

      validator='non_zero_integer'

      In the example above only numbers 1 to 9 are allowed. e.g.

      1, 2, 3

      decimal

      validator='decimal'

      In the example above only numeric values are allowed. e.g.

      -3, -2.5, -2, -1, 0, 0.02, 1, 2, 3.45

      non_negative_decimal

      validator='non_negative_decimal'

      In the example above only non-negative numeric values are allowed. e.g.

      0, 0.02, 1, 2, 3.45

      non_zero_decimal

      validator='non_zero_decimal'

      In the example above only numeric values larger than 0 are allowed. e.g.

      0.02, 1, 2, 3.45

      email

      validator='email'

      In the example above only a valid email address is allowed.
      url

      validator='url'

      In the example above only a valid URL is allowed.
      matches_field

      This is used to ensure that the user has input identical contents into two ediatble regions (e.g. Password and Confirm Password).

      validator='matches_field=my_password'

      In the example above, Couch will allow input only if it matches that in another editable region named my_password.
      regex

      This is a very powerful option and can actually mimic all the validators described above (and much more).
      It requires a little knowledge of Regular Expressions (as understood by PHP), though.

      validator='regex=/(cat|dog)$/i'

      In the silly example, the input is considered valid only if it ends in either cat or dog.

      Multiple validators can be applied together by separating them with a '|' (pipe) character. For example -

      validator='alpha_num | min_len=6 | max_len=14'
      validator_msg

      When a validator mentioned above fails (this includes the required parameter too) and the input is rejected, the changes made by the user are not saved and a default error message is displayed.

      You can display your own custom message instead by setting the validator_msg parameter. For example, the following is a custom message that is displayed when a required region is left empty -

      validator_msg='required=What! You think you can get away with leaving this empty?'

      Multiple messages can be applied together by separating them with a '|' (pipe) character. For example -

      validator_msg='required=Please enter something | min_len=Too short!'
      separator
      val_separator

      The use of '|' (pipe) character as the default separator between validators and validator_msg parameters, as well as the use of '=' (equals-to) before a value, is sometimes not possible if the same characters appear elsewhere within the expression. e.g. in the regex example -

      validator='regex=/(cat|dog)$/i'

      - the pipe character appears within the regular expression itself, thus that validator cannot be combined with any other using a pipe.

      In such cases, the default separator and value separator can be set to any other character using the separator and val_separator parameters. For example -

      separator='#'
      val_separator=':'

      With the separator and the val_separator having changed, the regex validator can now be combined with other validator thus -

      validator='regex:/(cat|dog)$/i # min_len:14'

      The validator_msg will now become -

      validator_msg='required:Please enter something # min_len:Too short!'

      Variables: A variable by the name of the editable region becomes available in the context the region is being used in
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/editable/textarea.html'

#EDITABLE TEXTAREA
  "<cms:editable name='desc' label='Description' desc='Enter description of property here' toolbar='custom' custom_toolbar=\"<cms:embed 'my_toolbar.inc' />\" type='richtext' />":
    'prefix':'editable_richtext'
    'body':"""
      editable type='textarea' name='$1' ${2:label='$3'} ${4:desc='$5'} ${6:order='$7'} ${8:group='$9'} ${10:searchable='1'} ${11:hidden='1'} ${12:required='1'} ${13:validator='$14'} ${15:validator_msg='$16'} ${17:seperator='$18'} ${19:val_separator='$20'} ${21:width='$22'} ${23:height='$24'} ${28:search_type='$29'} ${30:css='$31'} ${32:body_id='$33'} ${34:body_class='$35'} ${36:custom_styles='$37'} ${38:toolbar='${39:full}'} ${40:custom_toolbar='${41:my_toolbar.inc'} >
        $42
      </cms:editable>
    """
    'description': """
      <cms:editable name='desc' label='Description'
      desc='Enter description of property here'
      toolbar='custom'
      custom_toolbar="<cms:embed 'my_toolbar.inc' />"
      type='richtext' />

      Editable region of richtext type is used to allow users to easily input HTML formatted text without manually keying in the HTML tags.
      For this type, Couch creates an instance of a WYSIWYG richtext editor (CKEditor) containing almost all the editing features present in desktop editing applications like MS Word.

      An editable region of richtext type can be defined this way -

      <cms:editable
       name='prop_desc'
       label='Description'
       desc='Enter description of property here'
       type='richtext'>
          Condo pricing starts at just under $700,000. Waterfront Private Residences. Jack Nicklaus
          Signature Golf Course.
      </cms:editable>

      The code above will result in -

      Any text enclosed between the opening and the closing tags will appear as the default text within the editor. If you do not wish to have any default text, simply make the Editable tag self-closing e.g.

        <cms:editable name='prop_desc' label='Description'
             desc='Enter description of property here'
             type='richtext' />

      The contents of this region can be accessed, as with all other editable regions, by using the variable named after it -

        <cms:show prop_desc />

      Opinion is divided about providing a WYSIWYG editor to the end user (some CMS'es going as far as not providing one at all). After all it only takes a few clicks for a user to change the background color of your meticulously designed web-page to shocking red with the fonts set to Comics Sans MS.

      But ask any end user and the first feature he'll judge a CMS by would be the WYSIWYG editor. Not surprising considering the ease that it brings to him in editing his content.

      The problem, in our humble opinion, is not the WYSIWYG editor but the unbridled power that it hands over to the end user. The approach of Couch is to allow the designer/coder to decide how much power is he willing to give to the end user. If the user is supposed to only make the text bold and italic, you can set that only these buttons are available. If you wish to constrain the user into applying to the page elements only a few styles that you have coded, you can make available only those styles to the editor. The parameters discussed below will go into more details.

      In addition to the parameters common to all the types of editable regions, richtext accepts the following parameters

      Parameters: height, width, css, body_id, body_class, custom_styles, toolbar, custom_toolbar.

      height & width

        <cms:editable name='desc' label='Description'
            desc='Enter description of property here'
            height='100'
            width='500'
            type='richtext'/>

      As the name of the parameters, they can be used to set the width and height of the WYSIWYG editor.

      css - If you have used other CMSes that use WYSIWYG editors, you might have noticed that, in most of them, the content being edited in the editor rarely looks like the way it does when displayed on your website. This is because the styles used by your website (most probably from within CSS stylesheets) are different from that used by the editor.

      In order to make the appearance of the content within the editor as similar as possible to what it would look like on the published page, the css parameter can be set to a CSS stylesheet containing matching styles. Sometimes even setting it to the same stylesheet as that of the main site can do the trick. e.g.

        <cms:editable name='desc' label='Description'
            desc='Enter description of property here'
            css='styles/editor_styles.css'
            type='richtext'/>

      If a fully qualified path (URL) is not provided, the path is assumed to be relative to the main site (remember that Couch considers its own parent folder i.e. the folder within which the folder named couch resides, as the main website). Thus in the example above, the editor will try and use a stylesheet named editor_styles.css contained within a folder named styles which itself resides within the main website folder.

      The full URL of the stylesheet can also be used e.g.

        <cms:editable name='desc' label='Description'
            desc='Enter description of property here'
            css='http://www.mysite.com/styles/editor_styles.css'
            type='richtext'/>

      If a URL is specified, the stylesheet need not necessarily be located within your website. It can be anywhere on the Internet. However, if it is situated within your website, the following is the most appropriate way of setting its full path -

        <cms:editable name='desc' label='Description'
            desc='Enter description of property here'
            css="<cms:show k_site_link />styles/editor_styles.css"
            type='richtext'/>

      Multiple stylesheets may also be specified by separating each by a pipe '|' -

      <cms:editable name='desc' label='Description'
          desc='Enter description of property here'
          css="<cms:show k_site_link />styles/editor_styles.css | styles/my_styles.css"
          type='richtext'/>

      body_id & body_class - Parameters body_id and body_class augment the functionality provided by the css parameter discussed above where we try to make the content within the editor look similar to what it would look like on the published webpage .

      Suppose the contents of the WYSIWYG editor will eventually appear on the webpage within a div with an id of prop_desc. Also assume that this div has been styled with CSS statements that refer to it by its id e.g.

        #prop_desc {
            padding:25px;
            background:#fff url(bg-prop.jpg) no-repeat scroll 0 bottom;
            font-size: 13px;
        }

      In this case, to style the contents within the editor with the CSS rules given above, set the css parameter to a stylesheet that contains the statement given above and set the body_id parameter to prop_desc. This way, CSS will treat the WYSIWYG editor as having this id and all the contents within it will be rendered accordingly.

        <cms:editable name='desc' label='Description'
            desc='Enter description of property here'
            css="<cms:show k_site_link />styles/editor_styles.css"
            body_id='prop_desc'
            type='richtext'/>

      Similarly, if the CSS rules are applicable to an element of a certain class, to make the editor take on those rules, set the body_class parameter to that class. Unlike body_id, body_class can be set to multiple classes, each separated by a space. e.g. in the snippet below, the editor will have two classes applied - class1 and class2.

        <cms:editable name='desc' label='Description'
            desc='Enter description of property here'
            css="<cms:show k_site_link />styles/editor_styles.css"
            body_class='class1 class2'
            type='richtext'/>

      custom_styles - The toolbar above the editor contains a drop-down list that allows the user to apply some very generic formats to his content -

      CKEditor provides a method to display your custom styles in a similar drop-down list.

      This is a very powerful technique to give the user access to a set of predefined styles that correspond to the styles used by your website and thus ensure that any formatting that he applies will be in concordance to your design.

      The method that CKEditor provides requires you to create a JavaScript file defining the list elements in a particular (JSON) format. You can see a sample file provided by them here. Even if you do not happen to be conversant with JavaScript, it shouldn't be too difficult to figure out how this sample script works.

      As an example, suppose that the websites stylesheet has certain classes defined that set the background and border to specific colors

        .error      { background: #FBE3E4; color: #8a1f11; border-color: #FBC2C4; }
        .notice     { background: #FFF6BF; color: #514721; border-color: #FFD324; }
        .success    { background: #E6EFC2; color: #264409; border-color: #C6D880; }

      To allow the user easily apply any of these styles to the content while editing, create a file named custom_styles.js (can be named anything) and place the following code within it -

        CKEDITOR.stylesSet.add( 'my_styles',
        [
            { name : 'Normal'    , element : 'p' },
            { name : 'Notice'    , element : 'p', attributes : { 'class' : 'notice' } },
            { name : 'Warning'   , element : 'p', attributes : { 'class' : 'error' } },
            { name : 'Message'   , element : 'p', attributes : { 'class' : 'success' } }
        ]);

      Notice the highlighted part - my_styles. It is a requirement of CKEditor to give a unique name to each set of custom styles that you may use. For this example, we have named it my_styles.

      Next we need to inform CKEditor to use the elements defined in this file to create a drop-down list. Couch makes this part easy. Simply set the custom_styles parameter of the Editable tag in the following manner -

        <cms:editable name='desc' label='Description'
            desc='Enter description of property here'
            custom_styles="my_styles=styles/custom_styles.js"
            type='richtext'/>

      IMP. Notice how we have provided the value of custom_styles in two parts - name given to this set of styles (my_styles) follwed by an equal-to sign and then the path of the JavaScript file (for our example, we assume that it has been saved within styles folder of your website). Absolute path can also be used (see discussion of path in css parameter above).

      The resulting drop-down list -

      Everytime you modify the JavaScript file, you might need to clear your browser's cache to make the editor pickup the changed file.

      toolbar - This parameter can be used to determine which buttons (and hence which actions) become available to the user in the toolbar above the editor. This helps in limiting the amount of freedom that you are prepared to grant the end user.

      This parameter can take one of the following four values

          basic
          medium
          full
          custom

      basic:

        <cms:editable name='desc' label='Description'
            desc='Enter description of property here'
            toolbar='basic'
            type='richtext'/>


      medium:

        <cms:editable name='desc' label='Description'
            desc='Enter description of property here'
            toolbar='medium'
            type='richtext'/>



      Medium is the default value and hence if toolbar parameter is omitted, this is what is used.

      full:

        <cms:editable name='desc' label='Description'
            desc='Enter description of property here'
            toolbar='full'
            type='richtext'/>


      custom:

        <cms:editable name='desc' label='Description'
            desc='Enter description of property here'
            toolbar='custom'
            type='richtext'/>

      If none of the three sets of buttons shown above suits your need, set the toolbar parameter to custom. By doing this you can specify your handpicked buttons and their positions in the toolbar by using the custom_toolbar parameter discussed below.

      custom_toolbar - As mentioned above, this parameter will only take effect when the toolbar parameter has been set to custom.

      You have the following buttons to choose from to display them in the toolbar -

          bold
          italic
          underline
          strike
          subscript
          superscript
          justifyleft
          justifycenter
          justifyright
          justifyblock
          numberedlist
          bulletedlist
          outdent
          indent
          blockquote
          undo
          redo
          removeformat
          cut
          copy
          paste
          pastetext
          pastefromword
          image
          flash
          table
          horizontalrule
          smiley
          specialchar
          pagebreak
          link
          unlink
          anchor
          styles
          format
          font
          fontsize
          textcolor
          bgcolor
          showblocks
          preview
          maximize
          source
          -
          _

      The last two buttons are hyphen and underscore. Both can be used to create a separator between buttons.
      Examples:

      As a very simple (and unrealistic) example, here is a toolbar containing only two buttons (bold and italic) -

        <cms:editable name='desc' label='Description'
            desc='Enter description of property here'
            toolbar='custom'
            custom_toolbar='bold, italic'
            type='richtext'/>

      A more practical example - here is how you can mimic the medium type of toolbar discussed above.

        <cms:editable name='desc' label='Description'
            desc='Enter description of property here'
            toolbar='custom'
            custom_toolbar='bold, italic, underline, strike, -, subscript, superscript |
            format |
            justifyleft, justifycenter, justifyright, justifyblock |
            numberedlist, bulletedlist, -, outdent, indent, blockquote |
            undo, redo, removeformat |
            |
            cut, copy, paste, pastetext, pastefromword |
            image, flash, table, horizontalrule, smiley, specialchar, pagebreak |
            link, unlink, anchor |
            showblocks, preview, maximize, -, source'
            type='richtext' />

      Points to note in the example above -

      A space can be introduced between two buttons by placing a '-' (hyphen) or '_' (underscore) between them while related buttons can be grouped together by placing a '|' (pipe character) between two groups.
      Visually both might appear to be the same but when the toolbar needs to be broken up due to lack of space, buttons in the same group are treated as a unit and are kept together.

      Also note that you can force the toolbar to be break into a new row by specifying '|' twice (i.e. no buttons between two pipes - see how the group begining with the cut button has been forced into a new row).

      TIP - if you find yourself reusing a custom toolbar at many places, instead of repeating the quite large chunk of code everywhere, use the Embed tag. Cut and paste the value of the custom_toolbar parameter (everything between the quotes) and save it in a file named, say, my_toolbar.inc. Instruct the Embed tag to use this file.

        <cms:editable name='desc' label='Description'
              desc='Enter description of property here'
              toolbar='custom'
              custom_toolbar="<cms:embed 'my_toolbar.inc' />"
              type='richtext' />



      The following are the parameters that are common to all the types of editable regions. The parameters that are specific to individual types are discussed along with that type of editable region.

      Parameters: name, label, desc, type, order, group, searchable, search_type, hidden, required, validator, validator_msg, separator, val_separator.

      name - The only attribute that is mandatory. It needs to be unique amongst all the editable regions within the same template. Only lowercase[a-z] alphabets, numerals[0-9] hyphen and underscore are permitted to be used within a name. For usage see discussion above.

      label - Label instructs Couch to display a more user friendly name than the name attribute above. Unlike name, it has no limitation of the type of characters that can be used within it. If label attribute is not supplied, Couch by default uses the name as the label. For usage see discussion above.

      desc - This can be used to provide the user some more information about the editable region. For usage see discussion above.

      type - text

      order - By default, the order in which the editable regions appear in the Admin panel matches the order in which they have been created. This order can be tweaked by setting the order parameter. For example -

      order='3'

      The higher the order number, the lower the editable region appears on the page (think about it as the higher number being heavier). Thus a region with an order number of '-2' will appear above that with an order number of '0' which in turn will appear higher on the page than a region with an order number of '2'.

      The default order number given to all editable regions is '0'.

      group - Related editable regions can be grouped together by setting the group parameter of each region to the name of an another editable region of type group. For example -

      group='paypal_group'

      - where paypal_group is the name of an editable region of type group.

      searchable -  searchable='0'

      Setting the searchable parameter to '0' for an editable region will exclude its contents from search results.

      search_type - search_type='decimal'

      search_type parameter determines how the values contained within an editable region are sorted and compared. Couch recognizes three different search_types -

          text
          integer
          decimal

      The default search_type of all editable regions is text. For editable regions of type text, radio and dropdown, the search_type can be changed to integer or decimal if the values contained within them would be numeric.

      It is necessary to set an explicit numeric type on an editable region only when you wish to use the values contained within it to make comparisions (i.e. age < 40) or to sort some output based on these values. See Pages.

      hidden - hidden='1'

      hidden parameter can be set to '1' to supress the output of an editable region that has been defined outside the Template tag.

      required - required='1'

      Setting the required parameter to '1' for an editable region will make it mandatory for the user to input something within it. i.e. the region cannot be left empty.

      If an editable region marked as required is left empty, the user is not allowed to save his changes and a default error message gets displayed. You can display your custom error message by setting the validator_msg parameter described below.

      validator - Couch has several built-in validators that can be used to enforce that the user only inputs valid data into an editable region -
      min_len

      validator='min_len=6'

      In the example above the length of the input (i.e. the number of characters in it) cannot be less than 6.
      max_len

      validator='max_len=20'

      In the example above the length of the input (i.e. the number of characters in it) cannot be more than 20.
      exact_len

      validator='exact_len=10'

      In the example above the length of the input (i.e. the number of characters in it) has to be exactly 10. It cannot be less or more than the specified value.
      alpha

      validator='alpha'

      In the example above the only characters allowed in the input would be a to z and A to Z.
      alpha_num

      validator='alpha_num'

      In the example above the only characters allowed in the input would be a to z, A to Z and numbers 0 to 9.
      integer

      validator='integer'

      In the example above only numbers 0 to 9 and the negative sign '-' are allowed. e.g.

      -3, -2, -1, 0, 1, 2, 3

      non_negative_integer

      validator='non_negative_integer'

      In the example above only numbers 0 to 9 are allowed. e.g.

      0, 1, 2, 3

      non_zero_integer

      validator='non_zero_integer'

      In the example above only numbers 1 to 9 are allowed. e.g.

      1, 2, 3

      decimal

      validator='decimal'

      In the example above only numeric values are allowed. e.g.

      -3, -2.5, -2, -1, 0, 0.02, 1, 2, 3.45

      non_negative_decimal

      validator='non_negative_decimal'

      In the example above only non-negative numeric values are allowed. e.g.

      0, 0.02, 1, 2, 3.45

      non_zero_decimal

      validator='non_zero_decimal'

      In the example above only numeric values larger than 0 are allowed. e.g.

      0.02, 1, 2, 3.45

      email

      validator='email'

      In the example above only a valid email address is allowed.
      url

      validator='url'

      In the example above only a valid URL is allowed.
      matches_field

      This is used to ensure that the user has input identical contents into two ediatble regions (e.g. Password and Confirm Password).

      validator='matches_field=my_password'

      In the example above, Couch will allow input only if it matches that in another editable region named my_password.
      regex

      This is a very powerful option and can actually mimic all the validators described above (and much more).
      It requires a little knowledge of Regular Expressions (as understood by PHP), though.

      validator='regex=/(cat|dog)$/i'

      In the silly example, the input is considered valid only if it ends in either cat or dog.

      Multiple validators can be applied together by separating them with a '|' (pipe) character. For example -

      validator='alpha_num | min_len=6 | max_len=14'
      validator_msg

      When a validator mentioned above fails (this includes the required parameter too) and the input is rejected, the changes made by the user are not saved and a default error message is displayed.

      You can display your own custom message instead by setting the validator_msg parameter. For example, the following is a custom message that is displayed when a required region is left empty -

      validator_msg='required=What! You think you can get away with leaving this empty?'

      Multiple messages can be applied together by separating them with a '|' (pipe) character. For example -

      validator_msg='required=Please enter something | min_len=Too short!'
      separator
      val_separator

      The use of '|' (pipe) character as the default separator between validators and validator_msg parameters, as well as the use of '=' (equals-to) before a value, is sometimes not possible if the same characters appear elsewhere within the expression. e.g. in the regex example -

      validator='regex=/(cat|dog)$/i'

      - the pipe character appears within the regular expression itself, thus that validator cannot be combined with any other using a pipe.

      In such cases, the default separator and value separator can be set to any other character using the separator and val_separator parameters. For example -

      separator='#'
      val_separator=':'

      With the separator and the val_separator having changed, the regex validator can now be combined with other validator thus -

      validator='regex:/(cat|dog)$/i # min_len:14'

      The validator_msg will now become -

      validator_msg='required:Please enter something # min_len:Too short!'

      Variables: A variable by the name of the editable region becomes available in the context the region is being used in
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/editable/richtext.html'

#EDITABLE IMAGE
  "<cms:editable name='prop_image' label='Image' desc='Upload main image of property' type='image' />":
    'prefix':'editable_image'
    'body':"""
      editable type='image' name='$1' ${2:label='$3'} ${4:desc='$5'} ${6:order='$7'} ${8:group='$9'} ${10:searchable='0'} ${11:hidden='1'} ${12:required='1'} ${13:validator='$14'} ${15:validator_msg='$16'} ${17:seperator='$18'} ${19:val_separator='$20'} ${21:width='$22'}
      ${23:height='$24'} ${25:enforce_max='1'} ${26:crop='1'}
      ${27:quality='$28'} ${29:show_preview='1'} ${30:preview_width='$31'} ${32:preview_height='$33'} ${34:maxlength='$35'} ${36:search_type='$37'} />
    """
    'description': """
      <cms:editable name='prop_image' width='300' height='200' type='image' />

      Editable region of type image is primarily used to allow the user to upload an image from his local computer onto the server. The user can also browse and select any of the previously uploaded images.
      Once an image has been selected, this editable region then holds a fully qualified URL of the uploaded image.

      NOTE: By default, all uploaded images will be saved within the couch/uploads/image folder (or any subfolders created by the user within it). You can set the location to any other folder by uncommenting entry number 12 (K_UPLOAD_DIR) in config.php and changing it to the desired location.

      // 12.
      // Upload folder if not using the default upload folder within 'couch'.
      // Should be relative to your site (don't forget to set write permissions on it).
      define( 'K_UPLOAD_DIR', 'myuploads' );

      An editable region of type image can be defined this way -

        <cms:editable
            name='prop_image'
            label='Image'
            desc='Upload main image of property here'
            type='image'
        />



      Clicking the 'Browse Server' button will bring up a window which can be used to browse previously uploaded images on the server or upload a new image from the local machine.

      The contents of this region can be accessed, as with all other editable regions, by using the variable named after it -

        <img src="<cms:show prop_image />" />

      Apart from the parameters common to all types of editable regions, the regions of image type can take the following parameters -

      Parameters: width, height, enforce_max, crop, quality, show_preview, preview_width, preview_height.

      width & height

        <cms:editable name='prop_image' width='300' height='200' type='image' />

      As mentioned above, when a user uploads an image, Couch saves it in a particular folder on the server. You can ask Couch to ensure that the saved image is of a particular width and height or never exceeds certain width and height.
      These dimensions (in pixels) are represented by the width and height parameter.

      How these dimensions are interpreted by Couch depends on the settings of two other (mutually exclusive) parameters -
      enforce_max and crop.

      NOTE: If none of the two dimensions are specified, e.g.

        <cms:editable name='prop_image' type='image' />

      regardless of any settings of enforce_max and crop, the saved image will always be of exactly the same dimensions as the one uploaded (i.e. not resized at all).

      enforce_max - With enforce_max set to 1 (the default), the width and height parameters are interpreted as being the maximum permitted values of the saved image's width and height.

      If any of the dimensions of an uploaded image exceeds the provided value, Couch resizes the image (preserving the existing proportion between width and height) till that dimension is reduced to the supplied value.

      If both height and width are specified, enforcing the limit of one dimension might end up making the other dimension smaller than what was specified (see examples below).

      By default enforce_max is always on so you do not have to explicitly set it. It can be turned off either by specifically setting it to 0 (enforce_max='0') or by turnng on crop (crop='1').
      Examples:
      Specifying only one dimension

        <cms:editable name='prop_image' label='Image' desc='Upload main image of property here'
            width='150'
            type='image' />

      Uploaded Image (300 x 200) 	Saved Image (150 x 100) 	Remarks
      		The width was constrained to 150px while also decreasing the height proportionately.
      Uploaded Image (200 x 300) 	Saved Image (150 x 225) 	Remarks
      		The width was constrained to 150px while also decreasing the height proportionately.
      Uploaded Image (100 x 75) 	Saved Image (100 x 75) 	Remarks
      		The width was already smaller than the required 150px, hence no changes made to the image.
      Specifying both dimensions

        <cms:editable name='prop_image' label='Image' desc='Upload main image of property here'
            width='150'
            height='150'
            type='image' />

      Uploaded Image (300 x 200) 	Saved Image (150 x 100) 	Remarks
      		The width was constrained to 150px while also decreasing the height proportionately. The resulting height of 100px was smaller than the required 150px hence no further changes were made.
      Uploaded Image (200 x 300) 	Saved Image (100 x 150) 	Remarks
      		The width was constrained to 150px while also decreasing the height proportionately. The resulting height of 225px was larger than the required 150px hence the image was proportionately scaled further till the height became 150px. In doing so the width became smaller than 150px.
      Uploaded Image (100 x 75) 	Saved Image (100 x 75) 	Remarks
      		The width as well as the height were already smaller than the required 150px, hence no changes made to the image.
      SIDENOTE:

      A short discussion is necessary about what happens if enforce_max is explicitly set to '0' instead of implicitly doing it by setting crop - e.g..

        <cms:editable name='prop_image' label='Image' desc='Upload main image of property here'
            width='150'
            height='150'
            enforce_max='0'
            type='image' />

      In such cases, since height and width are no longer enforcing maximum dimensions, these values are interpreted as being the absolute dimensions for the saved image. While resizing the image to these values no effort is made to preserve the existing proportion between original height and width. The new image is simply resized to the given values and thus if the ratio of the new dimensions do not match that of the original ones you'll end up with having a distorted image. Thus -
      Uploaded Image (200 x 300) 	Saved Image (150 x 150) 	Remarks
      		The image was simply resized to a width of 150px and a height of 150px. No attempt was made to mantain proportion and the resulting image is visibily squashed.

      crop - With crop set to 1, the width and height parameters are interpreted as specifying the dimensions using which the uploaded image should be saved.

      If any of the dimensions of an uploaded image is lesser or greater than the value provided as parameters, Couch resizes the image (preserving the existing proportion between width and height) till that dimension is equal to the supplied value.

      If both width and height are specified, very often while matching one dimension the other dimension overshoots the given value. In such cases, the overflowing part of it is cropped.

      By setting this parameter to 1 we also implicitly turn off enforce_max.


      Specifying only one dimension

      <cms:editable name='prop_image' label='Image' desc='Upload main image of property here'
          width='150'
          crop='1'
          type='image' />

      Uploaded Image (300 x 200) 	Saved Image (150 x 100) 	Remarks
      		The required width (150px) is smaller than the actual (300px), hence the width was reduced to 150px while also decreasing the height proportionately. The result is the same as with enforce_max on one dimension.
      Uploaded Image (200 x 300) 	Saved Image (150 x 225) 	Remarks
      		The required width (150px) is smaller than the actual (200px), hence the width was reduced to 150px while also decreasing the height proportionately. The result is the same as with enforce_max on one dimension.
      Uploaded Image (100 x 75) 	Saved Image (150 x 112) 	Remarks
      		The required width (150px) is larger than the actual (100px), hence the width was increased to 150px while also increasing the height proportionately. Note how the result differs from enforce_max on one dimension.
      Specifying both dimensions

        <cms:editable name='prop_image' label='Image' desc='Upload main image of property here'
            width='150'
            height='150'
            crop='1'
            type='image' />

      Uploaded Image (300 x 200) 	Saved Image (150 x 150) 	Remarks
      		The image is proportionately scaled till one of the two dimension is equal to the required value and the other is either equal or larger than the required value. In case the other dimension is larger, the surplus area is cropped off.
      Uploaded Image (200 x 300) 	Saved Image (150 x 150) 	Remarks
      		-same as above-
      Uploaded Image (100 x 75) 	Saved Image (150 x 150) 	Remarks
      		-same as above-

      quality -
         <cms:editable name='prop_image' label='Image' desc='Upload main image of property here'
            width='150'
            quality='50'
            type='image' />

      You can set quality from 0 (worst quality, smaller file) to 100 (best quality, biggest file). The default value is 80.

      show_preview -
        <cms:editable name='prop_image' label='Image' desc='Upload main image of property here'
            show_preview='1'
            type='image' />

      Setting show_preview to '1' makes Couch display a preview of the selected image above the upload control.

      If show_preview is not set at all or is set to '0', upon selecting an image a link is added below the upload control for previewing the selected image.

      preview_width & preview_height - As illustrated above, setting show_preview to '1' causes a preview of the selected image to appear. The dimensions of this preview can be set by using preview_width and preview_height (needless to say, these two parameters take effect only with show_preview set to '1').

        <cms:editable name='prop_image' label='Image' desc='Upload main image of property here'
            show_preview='1'
            preview_width='150'
            type='image' />

      It is always a good idea to set at least one of the two dimensions while using show_preview.

      The following are the parameters that are common to all the types of editable regions. The parameters that are specific to individual types are discussed along with that type of editable region.

      Parameters: name, label, desc, type, order, group, searchable, search_type, hidden, required, validator, validator_msg, separator, val_separator.

      name - The only attribute that is mandatory. It needs to be unique amongst all the editable regions within the same template. Only lowercase[a-z] alphabets, numerals[0-9] hyphen and underscore are permitted to be used within a name. For usage see discussion above.

      label - Label instructs Couch to display a more user friendly name than the name attribute above. Unlike name, it has no limitation of the type of characters that can be used within it. If label attribute is not supplied, Couch by default uses the name as the label. For usage see discussion above.

      desc - This can be used to provide the user some more information about the editable region. For usage see discussion above.

      type - text

      order - By default, the order in which the editable regions appear in the Admin panel matches the order in which they have been created. This order can be tweaked by setting the order parameter. For example -

      order='3'

      The higher the order number, the lower the editable region appears on the page (think about it as the higher number being heavier). Thus a region with an order number of '-2' will appear above that with an order number of '0' which in turn will appear higher on the page than a region with an order number of '2'.

      The default order number given to all editable regions is '0'.

      group - Related editable regions can be grouped together by setting the group parameter of each region to the name of an another editable region of type group. For example -

      group='paypal_group'

      - where paypal_group is the name of an editable region of type group.

      searchable -  searchable='0'

      Setting the searchable parameter to '0' for an editable region will exclude its contents from search results.

      search_type - search_type='decimal'

      search_type parameter determines how the values contained within an editable region are sorted and compared. Couch recognizes three different search_types -

          text
          integer
          decimal

      The default search_type of all editable regions is text. For editable regions of type text, radio and dropdown, the search_type can be changed to integer or decimal if the values contained within them would be numeric.

      It is necessary to set an explicit numeric type on an editable region only when you wish to use the values contained within it to make comparisions (i.e. age < 40) or to sort some output based on these values. See Pages.

      hidden - hidden='1'

      hidden parameter can be set to '1' to supress the output of an editable region that has been defined outside the Template tag.

      required - required='1'

      Setting the required parameter to '1' for an editable region will make it mandatory for the user to input something within it. i.e. the region cannot be left empty.

      If an editable region marked as required is left empty, the user is not allowed to save his changes and a default error message gets displayed. You can display your custom error message by setting the validator_msg parameter described below.

      validator - Couch has several built-in validators that can be used to enforce that the user only inputs valid data into an editable region -
      min_len

      validator='min_len=6'

      In the example above the length of the input (i.e. the number of characters in it) cannot be less than 6.
      max_len

      validator='max_len=20'

      In the example above the length of the input (i.e. the number of characters in it) cannot be more than 20.
      exact_len

      validator='exact_len=10'

      In the example above the length of the input (i.e. the number of characters in it) has to be exactly 10. It cannot be less or more than the specified value.
      alpha

      validator='alpha'

      In the example above the only characters allowed in the input would be a to z and A to Z.
      alpha_num

      validator='alpha_num'

      In the example above the only characters allowed in the input would be a to z, A to Z and numbers 0 to 9.
      integer

      validator='integer'

      In the example above only numbers 0 to 9 and the negative sign '-' are allowed. e.g.

      -3, -2, -1, 0, 1, 2, 3

      non_negative_integer

      validator='non_negative_integer'

      In the example above only numbers 0 to 9 are allowed. e.g.

      0, 1, 2, 3

      non_zero_integer

      validator='non_zero_integer'

      In the example above only numbers 1 to 9 are allowed. e.g.

      1, 2, 3

      decimal

      validator='decimal'

      In the example above only numeric values are allowed. e.g.

      -3, -2.5, -2, -1, 0, 0.02, 1, 2, 3.45

      non_negative_decimal

      validator='non_negative_decimal'

      In the example above only non-negative numeric values are allowed. e.g.

      0, 0.02, 1, 2, 3.45

      non_zero_decimal

      validator='non_zero_decimal'

      In the example above only numeric values larger than 0 are allowed. e.g.

      0.02, 1, 2, 3.45

      email

      validator='email'

      In the example above only a valid email address is allowed.
      url

      validator='url'

      In the example above only a valid URL is allowed.
      matches_field

      This is used to ensure that the user has input identical contents into two ediatble regions (e.g. Password and Confirm Password).

      validator='matches_field=my_password'

      In the example above, Couch will allow input only if it matches that in another editable region named my_password.
      regex

      This is a very powerful option and can actually mimic all the validators described above (and much more).
      It requires a little knowledge of Regular Expressions (as understood by PHP), though.

      validator='regex=/(cat|dog)$/i'

      In the silly example, the input is considered valid only if it ends in either cat or dog.

      Multiple validators can be applied together by separating them with a '|' (pipe) character. For example -

      validator='alpha_num | min_len=6 | max_len=14'
      validator_msg

      When a validator mentioned above fails (this includes the required parameter too) and the input is rejected, the changes made by the user are not saved and a default error message is displayed.

      You can display your own custom message instead by setting the validator_msg parameter. For example, the following is a custom message that is displayed when a required region is left empty -

      validator_msg='required=What! You think you can get away with leaving this empty?'

      Multiple messages can be applied together by separating them with a '|' (pipe) character. For example -

      validator_msg='required=Please enter something | min_len=Too short!'
      separator
      val_separator

      The use of '|' (pipe) character as the default separator between validators and validator_msg parameters, as well as the use of '=' (equals-to) before a value, is sometimes not possible if the same characters appear elsewhere within the expression. e.g. in the regex example -

      validator='regex=/(cat|dog)$/i'

      - the pipe character appears within the regular expression itself, thus that validator cannot be combined with any other using a pipe.

      In such cases, the default separator and value separator can be set to any other character using the separator and val_separator parameters. For example -

      separator='#'
      val_separator=':'

      With the separator and the val_separator having changed, the regex validator can now be combined with other validator thus -

      validator='regex:/(cat|dog)$/i # min_len:14'

      The validator_msg will now become -

      validator_msg='required:Please enter something # min_len:Too short!'

      Variables: A variable by the name of the editable region becomes available in the context the region is being used in
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/editable/image.html'


#EDITABLE THUMBNAIL
  "<cms:editable name='prop_image' label='Image' desc='Upload main image of property' type='thumbnail' />":
    'prefix':'editable_image'
    'body':"""
      editable type='image' name='$1' ${2:label='$3'} ${4:desc='$5'} ${6:order='$7'} ${8:group='$9'} ${10:searchable='0'} ${11:hidden='1'} ${12:required='1'} ${13:validator='$14'} ${15:validator_msg='$16'} ${17:seperator='$18'} ${19:val_separator='$20'} ${21:width='$22'}
      ${23:height='$24'} ${25:enforce_max='1'}
      ${26:quality='$27'} ${28:show_preview='1'} ${29:preview_width='$30'} ${31:preview_height='$32'} ${33:maxlength='$34'} ${35:search_type='$36'} />
    """
    'description': """
      <cms:editable
          name='my_image_thumb'
          label='Image Thumbnail'
          desc='Thumbnail of main image'
          width='100'
          show_preview='1'
          assoc_field='my_image'
          type='thumbnail'
      />

      Editable region of type thumbnail, as the name suggests, is used to automatically create thumbnail images.

      Thumbnail type is different from all other types of editable regions in that the user does not directly edit anything within it. Instead it is attached to an existing editable region of type image which then becomes the source for the thumbnail. Any time the content of the image type is edited, the thumbnail attached to it also gets automatically updated.

      Once the thumbnail has been created, this editable region then holds its fully qualified URL.

      The thumbnail gets created in the same folder as that of the main image.

      Suppose we have an editable region, named my_image, of type image -

        <cms:editable name='my_image' label='Image' desc='Upload main image here' type="image" />

      To create a thumbnail automatically for any image that gets selected into it, we can define a new editable region of type thumbnail and associate it with the region above by using the assoc_field parameter -

        <cms:editable
            name='my_image_thumb'
            label='Image Thumbnail'
            desc='Thumbnail of main image'
            width='100'
            show_preview='1'
            assoc_field='my_image'
            type='thumbnail'
        />

      The code above will result in something like this below the parent image type editable region -
      Once the user selects an image into the main image region (and saves the page), the thumbnail gets created automatically -


      Anytime the user changes the main image (and saves the changes), the thumbnail automatically reflects the changes.

      To create multiple thumbnail images of the same image (one might be square, the other rectangular, perhaps), define multiple regions and associate them all with the same parent image.

      The contents of this region can be accessed, as with all other editable regions, by using the variable named after it -

        <img src="<cms:show my_image_thumb />" />


      Apart from the parameters common to all types of editable regions, the regions of thumbnail type can take the following
      Parameters: height, enforce_max, quality, show_preview, preview_width, preview_height.

      width & height - Parameters width and height specify the dimensions of the thumbnail.
      If neither width nor height are specified, the resulting thumbnail is of exactly the same dimensions as the associated image.

      Specifying a single dimension only will create a thumbnail with that dimension of the specified value and the other dimension of a value that retains the original proportion of the image. e.g.

        <cms:editable name='my_image_thumb' label='Image Thumbnail' desc='Thumbnail of main image'
            width='100'
            show_preview='1'
            assoc_field='my_image'
            type='thumbnail' />

      Parent Image (200 x 300) 	Thumbnail (100 x 150) 	Remarks
		    The width was made 100px and the  height was proportionately scaled to 150px so that the original proportion between the dimensions is retained.

      Specifying both the dimensions will create a thumbnail with each dimension of the specified values. The original proportion between the dimensions is preserved and hence this could lead to cropping off of any dimension that overshoots the specified value in the attempt to retain proportion. e.g.

        <cms:editable name='my_image_thumb' label='Image Thumbnail' desc='Thumbnail of main image'
            width='100'
            height='80'
            show_preview='1'
            assoc_field='my_image'
            type='thumbnail' />

      Parent Image (200 x 300) 	Thumbnail (100 x 80) 	Remarks
		  The width was made 100px and the height was proportionately scaled resulting in a dimension of 150px. Since a height of only 80px was asked for, the surplus 70px were cropped off (35px equally from both sides with the two images aligned in the center).

      As is obvious from the second example above, if both the dimensions are specified and the thumbnail's ratio does not match that of the parent image, the cropping that inevitably occurs can sometimes lead to unacceptable results. In the thumbnail above the most important part of the image has been cropped off. This can be rectified by asking Couch to recreate the thumbnail but this time aligning it to the top of the parent image instead of the default center.


      enforce_max - Setting this parameter will cause Couch to simply scale (instead of cropping as in the example above) the thumbnail, ensuring that none of its two dimensions exceed those specfied by the width and height parameters.

      quality -
        <cms:editable name='my_image_thumb' label='Image Thumbnail' desc='Thumbnail of main image'
          width='100'
          show_preview='1'
          quality='50'
          assoc_field='my_image'
          type='thumbnail' />

      You can set quality from 0 (worst quality, smaller file) to 100 (best quality, biggest file). The default value is 80.

      show_preview -
        <cms:editable name='my_image_thumb' label='Image Thumbnail' desc='Thumbnail of main image'
          width='100'
          show_preview='1'
          assoc_field='my_image'
          type='thumbnail' />

      Setting show_preview to '1' makes Couch display a preview of the created thumbnail (as visible in the examples above). Omitting this parameter or explicitly setting it to '0' will make Couch display only a link to the thumbnail instead of the preview image.

      preview_width & preview_height: As noted above, setting show_preview to '1' causes a preview of the thumbnail to appear. The dimensions of this preview can be set by using preview_width and preview_height (needless to say, these two parameters take effect only with show_preview set to '1').

        <cms:editable name='my_image_thumb' label='Image Thumbnail' desc='Thumbnail of main image'
            width='100'
            show_preview='1'
            preview_width='80'
            assoc_field='my_image'
            type='thumbnail' />

      If both preview_width and preview_height are omitted, the thumbnail preview is of exactly the same dimensions as the thumbnail. Usually this is what you'd want and you won't find yourself setting preview_width or preview_height too often.

      The following are the parameters that are common to all the types of editable regions. The parameters that are specific to individual types are discussed along with that type of editable region.

      Parameters: name, label, desc, type, order, group, searchable, search_type, hidden, required, validator, validator_msg, separator, val_separator.

      name - The only attribute that is mandatory. It needs to be unique amongst all the editable regions within the same template. Only lowercase[a-z] alphabets, numerals[0-9] hyphen and underscore are permitted to be used within a name. For usage see discussion above.

      label - Label instructs Couch to display a more user friendly name than the name attribute above. Unlike name, it has no limitation of the type of characters that can be used within it. If label attribute is not supplied, Couch by default uses the name as the label. For usage see discussion above.

      desc - This can be used to provide the user some more information about the editable region. For usage see discussion above.

      type - text

      order - By default, the order in which the editable regions appear in the Admin panel matches the order in which they have been created. This order can be tweaked by setting the order parameter. For example -

      order='3'

      The higher the order number, the lower the editable region appears on the page (think about it as the higher number being heavier). Thus a region with an order number of '-2' will appear above that with an order number of '0' which in turn will appear higher on the page than a region with an order number of '2'.

      The default order number given to all editable regions is '0'.

      group - Related editable regions can be grouped together by setting the group parameter of each region to the name of an another editable region of type group. For example -

      group='paypal_group'

      - where paypal_group is the name of an editable region of type group.

      searchable -  searchable='0'

      Setting the searchable parameter to '0' for an editable region will exclude its contents from search results.

      search_type - search_type='decimal'

      search_type parameter determines how the values contained within an editable region are sorted and compared. Couch recognizes three different search_types -

          text
          integer
          decimal

      The default search_type of all editable regions is text. For editable regions of type text, radio and dropdown, the search_type can be changed to integer or decimal if the values contained within them would be numeric.

      It is necessary to set an explicit numeric type on an editable region only when you wish to use the values contained within it to make comparisions (i.e. age < 40) or to sort some output based on these values. See Pages.

      hidden - hidden='1'

      hidden parameter can be set to '1' to supress the output of an editable region that has been defined outside the Template tag.

      required - required='1'

      Setting the required parameter to '1' for an editable region will make it mandatory for the user to input something within it. i.e. the region cannot be left empty.

      If an editable region marked as required is left empty, the user is not allowed to save his changes and a default error message gets displayed. You can display your custom error message by setting the validator_msg parameter described below.

      validator - Couch has several built-in validators that can be used to enforce that the user only inputs valid data into an editable region -
      min_len

      validator='min_len=6'

      In the example above the length of the input (i.e. the number of characters in it) cannot be less than 6.
      max_len

      validator='max_len=20'

      In the example above the length of the input (i.e. the number of characters in it) cannot be more than 20.
      exact_len

      validator='exact_len=10'

      In the example above the length of the input (i.e. the number of characters in it) has to be exactly 10. It cannot be less or more than the specified value.
      alpha

      validator='alpha'

      In the example above the only characters allowed in the input would be a to z and A to Z.
      alpha_num

      validator='alpha_num'

      In the example above the only characters allowed in the input would be a to z, A to Z and numbers 0 to 9.
      integer

      validator='integer'

      In the example above only numbers 0 to 9 and the negative sign '-' are allowed. e.g.

      -3, -2, -1, 0, 1, 2, 3

      non_negative_integer

      validator='non_negative_integer'

      In the example above only numbers 0 to 9 are allowed. e.g.

      0, 1, 2, 3

      non_zero_integer

      validator='non_zero_integer'

      In the example above only numbers 1 to 9 are allowed. e.g.

      1, 2, 3

      decimal

      validator='decimal'

      In the example above only numeric values are allowed. e.g.

      -3, -2.5, -2, -1, 0, 0.02, 1, 2, 3.45

      non_negative_decimal

      validator='non_negative_decimal'

      In the example above only non-negative numeric values are allowed. e.g.

      0, 0.02, 1, 2, 3.45

      non_zero_decimal

      validator='non_zero_decimal'

      In the example above only numeric values larger than 0 are allowed. e.g.

      0.02, 1, 2, 3.45

      email

      validator='email'

      In the example above only a valid email address is allowed.
      url

      validator='url'

      In the example above only a valid URL is allowed.
      matches_field

      This is used to ensure that the user has input identical contents into two ediatble regions (e.g. Password and Confirm Password).

      validator='matches_field=my_password'

      In the example above, Couch will allow input only if it matches that in another editable region named my_password.
      regex

      This is a very powerful option and can actually mimic all the validators described above (and much more).
      It requires a little knowledge of Regular Expressions (as understood by PHP), though.

      validator='regex=/(cat|dog)$/i'

      In the silly example, the input is considered valid only if it ends in either cat or dog.

      Multiple validators can be applied together by separating them with a '|' (pipe) character. For example -

      validator='alpha_num | min_len=6 | max_len=14'
      validator_msg

      When a validator mentioned above fails (this includes the required parameter too) and the input is rejected, the changes made by the user are not saved and a default error message is displayed.

      You can display your own custom message instead by setting the validator_msg parameter. For example, the following is a custom message that is displayed when a required region is left empty -

      validator_msg='required=What! You think you can get away with leaving this empty?'

      Multiple messages can be applied together by separating them with a '|' (pipe) character. For example -

      validator_msg='required=Please enter something | min_len=Too short!'
      separator
      val_separator

      The use of '|' (pipe) character as the default separator between validators and validator_msg parameters, as well as the use of '=' (equals-to) before a value, is sometimes not possible if the same characters appear elsewhere within the expression. e.g. in the regex example -

      validator='regex=/(cat|dog)$/i'

      - the pipe character appears within the regular expression itself, thus that validator cannot be combined with any other using a pipe.

      In such cases, the default separator and value separator can be set to any other character using the separator and val_separator parameters. For example -

      separator='#'
      val_separator=':'

      With the separator and the val_separator having changed, the regex validator can now be combined with other validator thus -

      validator='regex:/(cat|dog)$/i # min_len:14'

      The validator_msg will now become -

      validator_msg='required:Please enter something # min_len:Too short!'

      Variables: A variable by the name of the editable region becomes available in the context the region is being used in
    """
    'descriptionMoreURL':'https://docs.couchcms.com/tags-reference/editable/thumbnail.html'
